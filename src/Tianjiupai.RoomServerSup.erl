-module('Tianjiupai.RoomServerSup').
-export(['start_child_impl'/1, 'start_link'/0, 'start_child'/2, 'which_children'/0, 'as_pid'/1]).
'start_child_impl'(S1916StartArg) -> begin {S1917RoomId, S1918RoomName} = S1916StartArg, 'SesterlStdlib.SupervisorDynamic':'make_child_proc'(fun() -> begin S1919Res = 'Tianjiupai.RoomServer':'start_link'(S1917RoomId, S1918RoomName), sesterl_internal_prim:'return'('SesterlStdlib.Result':'map'((fun 'Tianjiupai.RoomServer':'as_pid'/1), S1919Res)) end end) end.
'start_link'() -> 'Tianjiupai.RoomServerSup.Impl':'start_link_name'(ok, {'global', ok}).
'start_child'(S1940RoomId, S1941RoomName) -> begin S1942Opt = 'Tianjiupai.RoomServerSup.Impl':'where_is_global'(ok), case S1942Opt of {'ok', S1943Proc} -> begin S1944Res = 'Tianjiupai.RoomServerSup.Impl':'start_child'(S1943Proc, {S1940RoomId, S1941RoomName}), sesterl_internal_prim:'return'('SesterlStdlib.Result':'map'((fun 'Tianjiupai.RoomServer':'from_pid'/1), S1944Res)) end; 'error' -> sesterl_internal_prim:'return'({'error', 'SesterlStdlib.RawValue':'forget'(<<"supervisor not found"/utf8>>)}) end end.
'which_children'() -> begin S1946Opt = 'Tianjiupai.RoomServerSup.Impl':'where_is_global'(ok), case S1946Opt of {'ok', S1947Proc} -> begin S1948Pids = 'Tianjiupai.RoomServerSup.Impl':'which_children'(S1947Proc), sesterl_internal_prim:'return'('SesterlStdlib.List':'map'((fun 'Tianjiupai.RoomServer':'from_pid'/1), S1948Pids)) end; 'error' -> sesterl_internal_prim:'return'([]) end end.
'as_pid'(S1950Proc) -> 'Tianjiupai.RoomServerSup.Impl':'as_pid'(S1950Proc).
