-module('Tianjiupai.RoomServerSup').
-export(['start_child_impl'/1, 'start_link'/0, 'start_child'/2, 'which_children'/0, 'as_pid'/1]).
'start_child_impl'(S1915StartArg) -> begin {S1916RoomId, S1917RoomName} = S1915StartArg, 'SesterlStdlib.SupervisorDynamic':'make_child_proc'(fun() -> begin S1918Res = 'Tianjiupai.RoomServer':'start_link'(S1916RoomId, S1917RoomName), sesterl_internal_prim:'return'('SesterlStdlib.Result':'map'((fun 'Tianjiupai.RoomServer':'as_pid'/1), S1918Res)) end end) end.
'start_link'() -> 'Tianjiupai.RoomServerSup.Impl':'start_link_name'(ok, {'global', ok}).
'start_child'(S1939RoomId, S1940RoomName) -> begin S1941Opt = 'Tianjiupai.RoomServerSup.Impl':'where_is_global'(ok), case S1941Opt of {'ok', S1942Proc} -> begin S1943Res = 'Tianjiupai.RoomServerSup.Impl':'start_child'(S1942Proc, {S1939RoomId, S1940RoomName}), sesterl_internal_prim:'return'('SesterlStdlib.Result':'map'((fun 'Tianjiupai.RoomServer':'from_pid'/1), S1943Res)) end; 'error' -> sesterl_internal_prim:'return'({'error', 'SesterlStdlib.RawValue':'forget'(<<"supervisor not found"/utf8>>)}) end end.
'which_children'() -> begin S1945Opt = 'Tianjiupai.RoomServerSup.Impl':'where_is_global'(ok), case S1945Opt of {'ok', S1946Proc} -> begin S1947Pids = 'Tianjiupai.RoomServerSup.Impl':'which_children'(S1946Proc), sesterl_internal_prim:'return'('SesterlStdlib.List':'map'((fun 'Tianjiupai.RoomServer':'from_pid'/1), S1947Pids)) end; 'error' -> sesterl_internal_prim:'return'([]) end end.
'as_pid'(S1949Proc) -> 'Tianjiupai.RoomServerSup.Impl':'as_pid'(S1949Proc).
