import Models
import Quad
import SnapshotId
import Card

module Types = struct

  type room_id = Models.room_id

  type room_name = Models.room_name

  type user_id = Models.user_id

  type user_name = Models.user_name

  type user_state = {
    user_name  : user_name,
    belongs_to : option<room_id>,
  }

  type user = Models.user

  type snapshot_id = Models.snapshot_id

  type whole_room_state = {
    room_id    : room_id,
    room_name  : room_name,
    members    : list<user>,
    is_playing : bool,
  }

  type game_player = {
    user  : user,
    score : int
  }

  type wenzun =
    | Minor
    | Major

  type closed_or<$a> =
    Models.closed_or<$a>

  type exposed<$a> =
    {$a, list<closed_or<$a>>}

  type big_with_design = {
    design : Card.design,
    main   : Card.big,
  }

  type table_state =
    | Starting
    | Wuzun(exposed<unit>)
    | Wenzun(exposed<wenzun>)
    | SingleWen(exposed<Card.wen>)
    | SingleWu(exposed<Card.wu>)
    | DoubleWen(exposed<Card.wen>)
    | DoubleWu(exposed<Card.wu_number>)
    | DoubleBoth(exposed<big_with_design>)
    | TripleWen(exposed<big_with_design>)
    | TripleWu(exposed<Card.big>)
    | Quadruple(exposed<Card.big>)

  type game_meta = {
    inning_index     : int,
    num_consecutives : int,
    parent_seat      : Quad.seat,
    players          : Quad.t<game_player>
  }

  type observable_inning_state = {
    starts_at : Quad.seat,
    your_hand : list<Card.t>,
    gains     : Quad.t<list<Card.t>>,
    table     : table_state
  }

  type observable_inning =
    | ObservableDuringInning(observable_inning_state)
    | ObservableInningEnd(Quad.t<list<Card.t>>)

  type observable_game_state = {
    meta              : game_meta,
    observable_inning : observable_inning,
    synchronizing     : bool,
    snapshot_id       : snapshot_id,
  }

  type log =
    | LogComment(user, binary)
    | LogEntered(user)
    | LogExited(user)
    | LogGameStart

  type submission = {
    seat       : Quad.seat,
    submitted  : list<option<Card.t>>,
    new_state  : observable_game_state,
    trick_last : option<table_state>,
  }

  type notification =
    | NotifyComment(user, binary)
    | NotifyEntered(user)
    | NotifyExited(user)
    | NotifyGameStart(observable_game_state)
    | NotifyNextStep
    | NotifySubmission(submission)

  type observable_room_state =
    | Waiting(list<user>)
    | Playing(observable_game_state)

  type personal_room_state = {
    room_id    : room_id,
    room_name  : room_name,
    logs       : list<log>,
    observable : observable_room_state,
  }

end
