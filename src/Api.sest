import Logger
import Models
import Types
import User
import Room

module Api = struct
  open Types

  val create_user(user_name : user_name) = act
    User.create(user_name)

  val get_all_rooms() = act
    do room_summaries <- Room.get_all_rooms() in
    let enc = Models.encode_get_all_rooms_response() in
    return(Json.Encode.run(enc({rooms = room_summaries})))

  val get_personal_state(room_id : room_id, user_id : user_id) = act
    do res <- Room.get_personal_state(room_id, user_id) in
    case res of
    | Some(personal_state) ->
        let enc = Models.encode_personal_state() in
        return(Some(Json.Encode.run(enc(personal_state))))
    | None ->
        return(None)
    end

  val submit(room_id, user_id, cards) = act
    do res <- Room.submit(room_id, user_id, cards) in
    let is_success =
      case res of
      | Some(_) -> true
      | None    -> false
      end
    in
    let _ =
      assert Logger.info(
        f'submit (room_id: ~p, user_id: ~p, cards: ~p, success: ~p)',
        {user_id, room_id, cards, is_success}
      )
    in
    case res of
    | Some({obs, trick_last_opt}) ->
        let enc = Models.encode_submit_cards_response() in
        return(Some(Json.Encode.run(enc({ new_state = obs, trick_last = trick_last_opt }))))
    | None ->
        return(None)
    end

  val create_room(room_name : room_name) = act
    Room.create(room_name)

  val enter_room(user_id : user_id, room_id : room_id) = act
    do res <- User.set_room(user_id, room_id) in
    case res of
    | Some({}) ->
        do res <- User.get_name(user_id) in
        let Some(user_name) = res in
        let user = { user_id = user_id, user_name = user_name } in
        do res <- Room.attend(room_id, user) in
        let is_success =
          case res of
          | Some(_) -> true
          | None    -> false
          end
        in
        let _ =
          assert Logger.info(
            f'attend (user_id: ~p, room_id: ~p, success: ~p)',
            {user_id, room_id, is_success}
          )
        in
        case res of
        | Some(personal_state) ->
            let enc = Models.encode_enter_room_response() in
            return(Some(Json.Encode.run(enc(personal_state))))
        | None ->
            return(None)
        end
    | None ->
        return(None)
    end

end
