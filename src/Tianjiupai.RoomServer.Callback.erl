-module('Tianjiupai.RoomServer.Callback').
-export(['set_disconnection_timer'/2, 'cancel_disconnection_timer'/3, 'get_members_from_state'/1, 'make_whole_room_state'/1, 'update_plaza'/1, 'init'/1, 'reply'/2, 'no_reply'/1, 'find_user_seat'/2, 'get_connected_user_ids'/2, 'get_connected_user_ids_from_list'/2, 'get_connected_user_ids_from_quad'/2, 'get_all_connected_user_ids'/1, 'make_game_player'/1, 'make_game_meta'/1, 'make_observable_game_state'/2, 'make_observable'/2, 'make_personal_state'/2, 'make_initial_sync'/0, 'start_new_inning'/1, 'notify'/2, 'notify_for_each'/2, 'stop'/1, 'find_empty_seat'/1, 'handle_send_chat'/3, 'is_none'/1, 'handle_attend'/3, 'handle_exit'/2, 'make_winner_diff'/1, 'update_score'/2, 'deal_with_trick_end'/3, 'make_loser_updates_when_parent_wins'/4, 'make_loser_updates_when_child_wins'/5, 'deal_with_inning_end'/4, 'handle_submit_impl'/3, 'handle_submit'/3, 'handle_ack'/3, 'handle_require_next_inning'/3, 'handle_set_connection'/3, 'send_room_deletion_to_user_server'/1, 'handle_disconnection_timeout'/2, 'update_sync'/2, 'handle_call'/3, 'handle_cast'/2, 'handle_timeout'/1, 'handle_down'/4, 'handle_info'/2, 'terminate'/2]).
'set_disconnection_timer'(S1539UserId, S1540Message) -> begin S1541Res = 'SesterlStdlib.Timer':'send_after_self'('Tianjiupai.Constants':'disconnection_timeout'(), {'disconnection_timeout', S1539UserId}), begin _ = begin S3224 = 'Tianjiupai.Logger':'debug'({"sets timer (~s, user_id: ~s, result: ~p)", 3}, {S1540Message, S1539UserId, S1541Res}), S3224(<<"RoomServer.sest">>, 164) end, sesterl_internal_prim:'return'(S1541Res) end end.
'cancel_disconnection_timer'(S1543Timer, S1544UserId, S1545Message) -> begin S1546Res = 'SesterlStdlib.Timer':'cancel'(S1543Timer), begin _ = begin S3226 = 'Tianjiupai.Logger':'debug'({"cancels timer (~s, user_id: ~s, timer: ~p, result: ~p)", 4}, {S1545Message, S1544UserId, S1543Timer, S1546Res}), S3226(<<"RoomServer.sest">>, 174) end, sesterl_internal_prim:'return'(S1546Res) end end.
'get_members_from_state'(S1548RoomState) -> case S1548RoomState of {'internal_waiting', S1549WaitingState} -> {false, 'SesterlStdlib.List':'map'(fun(S1550W) -> maps:get(user, S1550W) end, maps:get(members, S1549WaitingState))}; {'internal_playing', S1551WholeGameState} -> begin {'meta', S1552Meta} = maps:get(meta, S1551WholeGameState), begin S1553PlayerOpts = 'Tianjiupai.Quad':'to_list'(maps:get(players, S1552Meta)), begin S1556Members = 'SesterlStdlib.List':'filter_map'(fun(S1554PlayerOpt) -> case S1554PlayerOpt of 'error' -> 'error'; {'ok', S1555Player} -> {'ok', maps:get(user, S1555Player)} end end, S1553PlayerOpts), {true, S1556Members} end end end end.
'make_whole_room_state'(S1558State) -> begin S1559Settings = maps:get(settings, S1558State), begin {S1560IsPlaying, S1561Members} = 'Tianjiupai.RoomServer.Callback':'get_members_from_state'(maps:get(room_state, S1558State)), #{is_playing => S1560IsPlaying, members => S1561Members, room => #{room_id => maps:get(room_id, S1559Settings), room_name => maps:get(room_name, S1559Settings)}} end end.
'update_plaza'(S1563State) -> begin S1564RoomSummary = 'Tianjiupai.RoomServer.Callback':'make_whole_room_state'(S1563State), 'Tianjiupai.PlazaServer':'update_room'(S1564RoomSummary) end.
'init'(S1566InitArg) -> begin {S1567RoomId, S1568RoomName} = S1566InitArg, begin S1569Settings = #{room_id => S1567RoomId, room_name => S1568RoomName}, begin S1570State = #{reversed_logs => [], room_state => {'internal_waiting', #{members => []}}, settings => S1569Settings}, begin _ = 'Tianjiupai.RoomServer.Callback':'update_plaza'(S1570State), 'SesterlStdlib.GenServer':'init_ok'(S1570State, #{timeout => 'Tianjiupai.Constants':'room_expiration_timeout'()}) end end end end.
'reply'(S1572Response, S1573State) -> 'SesterlStdlib.GenServer':'reply'(S1572Response, S1573State, #{timeout => 'Tianjiupai.Constants':'room_expiration_timeout'()}).
'no_reply'(S1575State) -> 'SesterlStdlib.GenServer':'no_reply'(S1575State, #{timeout => 'Tianjiupai.Constants':'room_expiration_timeout'()}).
'find_user_seat'(S1577GameState, S1578UserId) -> begin {'meta', S1579Meta} = maps:get(meta, S1577GameState), begin S1582Opt = 'Tianjiupai.Quad':'find'(fun(S1580PlayerOpt) -> case S1580PlayerOpt of 'error' -> false; {'ok', S1581Player} -> 'SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1581Player)), S1578UserId) end end, maps:get(players, S1579Meta)), 'SesterlStdlib.Option':'map'(fun({S1583Seat, {'ok', S1584Player}}) -> {S1583Seat, S1584Player} end, S1582Opt) end end.
'get_connected_user_ids'(S1586GameState, S1587Seat0) -> begin {'meta', S1588Meta} = maps:get(meta, S1586GameState), begin {S1589PA, S1590PB, S1591PC, S1592PD} = 'Tianjiupai.Quad':'decompose'(maps:get(players, S1588Meta)), begin S1593Players = [{'seat_a', S1589PA} | [{'seat_b', S1590PB} | [{'seat_c', S1591PC} | [{'seat_d', S1592PD} | []]]]], 'SesterlStdlib.List':'filter_map'(fun({S1594Seat, S1595PlayerOpt}) -> case 'Tianjiupai.Quad':'seat_equal'(S1594Seat, S1587Seat0) of true -> 'error'; false -> 'SesterlStdlib.Option':'bind'(S1595PlayerOpt, fun(S1596Player) -> case maps:get(connection, S1596Player) of {'connected', _, _} -> {'ok', maps:get(user_id, maps:get(user, S1596Player))}; {'disconnected', _} -> 'error' end end) end end, S1593Players) end end end.
'get_connected_user_ids_from_list'(S1598Players, S1599UserId) -> 'SesterlStdlib.List':'filter_map'(fun(S1600P) -> case maps:get(connection, S1600P) of {'connected', _, _} -> begin S1601U = maps:get(user_id, maps:get(user, S1600P)), case 'SesterlStdlib.Binary':'equal'(S1601U, S1599UserId) of true -> 'error'; false -> {'ok', S1601U} end end; {'disconnected', _} -> 'error' end end, S1598Players).
'get_connected_user_ids_from_quad'(S1603Players, S1604UserId) -> 'SesterlStdlib.List':'filter_map'(fun(S1605GOpt) -> case S1605GOpt of 'error' -> 'error'; {'ok', S1606G} -> case maps:get(connection, S1606G) of {'connected', _, _} -> begin S1607U = maps:get(user_id, maps:get(user, S1606G)), case 'SesterlStdlib.Binary':'equal'(S1607U, S1604UserId) of true -> 'error'; false -> {'ok', S1607U} end end; {'disconnected', _} -> 'error' end end end, 'Tianjiupai.Quad':'to_list'(S1603Players)).
'get_all_connected_user_ids'(S1609State) -> case maps:get(room_state, S1609State) of {'internal_waiting', S1610WaitingState} -> 'SesterlStdlib.List':'filter_map'(fun(S1611Player) -> case maps:get(connection, S1611Player) of {'connected', _, _} -> {'ok', maps:get(user_id, maps:get(user, S1611Player))}; {'disconnected', _} -> 'error' end end, maps:get(members, S1610WaitingState)); {'internal_playing', S1612WholeGameState} -> begin {'meta', S1613Meta} = maps:get(meta, S1612WholeGameState), 'SesterlStdlib.List':'filter_map'(fun(S1614PlayerOpt) -> case S1614PlayerOpt of 'error' -> 'error'; {'ok', S1615Player} -> case maps:get(connection, S1615Player) of {'connected', _, _} -> {'ok', maps:get(user_id, maps:get(user, S1615Player))}; {'disconnected', _} -> 'error' end end end, 'Tianjiupai.Quad':'to_list'(maps:get(players, S1613Meta))) end end.
'make_game_player'(S1617Iplayer) -> begin S1618IsConnected = case maps:get(connection, S1617Iplayer) of {'connected', _, _} -> true; {'disconnected', _} -> false end, #{is_connected => S1618IsConnected, user => maps:get(user, S1617Iplayer)} end.
'make_game_meta'({'meta', S1620Meta}) -> #{inning_index => maps:get(inning_index, S1620Meta), num_consecutives => maps:get(num_consecutives, S1620Meta), parent_seat => maps:get(parent_seat, S1620Meta), players => 'Tianjiupai.Quad':'map'(fun(S1621Opt) -> 'SesterlStdlib.Option':'map'((fun 'Tianjiupai.RoomServer.Callback':'make_game_player'/1), S1621Opt) end, maps:get(players, S1620Meta)), scores => maps:get(scores, S1620Meta)}.
'make_observable_game_state'(S1623GameState, S1624UserId) -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1623GameState, S1624UserId) of 'error' -> 'error'; {'ok', {S1625Seat, _}} -> begin S1626Synchronizing = case maps:get(sync, S1623GameState) of 'waiting_input' -> false; {'waiting_sync', _} -> true end, begin S1629ObservableInning = case maps:get(inning, S1623GameState) of {'during_inning', S1627Inning} -> {'observable_during_inning', 'Tianjiupai.Inning':'observe'(S1625Seat, S1627Inning)}; {'inning_end', S1628GainsQuad, _} -> {'observable_inning_end', S1628GainsQuad} end, {'ok', #{meta => 'Tianjiupai.RoomServer.Callback':'make_game_meta'(maps:get(meta, S1623GameState)), observable_inning => S1629ObservableInning, snapshot_id => maps:get(snapshot_id, S1623GameState), synchronizing => S1626Synchronizing}} end end end.
'make_observable'(S1631RoomState, S1632UserId) -> case S1631RoomState of {'internal_waiting', S1633WaitingState} -> begin S1635Members = 'SesterlStdlib.List':'map'(fun(S1634W) -> maps:get(user, S1634W) end, maps:get(members, S1633WaitingState)), {'ok', {'waiting_start', S1635Members}} end; {'internal_playing', S1636GameState} -> 'SesterlStdlib.Option':'map'(fun(S1637Obs) -> {'playing_game', S1637Obs} end, 'Tianjiupai.RoomServer.Callback':'make_observable_game_state'(S1636GameState, S1632UserId)) end.
'make_personal_state'(S1639State, S1640UserId) -> begin S1641Settings = maps:get(settings, S1639State), case 'Tianjiupai.RoomServer.Callback':'make_observable'(maps:get(room_state, S1639State), S1640UserId) of 'error' -> 'error'; {'ok', S1642Observable} -> {'ok', #{game => S1642Observable, logs => 'SesterlStdlib.List':'reverse'(maps:get(reversed_logs, S1639State)), room => #{room_id => maps:get(room_id, S1641Settings), room_name => maps:get(room_name, S1641Settings)}}} end end.
'make_initial_sync'() -> 'Tianjiupai.Quad':'make'({false, false, false, false}).
'start_new_inning'({'meta', S1645Meta}) -> begin S1646NextParentSeat = maps:get(parent_seat, S1645Meta), begin S1647Inning = 'Tianjiupai.Inning':'start'(S1646NextParentSeat), begin S1648SnapshotId = 'Tianjiupai.SnapshotId':'generate'(), sesterl_internal_prim:'return'(#{inning => {'during_inning', S1647Inning}, meta => {'meta', S1645Meta}, snapshot_id => S1648SnapshotId, sync => {'waiting_sync', 'Tianjiupai.RoomServer.Callback':'make_initial_sync'()}}) end end end.
'notify'(S1650UserId, S1651Notifications) -> 'Tianjiupai.WebSocketHandler':'notify'(S1650UserId, S1651Notifications).
'notify_for_each'(S1653UserIds, S1654Notifications) -> 'SesterlStdlib.List':'for_each'(fun(S1655UserId) -> 'Tianjiupai.RoomServer.Callback':'notify'(S1655UserId, S1654Notifications) end, S1653UserIds).
'stop'(S1657State) -> begin S1658UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_all_connected_user_ids'(S1657State), begin _ = begin S3248 = 'Tianjiupai.Logger':'debug'({"delete room sync (room_id: ~p)", 1}, {maps:get(room_id, maps:get(settings, S1657State))}), S3248(<<"RoomServer.sest">>, 425) end, begin ok = 'Tianjiupai.PlazaServer':'delete_room_sync'(maps:get(room_id, maps:get(settings, S1657State))), begin _ = begin S3249 = 'Tianjiupai.Logger':'debug'({"deleted from plaza (room_id: ~p)", 1}, {maps:get(room_id, maps:get(settings, S1657State))}), S3249(<<"RoomServer.sest">>, 427) end, begin ok = 'SesterlStdlib.List':'foldl_effect'(fun(ok, S1659UserId) -> begin _ = 'Tianjiupai.WebSocketHandler':'notify_room_close'(S1659UserId), sesterl_internal_prim:'return'(ok) end end, ok, S1658UserIdsForNotification), 'SesterlStdlib.GenServer':'no_reply_and_stop'('SesterlStdlib.StopReason':'normal'(), S1657State) end end end end end.
'find_empty_seat'(S1661GameState) -> begin {'meta', S1662Meta} = maps:get(meta, S1661GameState), 'SesterlStdlib.Option':'map'(fun(S1663Pair) -> begin {S1664Seat, _} = S1663Pair, S1664Seat end end, 'Tianjiupai.Quad':'find'(fun(S1665PlayerOpt) -> case S1665PlayerOpt of {'ok', _} -> false; 'error' -> true end end, maps:get(players, S1662Meta))) end.
'handle_send_chat'(S1667User, S1668Text, S1669State) -> begin {_, S1670Members} = 'Tianjiupai.RoomServer.Callback':'get_members_from_state'(maps:get(room_state, S1669State)), begin S1671Comment = #{from => S1667User, text => S1668Text}, begin _ = begin S1673UserIds = 'SesterlStdlib.List':'map'(fun(S1672U) -> maps:get(user_id, S1672U) end, S1670Members), 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1673UserIds, [{'notify_comment', S1671Comment} | []]) end, 'Tianjiupai.RoomServer.Callback':'reply'('chat_sent', maps:put(reversed_logs, [{'log_comment', S1671Comment} | maps:get(reversed_logs, S1669State)], S1669State)) end end end.
'is_none'(S1675X) -> case S1675X of 'error' -> true; {'ok', _} -> false end.
'handle_attend'(S1677User, S1678WsProc, S1679State) -> begin S1680UserId = maps:get(user_id, S1677User), case maps:get(room_state, S1679State) of {'internal_playing', S1681GameState0} -> case 'Tianjiupai.RoomServer.Callback':'find_empty_seat'(S1681GameState0) of 'error' -> 'Tianjiupai.RoomServer.Callback':'reply'({'attended', 'error'}, S1679State); {'ok', S1682Seat} -> begin {'meta', S1683Meta0} = maps:get(meta, S1681GameState0), begin S1684WsMref = 'Tianjiupai.WebSocketHandler':'monitor'(S1678WsProc), begin S1685Player = #{connection => {'connected', S1678WsProc, S1684WsMref}, user => S1677User}, begin S1686Players1 = 'Tianjiupai.Quad':'update'(S1682Seat, {'ok', S1685Player}, maps:get(players, S1683Meta0)), begin S1687GameState1 = maps:put(meta, {'meta', maps:put(players, S1686Players1, S1683Meta0)}, S1681GameState0), begin S1688UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids'(S1687GameState1, S1682Seat), begin S1693GameState2 = case maps:get(sync, S1687GameState1) of 'waiting_input' -> begin _ = begin S3254 = 'Tianjiupai.Logger':'debug'({"attend -> waiting input (seat: ~p, user_id: ~s)", 2}, {S1682Seat, S1680UserId}), S3254(<<"RoomServer.sest">>, 486) end, begin S1689Notif = {'notify_entered_midway', #{seat => S1682Seat, user => S1677User}}, begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1688UserIdsForNotification, [S1689Notif | []]), sesterl_internal_prim:'return'(S1687GameState1) end end end; {'waiting_sync', S1690SyncQuad0} -> case 'Tianjiupai.Quad':'access'(S1682Seat, S1690SyncQuad0) of true -> begin _ = begin S3255 = 'Tianjiupai.Logger':'debug'({"attend -> no need to sync (seat: ~p, user_id: ~s, sync_quad: ~p)", 3}, {S1682Seat, S1680UserId, S1690SyncQuad0}), S3255(<<"RoomServer.sest">>, 498) end, begin S1691Notif = {'notify_entered_midway', #{seat => S1682Seat, user => S1677User}}, begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1688UserIdsForNotification, [S1691Notif | []]), sesterl_internal_prim:'return'(S1687GameState1) end end end; false -> begin S1692SyncQuad1 = 'Tianjiupai.Quad':'update'(S1682Seat, true, S1690SyncQuad0), begin _ = begin S3256 = 'Tianjiupai.Logger':'debug'({"attend -> sync update (seat: ~p, user_id: ~s, sync_quad: ~p)", 3}, {S1682Seat, S1680UserId, S1692SyncQuad1}), S3256(<<"RoomServer.sest">>, 509) end, case 'Tianjiupai.Quad':'decompose'(S1692SyncQuad1) of {true, true, true, true} -> begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1688UserIdsForNotification, [{'notify_entered_midway', #{seat => S1682Seat, user => S1677User}} | ['notify_next_step' | []]]), sesterl_internal_prim:'return'(maps:put(sync, 'waiting_input', S1687GameState1)) end; _ -> begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1688UserIdsForNotification, [{'notify_entered_midway', #{seat => S1682Seat, user => S1677User}} | []]), sesterl_internal_prim:'return'(maps:put(sync, {'waiting_sync', S1692SyncQuad1}, S1687GameState1)) end end end end end end, begin S1694State = maps:put(reversed_logs, [{'log_entered', S1677User} | maps:get(reversed_logs, S1679State)], maps:put(room_state, {'internal_playing', S1693GameState2}, S1679State)), begin ok = 'Tianjiupai.RoomServer.Callback':'update_plaza'(S1694State), begin {'ok', S1695PersonalState} = 'Tianjiupai.RoomServer.Callback':'make_personal_state'(S1694State, S1680UserId), 'Tianjiupai.RoomServer.Callback':'reply'({'attended', {'ok', S1695PersonalState}}, S1694State) end end end end end end end end end end end; {'internal_waiting', S1696WaitingState} -> begin S1697Members = maps:get(members, S1696WaitingState), case 'SesterlStdlib.List':'any'(fun(S1698W) -> 'SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1698W)), S1680UserId) end, S1697Members) of true -> begin {'ok', S1699PersonalState} = 'Tianjiupai.RoomServer.Callback':'make_personal_state'(S1679State, S1680UserId), 'Tianjiupai.RoomServer.Callback':'reply'({'attended', {'ok', S1699PersonalState}}, S1679State) end; false -> begin S1700WsMref = 'Tianjiupai.WebSocketHandler':'monitor'(S1678WsProc), begin S1701LogEnter = {'log_entered', S1677User}, begin S1702NotifEnter = {'notify_entered', S1677User}, case S1697Members of [S1703W0 | [S1704W1 | [S1705W2 | _]]] -> begin S1706U0 = maps:get(user, S1703W0), begin S1707U1 = maps:get(user, S1704W1), begin S1708U2 = maps:get(user, S1705W2), begin S1713PlayerQuad = begin S1709Player0 = #{connection => maps:get(connection, S1703W0), user => S1706U0}, begin S1710Player1 = #{connection => maps:get(connection, S1704W1), user => S1707U1}, begin S1711Player2 = #{connection => maps:get(connection, S1705W2), user => S1708U2}, begin S1712Player3 = #{connection => {'connected', S1678WsProc, S1700WsMref}, user => S1677User}, 'Tianjiupai.Quad':'make'({{'ok', S1709Player0}, {'ok', S1710Player1}, {'ok', S1711Player2}, {'ok', S1712Player3}}) end end end end, begin S1714ParentSeat = 'seat_a', begin S1715WholeGameMeta = {'meta', #{inning_index => 0, num_consecutives => 0, parent_seat => S1714ParentSeat, players => S1713PlayerQuad, scores => 'Tianjiupai.Quad':'make'({0, 0, 0, 0})}}, begin S1716GameIndex = #{inning_index => 0, num_consecutives => 0}, begin S1717GameState = 'Tianjiupai.RoomServer.Callback':'start_new_inning'(S1715WholeGameMeta), begin _ = 'SesterlStdlib.List':'for_each'(fun(S1718U) -> case 'Tianjiupai.RoomServer.Callback':'make_observable_game_state'(S1717GameState, S1718U) of 'error' -> sesterl_internal_prim:'return'(ok); {'ok', S1719Obs} -> 'Tianjiupai.RoomServer.Callback':'notify'(S1718U, [S1702NotifEnter | [{'notify_game_start', S1719Obs} | []]]) end end, [maps:get(user_id, S1706U0) | [maps:get(user_id, S1707U1) | [maps:get(user_id, S1708U2) | []]]]), begin S1720State = maps:put(reversed_logs, [{'log_game_start', S1716GameIndex} | [S1701LogEnter | maps:get(reversed_logs, S1679State)]], maps:put(room_state, {'internal_playing', S1717GameState}, S1679State)), begin ok = 'Tianjiupai.RoomServer.Callback':'update_plaza'(S1720State), begin {'ok', S1721PersonalState} = 'Tianjiupai.RoomServer.Callback':'make_personal_state'(S1720State, S1680UserId), 'Tianjiupai.RoomServer.Callback':'reply'({'attended', {'ok', S1721PersonalState}}, S1720State) end end end end end end end end end end end end; _ -> begin S1722W = #{connection => {'connected', S1678WsProc, S1700WsMref}, user => S1677User}, begin S1723WaitingState = maps:put(members, 'SesterlStdlib.List':'append'(S1697Members, [S1722W | []]), S1696WaitingState), begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'('SesterlStdlib.List':'map'(fun(S1724W) -> maps:get(user_id, maps:get(user, S1724W)) end, S1697Members), [S1702NotifEnter | []]), begin S1725State = maps:put(reversed_logs, [S1701LogEnter | maps:get(reversed_logs, S1679State)], maps:put(room_state, {'internal_waiting', S1723WaitingState}, S1679State)), begin ok = 'Tianjiupai.RoomServer.Callback':'update_plaza'(S1725State), begin {'ok', S1726PersonalState} = 'Tianjiupai.RoomServer.Callback':'make_personal_state'(S1725State, S1680UserId), 'Tianjiupai.RoomServer.Callback':'reply'({'attended', {'ok', S1726PersonalState}}, S1725State) end end end end end end end end end end end end end end.
'handle_exit'(S1728UserId, S1729State) -> begin S1745Opt = case maps:get(room_state, S1729State) of {'internal_playing', S1730GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1730GameState, S1728UserId) of 'error' -> 'error'; {'ok', {S1731Seat, S1732Player}} -> begin {'meta', S1733Meta0} = maps:get(meta, S1730GameState), begin S1734Players0 = maps:get(players, S1733Meta0), begin S1735Players1 = 'Tianjiupai.Quad':'update'(S1731Seat, 'error', S1734Players0), begin S1736UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids'(S1730GameState, S1731Seat), {'ok', {maps:get(user, S1732Player), S1736UserIdsForNotification, {'internal_playing', maps:put(meta, {'meta', maps:put(players, S1735Players1, S1733Meta0)}, S1730GameState)}}} end end end end end; {'internal_waiting', S1737WaitingState} -> begin S1738Members0 = maps:get(members, S1737WaitingState), case 'SesterlStdlib.List':'filter'(fun(S1739W0) -> 'SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1739W0)), S1728UserId) end, S1738Members0) of [] -> 'error'; [S1740W | _] -> begin S1742Members1 = 'SesterlStdlib.List':'filter'(fun(S1741W0) -> 'SesterlStdlib.Bool':'not'('SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1741W0)), S1728UserId)) end, S1738Members0), begin S1744UserIdsForNotification = 'SesterlStdlib.List':'map'(fun(S1743W) -> maps:get(user_id, maps:get(user, S1743W)) end, S1742Members1), {'ok', {maps:get(user, S1740W), S1744UserIdsForNotification, {'internal_waiting', maps:put(members, S1742Members1, S1737WaitingState)}}} end end end end end, case S1745Opt of 'error' -> 'Tianjiupai.RoomServer.Callback':'reply'({'exited', false}, S1729State); {'ok', {S1746User, S1747UserIdsForNotification, S1748RoomState}} -> begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1747UserIdsForNotification, [{'notify_exited', S1746User} | []]), begin S1749State = maps:put(reversed_logs, [{'log_exited', S1746User} | maps:get(reversed_logs, S1729State)], maps:put(room_state, S1748RoomState, S1729State)), begin ok = 'Tianjiupai.RoomServer.Callback':'update_plaza'(S1749State), 'Tianjiupai.RoomServer.Callback':'reply'({'exited', true}, S1749State) end end end end end.
'make_winner_diff'(S1751Losers) -> begin S1755LoserDiffSum = 'SesterlStdlib.List':'foldl'(fun(S1752Acc, S1753Loser) -> begin {_, S1754LoserDiff} = S1753Loser, (S1752Acc + S1754LoserDiff) end end, 0, S1751Losers), (0 - S1755LoserDiffSum) end.
'update_score'(S1757Scores, S1758Updates) -> 'SesterlStdlib.List':'foldl'(fun(S1759Acc, S1760Update) -> begin {S1761Scores, S1762Diffs} = S1759Acc, begin {S1763Seat, S1764Diff} = S1760Update, begin S1765Score = 'Tianjiupai.Quad':'access'(S1763Seat, S1761Scores), {'Tianjiupai.Quad':'update'(S1763Seat, (S1765Score + S1764Diff), S1761Scores), 'Tianjiupai.Quad':'update'(S1763Seat, S1764Diff, S1762Diffs)} end end end end, {S1757Scores, 'Tianjiupai.Quad':'make'({0, 0, 0, 0})}, S1758Updates).
'deal_with_trick_end'({'meta', S1767Meta}, S1768WinnerSeat, S1769SpecialOpt) -> case S1769SpecialOpt of 'error' -> {{'meta', S1767Meta}, 'error'}; {'ok', _} -> begin S1770LoserSeats = 'Tianjiupai.Quad':'the_other_seats'(S1768WinnerSeat), begin S1771NumConsecutives = maps:get(num_consecutives, S1767Meta), begin S1772ParentSeat = maps:get(parent_seat, S1767Meta), begin S1777Losers = case 'Tianjiupai.Quad':'seat_equal'(S1768WinnerSeat, S1772ParentSeat) of true -> 'SesterlStdlib.List':'map'(fun(S1773LoserSeat) -> begin S1774LoserDiff = (0 - (2 * (S1771NumConsecutives + 1))), {S1773LoserSeat, S1774LoserDiff} end end, S1770LoserSeats); false -> 'SesterlStdlib.List':'map'(fun(S1775LoserSeat) -> begin S1776LoserDiff = case 'Tianjiupai.Quad':'seat_equal'(S1775LoserSeat, S1772ParentSeat) of true -> (0 - (2 * (S1771NumConsecutives + 1))); false -> (0 - 2) end, {S1775LoserSeat, S1776LoserDiff} end end, S1770LoserSeats) end, begin S1778WinnerDiff = 'Tianjiupai.RoomServer.Callback':'make_winner_diff'(S1777Losers), begin {S1779Scores, S1780Diffs} = 'Tianjiupai.RoomServer.Callback':'update_score'(maps:get(scores, S1767Meta), [{S1768WinnerSeat, S1778WinnerDiff} | S1777Losers]), {{'meta', maps:put(scores, S1779Scores, S1767Meta)}, {'ok', S1780Diffs}} end end end end end end end.
'make_loser_updates_when_parent_wins'(S1782NumConsecutives, S1783LoserSeats, S1784GainsQuad, S1785Coeff) -> 'SesterlStdlib.List':'map'(fun(S1786LoserSeat) -> begin S1787NumGains = 'SesterlStdlib.List':'length'('Tianjiupai.Quad':'access'(S1786LoserSeat, S1784GainsQuad)), begin S1788LoserDiff = case (S1787NumGains == 0) of true -> (0 - (5 * ((S1782NumConsecutives + 1) * S1785Coeff))); false -> ((S1787NumGains - 4) * ((S1782NumConsecutives + 1) * S1785Coeff)) end, {S1786LoserSeat, S1788LoserDiff} end end end, S1783LoserSeats).
'make_loser_updates_when_child_wins'(S1790NumConsecutives, S1791LoserSeats, S1792ParentSeat, S1793GainsQuad, S1794CoeffOriginal) -> 'SesterlStdlib.List':'map'(fun(S1795LoserSeat) -> begin S1796NumGains = 'SesterlStdlib.List':'length'('Tianjiupai.Quad':'access'(S1795LoserSeat, S1793GainsQuad)), begin S1798LoserDiff = begin S1797Coeff = case 'Tianjiupai.Quad':'seat_equal'(S1795LoserSeat, S1792ParentSeat) of true -> ((S1790NumConsecutives + 1) * S1794CoeffOriginal); false -> S1794CoeffOriginal end, case (S1796NumGains == 0) of true -> (0 - (5 * S1797Coeff)); false -> ((S1796NumGains - 4) * S1797Coeff) end end, {S1795LoserSeat, S1798LoserDiff} end end end, S1791LoserSeats).
'deal_with_inning_end'({'meta', S1800Meta}, S1801WinnerSeat, S1802SpecialOpt, S1803GainsQuad) -> begin S1804LoserSeats = 'Tianjiupai.Quad':'the_other_seats'(S1801WinnerSeat), begin S1805NumConsecutives = maps:get(num_consecutives, S1800Meta), begin S1806ParentSeat = maps:get(parent_seat, S1800Meta), case 'Tianjiupai.Quad':'seat_equal'(S1801WinnerSeat, S1806ParentSeat) of true -> begin S1811Losers = case S1802SpecialOpt of {'ok', 'inning_end_with_bazhijie'} -> 'SesterlStdlib.List':'map'(fun(S1807LoserSeat) -> begin S1808LoserDiff = ((0 - 20) * (S1805NumConsecutives + 1)), {S1807LoserSeat, S1808LoserDiff} end end, S1804LoserSeats); {'ok', 'inning_end_with_qizhijie'} -> 'SesterlStdlib.List':'map'(fun(S1809LoserSeat) -> begin S1810LoserDiff = ((0 - 10) * (S1805NumConsecutives + 1)), {S1809LoserSeat, S1810LoserDiff} end end, S1804LoserSeats); {'ok', _} -> 'Tianjiupai.RoomServer.Callback':'make_loser_updates_when_parent_wins'(S1805NumConsecutives, S1804LoserSeats, S1803GainsQuad, 2); 'error' -> 'Tianjiupai.RoomServer.Callback':'make_loser_updates_when_parent_wins'(S1805NumConsecutives, S1804LoserSeats, S1803GainsQuad, 1) end, begin S1812WinnerDiff = 'Tianjiupai.RoomServer.Callback':'make_winner_diff'(S1811Losers), begin {S1813Scores, S1814Diffs} = 'Tianjiupai.RoomServer.Callback':'update_score'(maps:get(scores, S1800Meta), [{S1801WinnerSeat, S1812WinnerDiff} | S1811Losers]), {{'meta', #{inning_index => maps:get(inning_index, S1800Meta), num_consecutives => (S1805NumConsecutives + 1), parent_seat => S1806ParentSeat, players => maps:get(players, S1800Meta), scores => S1813Scores}}, S1814Diffs} end end end; false -> begin S1821Losers = case S1802SpecialOpt of {'ok', 'inning_end_with_bazhijie'} -> 'SesterlStdlib.List':'map'(fun(S1815LoserSeat) -> begin S1816Coeff = case 'Tianjiupai.Quad':'seat_equal'(S1815LoserSeat, S1806ParentSeat) of true -> (S1805NumConsecutives + 1); false -> 1 end, begin S1817LoserDiff = (0 - (20 * S1816Coeff)), {S1815LoserSeat, S1817LoserDiff} end end end, S1804LoserSeats); {'ok', 'inning_end_with_qizhijie'} -> 'SesterlStdlib.List':'map'(fun(S1818LoserSeat) -> begin S1819Coeff = case 'Tianjiupai.Quad':'seat_equal'(S1818LoserSeat, S1806ParentSeat) of true -> (S1805NumConsecutives + 1); false -> 1 end, begin S1820LoserDiff = (0 - (10 * S1819Coeff)), {S1818LoserSeat, S1820LoserDiff} end end end, S1804LoserSeats); {'ok', _} -> 'Tianjiupai.RoomServer.Callback':'make_loser_updates_when_child_wins'(S1805NumConsecutives, S1804LoserSeats, S1806ParentSeat, S1803GainsQuad, 2); 'error' -> 'Tianjiupai.RoomServer.Callback':'make_loser_updates_when_child_wins'(S1805NumConsecutives, S1804LoserSeats, S1806ParentSeat, S1803GainsQuad, 1) end, begin S1822WinnerDiff = 'Tianjiupai.RoomServer.Callback':'make_winner_diff'(S1821Losers), begin {S1823Scores, S1824Diffs} = 'Tianjiupai.RoomServer.Callback':'update_score'(maps:get(scores, S1800Meta), [{S1801WinnerSeat, S1822WinnerDiff} | S1821Losers]), {{'meta', #{inning_index => (maps:get(inning_index, S1800Meta) + 1), num_consecutives => 1, parent_seat => S1801WinnerSeat, players => maps:get(players, S1800Meta), scores => S1823Scores}}, S1824Diffs} end end end end end end end.
'handle_submit_impl'(S1826UserId, S1827Cards, S1828GameState) -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1828GameState, S1826UserId) of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', {S1829Seat, _}} -> case maps:get(inning, S1828GameState) of {'inning_end', _, _} -> sesterl_internal_prim:'return'('error'); {'during_inning', S1830Inning} -> case 'Tianjiupai.Inning':'submit'(S1829Seat, S1827Cards, S1830Inning) of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', {S1831SubmitResult, S1832IsFront}} -> begin S1833SnapshotId = 'Tianjiupai.SnapshotId':'generate'(), begin S1834WholeGameMeta = maps:get(meta, S1828GameState), begin {S1855GameState, S1856LastOpt} = case S1831SubmitResult of {'continues', S1835Inning} -> {#{inning => {'during_inning', S1835Inning}, meta => S1834WholeGameMeta, snapshot_id => S1833SnapshotId, sync => {'waiting_sync', 'Tianjiupai.RoomServer.Callback':'make_initial_sync'()}}, 'error'}; {'wins_trick', S1836WinnerSeat, S1837LastTable, S1838SubmitterHand, S1839SpecialOpt, S1840Inning} -> begin {S1841WholeGameMeta, S1842DiffsOpt} = 'Tianjiupai.RoomServer.Callback':'deal_with_trick_end'(S1834WholeGameMeta, S1836WinnerSeat, S1839SpecialOpt), begin S1845ChangesOpt = case {S1839SpecialOpt, S1842DiffsOpt} of {{'ok', S1843Special}, {'ok', S1844Diffs}} -> {'ok', #{change_reason => {'special_trick_end', S1843Special}, diffs => S1844Diffs}}; _ -> 'error' end, {#{inning => {'during_inning', S1840Inning}, meta => S1841WholeGameMeta, snapshot_id => S1833SnapshotId, sync => {'waiting_sync', 'Tianjiupai.RoomServer.Callback':'make_initial_sync'()}}, {'ok', #{changes => S1845ChangesOpt, hand => S1838SubmitterHand, table => S1837LastTable}}} end end; {'wins_inning', S1846WinnerSeat, S1847LastTable, S1848GainsQuad, S1849SpecialOpt} -> begin {S1850WholeGameMeta, S1851Diffs} = 'Tianjiupai.RoomServer.Callback':'deal_with_inning_end'(S1834WholeGameMeta, S1846WinnerSeat, S1849SpecialOpt, S1848GainsQuad), begin S1853Reason = case S1849SpecialOpt of 'error' -> 'normal_inning_end'; {'ok', S1852Special} -> {'special_inning_end', S1852Special} end, begin S1854Changes = #{change_reason => S1853Reason, diffs => S1851Diffs}, {#{inning => {'inning_end', S1848GainsQuad, 'Tianjiupai.RoomServer.Callback':'make_initial_sync'()}, meta => S1850WholeGameMeta, snapshot_id => S1833SnapshotId, sync => {'waiting_sync', 'Tianjiupai.RoomServer.Callback':'make_initial_sync'()}}, {'ok', #{changes => {'ok', S1854Changes}, hand => [], table => S1847LastTable}}} end end end end, begin S1858CardOpts = case S1832IsFront of true -> 'SesterlStdlib.List':'map'(fun(S1857Card) -> {'ok', S1857Card} end, S1827Cards); false -> 'SesterlStdlib.List':'map'(fun(_) -> 'error' end, S1827Cards) end, begin _ = 'SesterlStdlib.List':'for_each'(fun(S1859U) -> case 'Tianjiupai.RoomServer.Callback':'make_observable_game_state'(S1855GameState, S1859U) of 'error' -> sesterl_internal_prim:'return'(ok); {'ok', S1860Obs} -> begin S1862TrickLast = 'SesterlStdlib.Option':'map'(fun(S1861Last) -> #{changes => maps:get(changes, S1861Last), table => maps:get(table, S1861Last)} end, S1856LastOpt), begin S1863Submission = #{new_state => S1860Obs, seat => S1829Seat, submitted => S1858CardOpts, trick_last => S1862TrickLast}, 'Tianjiupai.RoomServer.Callback':'notify'(S1859U, [{'notify_submission', S1863Submission} | []]) end end end end, 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids'(S1855GameState, S1829Seat)), begin {'ok', S1864Obs} = 'Tianjiupai.RoomServer.Callback':'make_observable_game_state'(S1855GameState, S1826UserId), sesterl_internal_prim:'return'({'ok', {S1864Obs, S1856LastOpt, S1855GameState}}) end end end end end end end end end.
'handle_submit'(S1866UserId, S1867Cards, S1868State) -> begin S1870Opt = case maps:get(room_state, S1868State) of {'internal_waiting', _} -> sesterl_internal_prim:'return'('error'); {'internal_playing', S1869GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_empty_seat'(S1869GameState) of 'error' -> 'Tianjiupai.RoomServer.Callback':'handle_submit_impl'(S1866UserId, S1867Cards, S1869GameState); {'ok', _} -> sesterl_internal_prim:'return'('error') end end, case S1870Opt of 'error' -> 'Tianjiupai.RoomServer.Callback':'reply'({'submission_done', 'error'}, S1868State); {'ok', {S1871Obs, S1872LastOpt, S1873GameState}} -> begin S1876ReversedLogs = case S1872LastOpt of 'error' -> maps:get(reversed_logs, S1868State); {'ok', S1874Last} -> case maps:get(changes, S1874Last) of 'error' -> maps:get(reversed_logs, S1868State); {'ok', S1875Changes} -> [{'log_changes', S1875Changes} | maps:get(reversed_logs, S1868State)] end end, 'Tianjiupai.RoomServer.Callback':'reply'({'submission_done', {'ok', {S1871Obs, S1872LastOpt}}}, maps:put(reversed_logs, S1876ReversedLogs, maps:put(room_state, {'internal_playing', S1873GameState}, S1868State))) end end end.
'handle_ack'(S1878UserId, S1879SnapshotId, S1880State) -> begin S1888Opt = case maps:get(room_state, S1880State) of {'internal_waiting', _} -> sesterl_internal_prim:'return'('error'); {'internal_playing', S1881GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1881GameState, S1878UserId) of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', {S1882Seat, _}} -> case 'Tianjiupai.SnapshotId':'equal'(S1879SnapshotId, maps:get(snapshot_id, S1881GameState)) of true -> case maps:get(sync, S1881GameState) of {'waiting_sync', S1883SyncQuad} -> begin S1884SyncQuad = 'Tianjiupai.Quad':'update'(S1882Seat, true, S1883SyncQuad), begin _ = begin S3267 = 'Tianjiupai.Logger':'debug'({"update sync (snapshot_id: ~s, user_id: ~s, quad: ~p)", 3}, {S1879SnapshotId, S1878UserId, S1884SyncQuad}), S3267(<<"RoomServer.sest">>, 1057) end, case 'Tianjiupai.Quad':'decompose'(S1884SyncQuad) of {true, true, true, true} -> begin S1885UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids'(S1881GameState, S1882Seat), begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'([S1878UserId | S1885UserIdsForNotification], ['notify_next_step' | []]), begin S1886GameState = maps:put(sync, 'waiting_input', S1881GameState), sesterl_internal_prim:'return'({'ok', S1886GameState}) end end end; _ -> begin S1887GameState = maps:put(sync, {'waiting_sync', S1884SyncQuad}, S1881GameState), sesterl_internal_prim:'return'({'ok', S1887GameState}) end end end end; 'waiting_input' -> begin _ = begin S3268 = 'Tianjiupai.Logger':'warning'({"ack during waiting input (snapshot_id: ~s, user_id: ~s)", 2}, {S1879SnapshotId, S1878UserId}), S3268(<<"RoomServer.sest">>, 1077) end, sesterl_internal_prim:'return'('error') end end; false -> begin _ = begin S3269 = 'Tianjiupai.Logger':'warning'({"snapshot mismatch (got: ~s, expected: ~s, user_id: ~s)", 3}, {S1879SnapshotId, maps:get(snapshot_id, S1881GameState), S1878UserId}), S3269(<<"RoomServer.sest">>, 1086) end, sesterl_internal_prim:'return'('error') end end end end, case S1888Opt of 'error' -> 'Tianjiupai.RoomServer.Callback':'no_reply'(S1880State); {'ok', S1889GameState} -> 'Tianjiupai.RoomServer.Callback':'no_reply'(maps:put(room_state, {'internal_playing', S1889GameState}, S1880State)) end end.
'handle_require_next_inning'(S1891UserId, S1892SnapshotId, S1893State) -> begin S1910Opt = case maps:get(room_state, S1893State) of {'internal_waiting', _} -> sesterl_internal_prim:'return'('error'); {'internal_playing', S1894GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1894GameState, S1891UserId) of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', {S1895Seat, _}} -> case 'Tianjiupai.SnapshotId':'equal'(S1892SnapshotId, maps:get(snapshot_id, S1894GameState)) of true -> case maps:get(inning, S1894GameState) of {'during_inning', _} -> sesterl_internal_prim:'return'('error'); {'inning_end', S1896GainsQuad, S1897InningSyncQuad} -> begin S1898InningSyncQuad = 'Tianjiupai.Quad':'update'(S1895Seat, true, S1897InningSyncQuad), begin _ = begin S3271 = 'Tianjiupai.Logger':'debug'({"update inning sync (snapshot_id: ~s, inning_sync_quad: ~p)", 2}, {S1892SnapshotId, S1898InningSyncQuad}), S3271(<<"RoomServer.sest">>, 1124) end, case 'Tianjiupai.Quad':'decompose'(S1898InningSyncQuad) of {true, true, true, true} -> begin S1899WholeGameMeta = maps:get(meta, S1894GameState), begin {'meta', S1900Meta} = S1899WholeGameMeta, begin S1901InningIndex = maps:get(inning_index, S1900Meta), begin S1902UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids'(S1894GameState, S1895Seat), begin S1903UserIdsForNotification = [S1891UserId | S1902UserIdsForNotification], case (S1901InningIndex >= 'Tianjiupai.Constants':'maximum_num_innings'()) of true -> sesterl_internal_prim:'return'({'ok', 'room_close'}); false -> begin S1904GameState = 'Tianjiupai.RoomServer.Callback':'start_new_inning'(S1899WholeGameMeta), begin _ = 'SesterlStdlib.List':'for_each'(fun(S1905U) -> case 'Tianjiupai.RoomServer.Callback':'make_observable_game_state'(S1904GameState, S1905U) of 'error' -> sesterl_internal_prim:'return'(ok); {'ok', S1906Obs} -> 'Tianjiupai.RoomServer.Callback':'notify'(S1905U, [{'notify_game_start', S1906Obs} | []]) end end, S1903UserIdsForNotification), begin S1908GameIndex = begin {'meta', S1907Meta} = maps:get(meta, S1904GameState), #{inning_index => S1901InningIndex, num_consecutives => maps:get(num_consecutives, S1907Meta)} end, sesterl_internal_prim:'return'({'ok', {'room_transition_to_next_inning', S1904GameState, {'ok', S1908GameIndex}}}) end end end end end end end end end; _ -> begin S1909GameState = maps:put(inning, {'inning_end', S1896GainsQuad, S1898InningSyncQuad}, S1894GameState), sesterl_internal_prim:'return'({'ok', {'room_transition_to_next_inning', S1909GameState, 'error'}}) end end end end end; false -> sesterl_internal_prim:'return'('error') end end end, case S1910Opt of 'error' -> 'Tianjiupai.RoomServer.Callback':'no_reply'(S1893State); {'ok', 'room_close'} -> 'Tianjiupai.RoomServer.Callback':'stop'(S1893State); {'ok', {'room_transition_to_next_inning', S1911GameState, S1912GameIndexOpt}} -> begin S1914State = case S1912GameIndexOpt of 'error' -> S1893State; {'ok', S1913GameIndex} -> maps:put(reversed_logs, [{'log_game_start', S1913GameIndex} | maps:get(reversed_logs, S1893State)], S1893State) end, 'Tianjiupai.RoomServer.Callback':'no_reply'(maps:put(room_state, {'internal_playing', S1911GameState}, S1914State)) end end end.
'handle_set_connection'(S1916UserId, S1917WsProc, S1918State) -> begin S1943Opt = case maps:get(room_state, S1918State) of {'internal_waiting', S1919WaitingState} -> begin S1920Members0 = maps:get(members, S1919WaitingState), case 'SesterlStdlib.List':'filter'(fun(S1921W) -> 'SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1921W)), S1916UserId) end, S1920Members0) of [] -> sesterl_internal_prim:'return'('error'); [S1922W | _] -> begin S1923User = maps:get(user, S1922W), begin S1929Acc = 'SesterlStdlib.List':'foldl_effect'(fun(S1924Acc, S1925W0) -> begin S1928W1 = case 'SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1925W0)), S1916UserId) of true -> begin {'ok', ok} = case maps:get(connection, S1925W0) of {'connected', _, _} -> sesterl_internal_prim:'return'({'ok', ok}); {'disconnected', S1926Timer} -> 'Tianjiupai.RoomServer.Callback':'cancel_disconnection_timer'(S1926Timer, S1916UserId, <<"waiting"/utf8>>) end, begin S1927WsMref = 'Tianjiupai.WebSocketHandler':'monitor'(S1917WsProc), sesterl_internal_prim:'return'(maps:put(connection, {'connected', S1917WsProc, S1927WsMref}, S1925W0)) end end; false -> sesterl_internal_prim:'return'(S1925W0) end, sesterl_internal_prim:'return'([S1928W1 | S1924Acc]) end end, [], S1920Members0), begin S1930Members1 = 'SesterlStdlib.List':'reverse'(S1929Acc), begin S1931UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids_from_list'(S1930Members1, S1916UserId), sesterl_internal_prim:'return'({'ok', {S1923User, S1931UserIdsForNotification, {'internal_waiting', #{members => S1930Members1}}}}) end end end end end end; {'internal_playing', S1932GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1932GameState, S1916UserId) of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', {S1933Seat, S1934P0}} -> begin {'meta', S1935Meta} = maps:get(meta, S1932GameState), begin S1936Players0 = maps:get(players, S1935Meta), begin {'ok', ok} = case maps:get(connection, S1934P0) of {'connected', _, _} -> begin _ = begin S3273 = 'Tianjiupai.Logger':'debug'({"no timer (playing, seat: ~p, user_id: ~s)", 2}, {S1933Seat, S1916UserId}), S3273(<<"RoomServer.sest">>, 1239) end, sesterl_internal_prim:'return'({'ok', ok}) end; {'disconnected', S1937Timer} -> 'Tianjiupai.RoomServer.Callback':'cancel_disconnection_timer'(S1937Timer, S1916UserId, <<"playing"/utf8>>) end, begin S1938WsMref = 'Tianjiupai.WebSocketHandler':'monitor'(S1917WsProc), begin S1939P1 = maps:put(connection, {'connected', S1917WsProc, S1938WsMref}, S1934P0), begin S1940Players1 = 'Tianjiupai.Quad':'update'(S1933Seat, {'ok', S1939P1}, S1936Players0), begin S1941UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids_from_quad'(S1940Players1, S1916UserId), begin S1942GameState = maps:put(meta, {'meta', maps:put(players, S1940Players1, S1935Meta)}, S1932GameState), sesterl_internal_prim:'return'({'ok', {maps:get(user, S1939P1), S1941UserIdsForNotification, {'internal_playing', S1942GameState}}}) end end end end end end end end end end, case S1943Opt of 'error' -> 'Tianjiupai.RoomServer.Callback':'no_reply'(S1918State); {'ok', {S1944User, S1945UserIdsForNotification, S1946RoomState}} -> begin S1947Connection = #{is_connected => true, user => S1944User}, begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1945UserIdsForNotification, [{'notify_connection', S1947Connection} | []]), begin S1948State = maps:put(reversed_logs, [{'log_connection', S1947Connection} | maps:get(reversed_logs, S1918State)], maps:put(room_state, S1946RoomState, S1918State)), 'Tianjiupai.RoomServer.Callback':'no_reply'(S1948State) end end end end end.
      send_room_deletion_to_user_server(UserId) ->
          try
              _ = 'Tianjiupai.User':set_room(UserId, error),
              ok
          catch
              _:_ -> ok
          end.
    
'handle_disconnection_timeout'(S1951UserId, S1952State) -> begin _ = begin S3275 = 'Tianjiupai.Logger':'info'({"disconnection timeout (user_id: ~s)", 1}, {S1951UserId}), S3275(<<"RoomServer.sest">>, 1287) end, begin S1953RoomState0 = maps:get(room_state, S1952State), begin S1971Opt = case S1953RoomState0 of {'internal_waiting', S1954WaitingState} -> begin S1955WaitingMembers0 = maps:get(members, S1954WaitingState), case 'SesterlStdlib.List':'filter'(fun(S1956W) -> 'SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1956W)), S1951UserId) end, S1955WaitingMembers0) of [] -> sesterl_internal_prim:'return'('error'); [S1957W | _] -> begin _ = 'Tianjiupai.RoomServer.Callback':'send_room_deletion_to_user_server'(S1951UserId), begin S1958User = maps:get(user, S1957W), begin S1960WaitingMembers1 = 'SesterlStdlib.List':'filter'(fun(S1959W) -> 'SesterlStdlib.Bool':'not'('SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1959W)), S1951UserId)) end, S1955WaitingMembers0), begin S1961UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids_from_list'(S1955WaitingMembers0, S1951UserId), begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1961UserIdsForNotification, [{'notify_exited', S1958User} | []]), sesterl_internal_prim:'return'({'ok', {S1958User, {'internal_waiting', maps:put(members, S1960WaitingMembers1, S1954WaitingState)}}}) end end end end end end end; {'internal_playing', S1962GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1962GameState, S1951UserId) of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', {S1963Seat, S1964Player}} -> begin _ = 'Tianjiupai.RoomServer.Callback':'send_room_deletion_to_user_server'(S1951UserId), begin {'meta', S1965Meta0} = maps:get(meta, S1962GameState), begin S1966Players0 = maps:get(players, S1965Meta0), begin S1967User = maps:get(user, S1964Player), begin S1968UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids'(S1962GameState, S1963Seat), begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1968UserIdsForNotification, [{'notify_exited', S1967User} | []]), begin S1969Players1 = 'Tianjiupai.Quad':'update'(S1963Seat, 'error', S1966Players0), begin S1970GameState = maps:put(meta, {'meta', maps:put(players, S1969Players1, S1965Meta0)}, S1962GameState), sesterl_internal_prim:'return'({'ok', {S1967User, {'internal_playing', S1970GameState}}}) end end end end end end end end end end, begin S1974State = case S1971Opt of {'ok', {S1972User, S1973RoomState1}} -> maps:put(room_state, S1973RoomState1, maps:put(reversed_logs, [{'log_exited', S1972User} | maps:get(reversed_logs, S1952State)], S1952State)); 'error' -> S1952State end, 'Tianjiupai.RoomServer.Callback':'no_reply'(S1974State) end end end end.
'update_sync'(S1976UserId, S1977State) -> case maps:get(room_state, S1977State) of {'internal_waiting', _} -> sesterl_internal_prim:'return'(S1977State); {'internal_playing', S1978GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1978GameState, S1976UserId) of 'error' -> sesterl_internal_prim:'return'(S1977State); {'ok', {S1979Seat, _}} -> case maps:get(sync, S1978GameState) of 'waiting_input' -> sesterl_internal_prim:'return'(S1977State); {'waiting_sync', S1980SyncQuad} -> begin S1981SyncQuad = 'Tianjiupai.Quad':'update'(S1979Seat, true, S1980SyncQuad), case 'Tianjiupai.Quad':'decompose'(S1981SyncQuad) of {true, true, true, true} -> begin S1982UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids'(S1978GameState, S1979Seat), begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1982UserIdsForNotification, ['notify_next_step' | []]), begin S1983GameState = maps:put(sync, 'waiting_input', S1978GameState), sesterl_internal_prim:'return'(maps:put(room_state, {'internal_playing', S1983GameState}, S1977State)) end end end; _ -> begin S1984GameState = maps:put(sync, {'waiting_sync', S1981SyncQuad}, S1978GameState), sesterl_internal_prim:'return'(maps:put(room_state, {'internal_playing', S1984GameState}, S1977State)) end end end end end end.
'handle_call'(S1986Req, _, S1987State) -> case S1986Req of 'get_whole_state' -> begin S1988WholeState = 'Tianjiupai.RoomServer.Callback':'make_whole_room_state'(S1987State), 'Tianjiupai.RoomServer.Callback':'reply'({'whole_state', S1988WholeState}, S1987State) end; {'get_personal_state', S1989UserId} -> begin S1990State = 'Tianjiupai.RoomServer.Callback':'update_sync'(S1989UserId, S1987State), begin S1991PersonalStateOpt = 'Tianjiupai.RoomServer.Callback':'make_personal_state'(S1990State, S1989UserId), 'Tianjiupai.RoomServer.Callback':'reply'({'personal_state', S1991PersonalStateOpt}, S1990State) end end; {'send_chat', S1992User, S1993Text} -> 'Tianjiupai.RoomServer.Callback':'handle_send_chat'(S1992User, S1993Text, S1987State); {'attend', S1994User, S1995WsProc} -> 'Tianjiupai.RoomServer.Callback':'handle_attend'(S1994User, S1995WsProc, S1987State); {'exit', S1996UserId} -> 'Tianjiupai.RoomServer.Callback':'handle_exit'(S1996UserId, S1987State); {'submit', S1997UserId, S1998Cards} -> 'Tianjiupai.RoomServer.Callback':'handle_submit'(S1997UserId, S1998Cards, S1987State) end.
'handle_cast'(S2000Msg, S2001State) -> case S2000Msg of {'ack', S2002UserId, S2003SnapshotId} -> 'Tianjiupai.RoomServer.Callback':'handle_ack'(S2002UserId, S2003SnapshotId, S2001State); {'require_next_inning', S2004UserId, S2005SnapshotId} -> 'Tianjiupai.RoomServer.Callback':'handle_require_next_inning'(S2004UserId, S2005SnapshotId, S2001State); {'set_connection', S2006UserId, S2007WsProc} -> 'Tianjiupai.RoomServer.Callback':'handle_set_connection'(S2006UserId, S2007WsProc, S2001State) end.
'handle_timeout'(S2009State) -> begin _ = begin S3280 = 'Tianjiupai.Logger':'debug'({"timeout (room_id: ~s)", 1}, {maps:get(room_id, maps:get(settings, S2009State))}), S3280(<<"RoomServer.sest">>, 1416) end, 'Tianjiupai.RoomServer.Callback':'stop'(S2009State) end.
'handle_down'(S2011Mref, _, S2012Reason, S2013State) -> case maps:get(room_state, S2013State) of {'internal_waiting', S2014Waiting} -> begin S2015WaitingMembers0 = maps:get(members, S2014Waiting), begin {S2027PlayerAcc, S2028LogAcc} = 'SesterlStdlib.List':'foldl_effect'(fun({S2016PlayerAcc, S2017LogAcc}, S2018Player) -> case maps:get(connection, S2018Player) of {'connected', _, S2019MrefWs} -> case 'SesterlStdlib.MonitorRef':'equal'(S2019MrefWs, S2011Mref) of true -> begin S2020User = maps:get(user, S2018Player), begin S2021UserId = maps:get(user_id, S2020User), begin _ = begin S3282 = 'Tianjiupai.Logger':'info'({"WebSocket connection closed (user_id: ~s, reason: ~p)", 2}, {S2021UserId, S2012Reason}), S3282(<<"RoomServer.sest">>, 1432) end, begin {'ok', S2022Timer} = 'Tianjiupai.RoomServer.Callback':'set_disconnection_timer'(S2021UserId, <<"waiting"/utf8>>), begin S2023UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids_from_list'(S2015WaitingMembers0, S2021UserId), begin S2024Connection = #{is_connected => false, user => S2020User}, begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S2023UserIdsForNotification, [{'notify_connection', S2024Connection} | []]), begin S2025PlayerAcc = [maps:put(connection, {'disconnected', S2022Timer}, S2018Player) | S2016PlayerAcc], begin S2026LogAcc = [{'log_connection', S2024Connection} | S2017LogAcc], sesterl_internal_prim:'return'({S2025PlayerAcc, S2026LogAcc}) end end end end end end end end end; false -> sesterl_internal_prim:'return'({[S2018Player | S2016PlayerAcc], S2017LogAcc}) end; {'disconnected', _} -> sesterl_internal_prim:'return'({[S2018Player | S2016PlayerAcc], S2017LogAcc}) end end, {[], maps:get(reversed_logs, S2013State)}, S2015WaitingMembers0), begin S2029Players = 'SesterlStdlib.List':'reverse'(S2027PlayerAcc), 'Tianjiupai.RoomServer.Callback':'no_reply'(maps:put(room_state, {'internal_waiting', #{members => S2029Players}}, maps:put(reversed_logs, S2028LogAcc, S2013State))) end end end; {'internal_playing', S2030GameState} -> begin {'meta', S2031Meta} = maps:get(meta, S2030GameState), begin S2032Players0 = maps:get(players, S2031Meta), begin {S2044LogAcc, S2045Players} = 'Tianjiupai.Quad':'map_fold_effect'(fun(S2033LogAcc, S2034PlayerOpt) -> case S2034PlayerOpt of 'error' -> sesterl_internal_prim:'return'({S2033LogAcc, 'error'}); {'ok', S2035Player} -> case maps:get(connection, S2035Player) of {'connected', _, S2036MrefWs} -> case 'SesterlStdlib.MonitorRef':'equal'(S2036MrefWs, S2011Mref) of true -> begin S2037User = maps:get(user, S2035Player), begin S2038UserId = maps:get(user_id, S2037User), begin _ = begin S3283 = 'Tianjiupai.Logger':'info'({"WebSocket connection closed (user_id: ~s, reason: ~p)", 2}, {S2038UserId, S2012Reason}), S3283(<<"RoomServer.sest">>, 1478) end, begin {'ok', S2039Timer} = 'Tianjiupai.RoomServer.Callback':'set_disconnection_timer'(maps:get(user_id, maps:get(user, S2035Player)), <<"playing"/utf8>>), begin S2040UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids_from_quad'(S2032Players0, S2038UserId), begin S2041Connection = #{is_connected => false, user => S2037User}, begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S2040UserIdsForNotification, [{'notify_connection', S2041Connection} | []]), begin S2042Player = maps:put(connection, {'disconnected', S2039Timer}, S2035Player), begin S2043LogAcc = [{'log_connection', S2041Connection} | S2033LogAcc], sesterl_internal_prim:'return'({S2043LogAcc, {'ok', S2042Player}}) end end end end end end end end end; false -> sesterl_internal_prim:'return'({S2033LogAcc, S2034PlayerOpt}) end; {'disconnected', _} -> sesterl_internal_prim:'return'({S2033LogAcc, S2034PlayerOpt}) end end end, maps:get(reversed_logs, S2013State), S2032Players0), begin S2046GameState = maps:put(meta, {'meta', maps:put(players, S2045Players, S2031Meta)}, S2030GameState), 'Tianjiupai.RoomServer.Callback':'no_reply'(maps:put(room_state, {'internal_playing', S2046GameState}, maps:put(reversed_logs, S2044LogAcc, S2013State))) end end end end end.
'handle_info'(S2048Info, S2049State) -> case S2048Info of {'disconnection_timeout', S2050UserId} -> 'Tianjiupai.RoomServer.Callback':'handle_disconnection_timeout'(S2050UserId, S2049State); _ -> begin _ = begin S3285 = 'Tianjiupai.Logger':'warning'({"unexpected info (info: ~p, state: ~p)", 2}, {S2048Info, S2049State}), S3285(<<"RoomServer.sest">>, 1515) end, 'Tianjiupai.RoomServer.Callback':'no_reply'(S2049State) end end.
'terminate'(S2052Reason, S2053State) -> begin _ = begin S3287 = 'Tianjiupai.Logger':'debug'({"terminate (reason: ~p, room_id: ~s)", 2}, {S2052Reason, maps:get(room_id, maps:get(settings, S2053State))}), S3287(<<"RoomServer.sest">>, 1520) end, sesterl_internal_prim:'return'(ok) end.
