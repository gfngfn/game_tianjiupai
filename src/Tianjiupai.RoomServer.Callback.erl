-module('Tianjiupai.RoomServer.Callback').
-export(['set_disconnection_timer'/2, 'cancel_disconnection_timer'/3, 'get_members_from_state'/1, 'make_whole_room_state'/1, 'update_plaza'/1, 'init'/1, 'reply'/2, 'no_reply'/1, 'find_user_seat'/2, 'get_connected_user_ids'/2, 'get_connected_user_ids_from_list'/2, 'get_connected_user_ids_from_quad'/2, 'get_all_connected_user_ids'/1, 'make_game_player'/1, 'make_game_meta'/1, 'make_observable_game_state'/2, 'make_observable'/2, 'make_personal_state'/2, 'make_initial_sync'/0, 'start_new_inning'/1, 'notify'/2, 'notify_for_each'/2, 'stop'/1, 'find_empty_seat'/1, 'handle_send_chat'/3, 'is_none'/1, 'handle_attend'/3, 'handle_exit'/2, 'make_winner_diff'/1, 'update_score'/2, 'deal_with_trick_end'/3, 'make_loser_updates_when_parent_wins'/4, 'make_loser_updates_when_child_wins'/5, 'deal_with_inning_end'/4, 'handle_submit_impl'/3, 'handle_submit'/3, 'handle_ack'/3, 'handle_require_next_inning'/3, 'handle_set_connection'/3, 'send_room_deletion_to_user_server'/1, 'handle_disconnection_timeout'/2, 'update_sync'/2, 'handle_call'/3, 'handle_cast'/2, 'handle_timeout'/1, 'handle_down'/4, 'handle_info'/2, 'terminate'/2]).
'set_disconnection_timer'(S1525UserId, S1526Message) -> begin S1527Res = 'SesterlStdlib.Timer':'send_after_self'('Tianjiupai.Constants':'disconnection_timeout'(), {'disconnection_timeout', S1525UserId}), begin _ = begin S3111 = 'Tianjiupai.Logger':'debug'({"sets timer (~s, user_id: ~s, result: ~p)", 3}, {S1526Message, S1525UserId, S1527Res}), S3111(<<"RoomServer.sest">>, 164) end, sesterl_internal_prim:'return'(S1527Res) end end.
'cancel_disconnection_timer'(S1529Timer, S1530UserId, S1531Message) -> begin S1532Res = 'SesterlStdlib.Timer':'cancel'(S1529Timer), begin _ = begin S3113 = 'Tianjiupai.Logger':'debug'({"cancels timer (~s, user_id: ~s, timer: ~p, result: ~p)", 4}, {S1531Message, S1530UserId, S1529Timer, S1532Res}), S3113(<<"RoomServer.sest">>, 174) end, sesterl_internal_prim:'return'(S1532Res) end end.
'get_members_from_state'(S1534RoomState) -> case S1534RoomState of {'internal_waiting', S1535WaitingState} -> {false, 'SesterlStdlib.List':'map'(fun(S1536W) -> maps:get(user, S1536W) end, maps:get(members, S1535WaitingState))}; {'internal_playing', S1537WholeGameState} -> begin {'meta', S1538Meta} = maps:get(meta, S1537WholeGameState), begin S1539PlayerOpts = 'Tianjiupai.Quad':'to_list'(maps:get(players, S1538Meta)), begin S1542Members = 'SesterlStdlib.List':'filter_map'(fun(S1540PlayerOpt) -> case S1540PlayerOpt of 'error' -> 'error'; {'ok', S1541Player} -> {'ok', maps:get(user, S1541Player)} end end, S1539PlayerOpts), {true, S1542Members} end end end end.
'make_whole_room_state'(S1544State) -> begin S1545Settings = maps:get(settings, S1544State), begin {S1546IsPlaying, S1547Members} = 'Tianjiupai.RoomServer.Callback':'get_members_from_state'(maps:get(room_state, S1544State)), #{is_playing => S1546IsPlaying, members => S1547Members, room => #{room_id => maps:get(room_id, S1545Settings), room_name => maps:get(room_name, S1545Settings)}} end end.
'update_plaza'(S1549State) -> begin S1550RoomSummary = 'Tianjiupai.RoomServer.Callback':'make_whole_room_state'(S1549State), 'Tianjiupai.PlazaServer':'update_room'(S1550RoomSummary) end.
'init'(S1552InitArg) -> begin {S1553RoomId, S1554RoomName} = S1552InitArg, begin S1555Settings = #{room_id => S1553RoomId, room_name => S1554RoomName}, begin S1556State = #{reversed_logs => [], room_state => {'internal_waiting', #{members => []}}, settings => S1555Settings}, begin _ = 'Tianjiupai.RoomServer.Callback':'update_plaza'(S1556State), 'SesterlStdlib.GenServer':'init_ok'(S1556State, #{timeout => 'Tianjiupai.Constants':'room_expiration_timeout'()}) end end end end.
'reply'(S1558Response, S1559State) -> 'SesterlStdlib.GenServer':'reply'(S1558Response, S1559State, #{timeout => 'Tianjiupai.Constants':'room_expiration_timeout'()}).
'no_reply'(S1561State) -> 'SesterlStdlib.GenServer':'no_reply'(S1561State, #{timeout => 'Tianjiupai.Constants':'room_expiration_timeout'()}).
'find_user_seat'(S1563GameState, S1564UserId) -> begin {'meta', S1565Meta} = maps:get(meta, S1563GameState), begin S1568Opt = 'Tianjiupai.Quad':'find'(fun(S1566PlayerOpt) -> case S1566PlayerOpt of 'error' -> false; {'ok', S1567Player} -> 'SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1567Player)), S1564UserId) end end, maps:get(players, S1565Meta)), 'SesterlStdlib.Option':'map'(fun({S1569Seat, {'ok', S1570Player}}) -> {S1569Seat, S1570Player} end, S1568Opt) end end.
'get_connected_user_ids'(S1572GameState, S1573Seat0) -> begin {'meta', S1574Meta} = maps:get(meta, S1572GameState), begin {S1575PA, S1576PB, S1577PC, S1578PD} = 'Tianjiupai.Quad':'decompose'(maps:get(players, S1574Meta)), begin S1579Players = [{'seat_a', S1575PA} | [{'seat_b', S1576PB} | [{'seat_c', S1577PC} | [{'seat_d', S1578PD} | []]]]], 'SesterlStdlib.List':'filter_map'(fun({S1580Seat, S1581PlayerOpt}) -> case 'Tianjiupai.Quad':'seat_equal'(S1580Seat, S1573Seat0) of true -> 'error'; false -> 'SesterlStdlib.Option':'bind'(S1581PlayerOpt, fun(S1582Player) -> case maps:get(connection, S1582Player) of {'connected', _, _} -> {'ok', maps:get(user_id, maps:get(user, S1582Player))}; {'disconnected', _} -> 'error' end end) end end, S1579Players) end end end.
'get_connected_user_ids_from_list'(S1584Players, S1585UserId) -> 'SesterlStdlib.List':'filter_map'(fun(S1586P) -> case maps:get(connection, S1586P) of {'connected', _, _} -> begin S1587U = maps:get(user_id, maps:get(user, S1586P)), case 'SesterlStdlib.Binary':'equal'(S1587U, S1585UserId) of true -> 'error'; false -> {'ok', S1587U} end end; {'disconnected', _} -> 'error' end end, S1584Players).
'get_connected_user_ids_from_quad'(S1589Players, S1590UserId) -> 'SesterlStdlib.List':'filter_map'(fun(S1591GOpt) -> case S1591GOpt of 'error' -> 'error'; {'ok', S1592G} -> case maps:get(connection, S1592G) of {'connected', _, _} -> begin S1593U = maps:get(user_id, maps:get(user, S1592G)), case 'SesterlStdlib.Binary':'equal'(S1593U, S1590UserId) of true -> 'error'; false -> {'ok', S1593U} end end; {'disconnected', _} -> 'error' end end end, 'Tianjiupai.Quad':'to_list'(S1589Players)).
'get_all_connected_user_ids'(S1595State) -> case maps:get(room_state, S1595State) of {'internal_waiting', S1596WaitingState} -> 'SesterlStdlib.List':'filter_map'(fun(S1597Player) -> case maps:get(connection, S1597Player) of {'connected', _, _} -> {'ok', maps:get(user_id, maps:get(user, S1597Player))}; {'disconnected', _} -> 'error' end end, maps:get(members, S1596WaitingState)); {'internal_playing', S1598WholeGameState} -> begin {'meta', S1599Meta} = maps:get(meta, S1598WholeGameState), 'SesterlStdlib.List':'filter_map'(fun(S1600PlayerOpt) -> case S1600PlayerOpt of 'error' -> 'error'; {'ok', S1601Player} -> case maps:get(connection, S1601Player) of {'connected', _, _} -> {'ok', maps:get(user_id, maps:get(user, S1601Player))}; {'disconnected', _} -> 'error' end end end, 'Tianjiupai.Quad':'to_list'(maps:get(players, S1599Meta))) end end.
'make_game_player'(S1603Iplayer) -> begin S1604IsConnected = case maps:get(connection, S1603Iplayer) of {'connected', _, _} -> true; {'disconnected', _} -> false end, #{is_connected => S1604IsConnected, user => maps:get(user, S1603Iplayer)} end.
'make_game_meta'({'meta', S1606Meta}) -> #{inning_index => maps:get(inning_index, S1606Meta), num_consecutives => maps:get(num_consecutives, S1606Meta), parent_seat => maps:get(parent_seat, S1606Meta), players => 'Tianjiupai.Quad':'map'(fun(S1607Opt) -> 'SesterlStdlib.Option':'map'((fun 'Tianjiupai.RoomServer.Callback':'make_game_player'/1), S1607Opt) end, maps:get(players, S1606Meta)), scores => maps:get(scores, S1606Meta)}.
'make_observable_game_state'(S1609GameState, S1610UserId) -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1609GameState, S1610UserId) of 'error' -> 'error'; {'ok', {S1611Seat, _}} -> begin S1612Synchronizing = case maps:get(sync, S1609GameState) of 'waiting_input' -> false; {'waiting_sync', _} -> true end, begin S1615ObservableInning = case maps:get(inning, S1609GameState) of {'during_inning', S1613Inning} -> {'observable_during_inning', 'Tianjiupai.Inning':'observe'(S1611Seat, S1613Inning)}; {'inning_end', S1614GainsQuad, _} -> {'observable_inning_end', S1614GainsQuad} end, {'ok', #{meta => 'Tianjiupai.RoomServer.Callback':'make_game_meta'(maps:get(meta, S1609GameState)), observable_inning => S1615ObservableInning, snapshot_id => maps:get(snapshot_id, S1609GameState), synchronizing => S1612Synchronizing}} end end end.
'make_observable'(S1617RoomState, S1618UserId) -> case S1617RoomState of {'internal_waiting', S1619WaitingState} -> begin S1621Members = 'SesterlStdlib.List':'map'(fun(S1620W) -> maps:get(user, S1620W) end, maps:get(members, S1619WaitingState)), {'ok', {'waiting_start', S1621Members}} end; {'internal_playing', S1622GameState} -> 'SesterlStdlib.Option':'map'(fun(S1623Obs) -> {'playing_game', S1623Obs} end, 'Tianjiupai.RoomServer.Callback':'make_observable_game_state'(S1622GameState, S1618UserId)) end.
'make_personal_state'(S1625State, S1626UserId) -> begin S1627Settings = maps:get(settings, S1625State), case 'Tianjiupai.RoomServer.Callback':'make_observable'(maps:get(room_state, S1625State), S1626UserId) of 'error' -> 'error'; {'ok', S1628Observable} -> {'ok', #{game => S1628Observable, logs => 'SesterlStdlib.List':'reverse'(maps:get(reversed_logs, S1625State)), room => #{room_id => maps:get(room_id, S1627Settings), room_name => maps:get(room_name, S1627Settings)}}} end end.
'make_initial_sync'() -> 'Tianjiupai.Quad':'make'({false, false, false, false}).
'start_new_inning'({'meta', S1631Meta}) -> begin S1632NextParentSeat = maps:get(parent_seat, S1631Meta), begin S1633Inning = 'Tianjiupai.Inning':'start'(S1632NextParentSeat), begin S1634SnapshotId = 'Tianjiupai.SnapshotId':'generate'(), sesterl_internal_prim:'return'(#{inning => {'during_inning', S1633Inning}, meta => {'meta', S1631Meta}, snapshot_id => S1634SnapshotId, sync => {'waiting_sync', 'Tianjiupai.RoomServer.Callback':'make_initial_sync'()}}) end end end.
'notify'(S1636UserId, S1637Notifications) -> 'Tianjiupai.WebSocketHandler':'notify'(S1636UserId, S1637Notifications).
'notify_for_each'(S1639UserIds, S1640Notifications) -> 'SesterlStdlib.List':'for_each'(fun(S1641UserId) -> 'Tianjiupai.RoomServer.Callback':'notify'(S1641UserId, S1640Notifications) end, S1639UserIds).
'stop'(S1643State) -> begin S1644UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_all_connected_user_ids'(S1643State), begin _ = begin S3135 = 'Tianjiupai.Logger':'debug'({"delete room sync (room_id: ~p)", 1}, {maps:get(room_id, maps:get(settings, S1643State))}), S3135(<<"RoomServer.sest">>, 425) end, begin ok = 'Tianjiupai.PlazaServer':'delete_room_sync'(maps:get(room_id, maps:get(settings, S1643State))), begin _ = begin S3136 = 'Tianjiupai.Logger':'debug'({"deleted from plaza (room_id: ~p)", 1}, {maps:get(room_id, maps:get(settings, S1643State))}), S3136(<<"RoomServer.sest">>, 427) end, begin ok = 'SesterlStdlib.List':'foldl_effect'(fun(ok, S1645UserId) -> begin _ = 'Tianjiupai.WebSocketHandler':'notify_room_close'(S1645UserId), sesterl_internal_prim:'return'(ok) end end, ok, S1644UserIdsForNotification), 'SesterlStdlib.GenServer':'no_reply_and_stop'('SesterlStdlib.StopReason':'normal'(), S1643State) end end end end end.
'find_empty_seat'(S1647GameState) -> begin {'meta', S1648Meta} = maps:get(meta, S1647GameState), 'SesterlStdlib.Option':'map'(fun(S1649Pair) -> begin {S1650Seat, _} = S1649Pair, S1650Seat end end, 'Tianjiupai.Quad':'find'(fun(S1651PlayerOpt) -> case S1651PlayerOpt of {'ok', _} -> false; 'error' -> true end end, maps:get(players, S1648Meta))) end.
'handle_send_chat'(S1653User, S1654Text, S1655State) -> begin {_, S1656Members} = 'Tianjiupai.RoomServer.Callback':'get_members_from_state'(maps:get(room_state, S1655State)), begin S1657Comment = #{from => S1653User, text => S1654Text}, begin _ = begin S1659UserIds = 'SesterlStdlib.List':'map'(fun(S1658U) -> maps:get(user_id, S1658U) end, S1656Members), 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1659UserIds, [{'notify_comment', S1657Comment} | []]) end, 'Tianjiupai.RoomServer.Callback':'reply'('chat_sent', maps:put(reversed_logs, [{'log_comment', S1657Comment} | maps:get(reversed_logs, S1655State)], S1655State)) end end end.
'is_none'(S1661X) -> case S1661X of 'error' -> true; {'ok', _} -> false end.
'handle_attend'(S1663User, S1664WsProc, S1665State) -> begin S1666UserId = maps:get(user_id, S1663User), case maps:get(room_state, S1665State) of {'internal_playing', S1667GameState0} -> case 'Tianjiupai.RoomServer.Callback':'find_empty_seat'(S1667GameState0) of 'error' -> 'Tianjiupai.RoomServer.Callback':'reply'({'attended', 'error'}, S1665State); {'ok', S1668Seat} -> begin {'meta', S1669Meta0} = maps:get(meta, S1667GameState0), begin S1670WsMref = 'Tianjiupai.WebSocketHandler':'monitor'(S1664WsProc), begin S1671Player = #{connection => {'connected', S1664WsProc, S1670WsMref}, user => S1663User}, begin S1672Players1 = 'Tianjiupai.Quad':'update'(S1668Seat, {'ok', S1671Player}, maps:get(players, S1669Meta0)), begin S1673GameState1 = maps:put(meta, {'meta', maps:put(players, S1672Players1, S1669Meta0)}, S1667GameState0), begin S1674UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids'(S1673GameState1, S1668Seat), begin S1679GameState2 = case maps:get(sync, S1673GameState1) of 'waiting_input' -> begin _ = begin S3141 = 'Tianjiupai.Logger':'debug'({"attend -> waiting input (seat: ~p, user_id: ~s)", 2}, {S1668Seat, S1666UserId}), S3141(<<"RoomServer.sest">>, 486) end, begin S1675Notif = {'notify_entered_midway', #{seat => S1668Seat, user => S1663User}}, begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1674UserIdsForNotification, [S1675Notif | []]), sesterl_internal_prim:'return'(S1673GameState1) end end end; {'waiting_sync', S1676SyncQuad0} -> case 'Tianjiupai.Quad':'access'(S1668Seat, S1676SyncQuad0) of true -> begin _ = begin S3142 = 'Tianjiupai.Logger':'debug'({"attend -> no need to sync (seat: ~p, user_id: ~s, sync_quad: ~p)", 3}, {S1668Seat, S1666UserId, S1676SyncQuad0}), S3142(<<"RoomServer.sest">>, 498) end, begin S1677Notif = {'notify_entered_midway', #{seat => S1668Seat, user => S1663User}}, begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1674UserIdsForNotification, [S1677Notif | []]), sesterl_internal_prim:'return'(S1673GameState1) end end end; false -> begin S1678SyncQuad1 = 'Tianjiupai.Quad':'update'(S1668Seat, true, S1676SyncQuad0), begin _ = begin S3143 = 'Tianjiupai.Logger':'debug'({"attend -> sync update (seat: ~p, user_id: ~s, sync_quad: ~p)", 3}, {S1668Seat, S1666UserId, S1678SyncQuad1}), S3143(<<"RoomServer.sest">>, 509) end, case 'Tianjiupai.Quad':'decompose'(S1678SyncQuad1) of {true, true, true, true} -> begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1674UserIdsForNotification, [{'notify_entered_midway', #{seat => S1668Seat, user => S1663User}} | ['notify_next_step' | []]]), sesterl_internal_prim:'return'(maps:put(sync, 'waiting_input', S1673GameState1)) end; _ -> begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1674UserIdsForNotification, [{'notify_entered_midway', #{seat => S1668Seat, user => S1663User}} | []]), sesterl_internal_prim:'return'(maps:put(sync, {'waiting_sync', S1678SyncQuad1}, S1673GameState1)) end end end end end end, begin S1680State = maps:put(reversed_logs, [{'log_entered', S1663User} | maps:get(reversed_logs, S1665State)], maps:put(room_state, {'internal_playing', S1679GameState2}, S1665State)), begin ok = 'Tianjiupai.RoomServer.Callback':'update_plaza'(S1680State), begin {'ok', S1681PersonalState} = 'Tianjiupai.RoomServer.Callback':'make_personal_state'(S1680State, S1666UserId), 'Tianjiupai.RoomServer.Callback':'reply'({'attended', {'ok', S1681PersonalState}}, S1680State) end end end end end end end end end end end; {'internal_waiting', S1682WaitingState} -> begin S1683Members = maps:get(members, S1682WaitingState), case 'SesterlStdlib.List':'any'(fun(S1684W) -> 'SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1684W)), S1666UserId) end, S1683Members) of true -> begin {'ok', S1685PersonalState} = 'Tianjiupai.RoomServer.Callback':'make_personal_state'(S1665State, S1666UserId), 'Tianjiupai.RoomServer.Callback':'reply'({'attended', {'ok', S1685PersonalState}}, S1665State) end; false -> begin S1686WsMref = 'Tianjiupai.WebSocketHandler':'monitor'(S1664WsProc), begin S1687LogEnter = {'log_entered', S1663User}, begin S1688NotifEnter = {'notify_entered', S1663User}, case S1683Members of [S1689W0 | [S1690W1 | [S1691W2 | _]]] -> begin S1692U0 = maps:get(user, S1689W0), begin S1693U1 = maps:get(user, S1690W1), begin S1694U2 = maps:get(user, S1691W2), begin S1699PlayerQuad = begin S1695Player0 = #{connection => maps:get(connection, S1689W0), user => S1692U0}, begin S1696Player1 = #{connection => maps:get(connection, S1690W1), user => S1693U1}, begin S1697Player2 = #{connection => maps:get(connection, S1691W2), user => S1694U2}, begin S1698Player3 = #{connection => {'connected', S1664WsProc, S1686WsMref}, user => S1663User}, 'Tianjiupai.Quad':'make'({{'ok', S1695Player0}, {'ok', S1696Player1}, {'ok', S1697Player2}, {'ok', S1698Player3}}) end end end end, begin S1700ParentSeat = 'seat_a', begin S1701WholeGameMeta = {'meta', #{inning_index => 0, num_consecutives => 0, parent_seat => S1700ParentSeat, players => S1699PlayerQuad, scores => 'Tianjiupai.Quad':'make'({0, 0, 0, 0})}}, begin S1702GameIndex = #{inning_index => 0, num_consecutives => 0}, begin S1703GameState = 'Tianjiupai.RoomServer.Callback':'start_new_inning'(S1701WholeGameMeta), begin _ = 'SesterlStdlib.List':'for_each'(fun(S1704U) -> case 'Tianjiupai.RoomServer.Callback':'make_observable_game_state'(S1703GameState, S1704U) of 'error' -> sesterl_internal_prim:'return'(ok); {'ok', S1705Obs} -> 'Tianjiupai.RoomServer.Callback':'notify'(S1704U, [S1688NotifEnter | [{'notify_game_start', S1705Obs} | []]]) end end, [maps:get(user_id, S1692U0) | [maps:get(user_id, S1693U1) | [maps:get(user_id, S1694U2) | []]]]), begin S1706State = maps:put(reversed_logs, [{'log_game_start', S1702GameIndex} | [S1687LogEnter | maps:get(reversed_logs, S1665State)]], maps:put(room_state, {'internal_playing', S1703GameState}, S1665State)), begin ok = 'Tianjiupai.RoomServer.Callback':'update_plaza'(S1706State), begin {'ok', S1707PersonalState} = 'Tianjiupai.RoomServer.Callback':'make_personal_state'(S1706State, S1666UserId), 'Tianjiupai.RoomServer.Callback':'reply'({'attended', {'ok', S1707PersonalState}}, S1706State) end end end end end end end end end end end end; _ -> begin S1708W = #{connection => {'connected', S1664WsProc, S1686WsMref}, user => S1663User}, begin S1709WaitingState = maps:put(members, 'SesterlStdlib.List':'append'(S1683Members, [S1708W | []]), S1682WaitingState), begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'('SesterlStdlib.List':'map'(fun(S1710W) -> maps:get(user_id, maps:get(user, S1710W)) end, S1683Members), [S1688NotifEnter | []]), begin S1711State = maps:put(reversed_logs, [S1687LogEnter | maps:get(reversed_logs, S1665State)], maps:put(room_state, {'internal_waiting', S1709WaitingState}, S1665State)), begin ok = 'Tianjiupai.RoomServer.Callback':'update_plaza'(S1711State), begin {'ok', S1712PersonalState} = 'Tianjiupai.RoomServer.Callback':'make_personal_state'(S1711State, S1666UserId), 'Tianjiupai.RoomServer.Callback':'reply'({'attended', {'ok', S1712PersonalState}}, S1711State) end end end end end end end end end end end end end end.
'handle_exit'(S1714UserId, S1715State) -> begin S1731Opt = case maps:get(room_state, S1715State) of {'internal_playing', S1716GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1716GameState, S1714UserId) of 'error' -> 'error'; {'ok', {S1717Seat, S1718Player}} -> begin {'meta', S1719Meta0} = maps:get(meta, S1716GameState), begin S1720Players0 = maps:get(players, S1719Meta0), begin S1721Players1 = 'Tianjiupai.Quad':'update'(S1717Seat, 'error', S1720Players0), begin S1722UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids'(S1716GameState, S1717Seat), {'ok', {maps:get(user, S1718Player), S1722UserIdsForNotification, {'internal_playing', maps:put(meta, {'meta', maps:put(players, S1721Players1, S1719Meta0)}, S1716GameState)}}} end end end end end; {'internal_waiting', S1723WaitingState} -> begin S1724Members0 = maps:get(members, S1723WaitingState), case 'SesterlStdlib.List':'filter'(fun(S1725W0) -> 'SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1725W0)), S1714UserId) end, S1724Members0) of [] -> 'error'; [S1726W | _] -> begin S1728Members1 = 'SesterlStdlib.List':'filter'(fun(S1727W0) -> 'SesterlStdlib.Bool':'not'('SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1727W0)), S1714UserId)) end, S1724Members0), begin S1730UserIdsForNotification = 'SesterlStdlib.List':'map'(fun(S1729W) -> maps:get(user_id, maps:get(user, S1729W)) end, S1728Members1), {'ok', {maps:get(user, S1726W), S1730UserIdsForNotification, {'internal_waiting', maps:put(members, S1728Members1, S1723WaitingState)}}} end end end end end, case S1731Opt of 'error' -> 'Tianjiupai.RoomServer.Callback':'reply'({'exited', false}, S1715State); {'ok', {S1732User, S1733UserIdsForNotification, S1734RoomState}} -> begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1733UserIdsForNotification, [{'notify_exited', S1732User} | []]), begin S1735State = maps:put(reversed_logs, [{'log_exited', S1732User} | maps:get(reversed_logs, S1715State)], maps:put(room_state, S1734RoomState, S1715State)), begin ok = 'Tianjiupai.RoomServer.Callback':'update_plaza'(S1735State), 'Tianjiupai.RoomServer.Callback':'reply'({'exited', true}, S1735State) end end end end end.
'make_winner_diff'(S1737Losers) -> begin S1741LoserDiffSum = 'SesterlStdlib.List':'foldl'(fun(S1738Acc, S1739Loser) -> begin {_, S1740LoserDiff} = S1739Loser, (S1738Acc + S1740LoserDiff) end end, 0, S1737Losers), (0 - S1741LoserDiffSum) end.
'update_score'(S1743Scores, S1744Updates) -> 'SesterlStdlib.List':'foldl'(fun(S1745Acc, S1746Update) -> begin {S1747Scores, S1748Diffs} = S1745Acc, begin {S1749Seat, S1750Diff} = S1746Update, begin S1751Score = 'Tianjiupai.Quad':'access'(S1749Seat, S1747Scores), {'Tianjiupai.Quad':'update'(S1749Seat, (S1751Score + S1750Diff), S1747Scores), 'Tianjiupai.Quad':'update'(S1749Seat, S1750Diff, S1748Diffs)} end end end end, {S1743Scores, 'Tianjiupai.Quad':'make'({0, 0, 0, 0})}, S1744Updates).
'deal_with_trick_end'({'meta', S1753Meta}, S1754WinnerSeat, S1755SpecialOpt) -> case S1755SpecialOpt of 'error' -> {{'meta', S1753Meta}, 'error'}; {'ok', _} -> begin S1756LoserSeats = 'Tianjiupai.Quad':'the_other_seats'(S1754WinnerSeat), begin S1757NumConsecutives = maps:get(num_consecutives, S1753Meta), begin S1758ParentSeat = maps:get(parent_seat, S1753Meta), begin S1763Losers = case 'Tianjiupai.Quad':'seat_equal'(S1754WinnerSeat, S1758ParentSeat) of true -> 'SesterlStdlib.List':'map'(fun(S1759LoserSeat) -> begin S1760LoserDiff = (0 - (2 * (S1757NumConsecutives + 1))), {S1759LoserSeat, S1760LoserDiff} end end, S1756LoserSeats); false -> 'SesterlStdlib.List':'map'(fun(S1761LoserSeat) -> begin S1762LoserDiff = case 'Tianjiupai.Quad':'seat_equal'(S1761LoserSeat, S1758ParentSeat) of true -> (0 - (2 * (S1757NumConsecutives + 1))); false -> (0 - 2) end, {S1761LoserSeat, S1762LoserDiff} end end, S1756LoserSeats) end, begin S1764WinnerDiff = 'Tianjiupai.RoomServer.Callback':'make_winner_diff'(S1763Losers), begin {S1765Scores, S1766Diffs} = 'Tianjiupai.RoomServer.Callback':'update_score'(maps:get(scores, S1753Meta), [{S1754WinnerSeat, S1764WinnerDiff} | S1763Losers]), {{'meta', maps:put(scores, S1765Scores, S1753Meta)}, {'ok', S1766Diffs}} end end end end end end end.
'make_loser_updates_when_parent_wins'(S1768NumConsecutives, S1769LoserSeats, S1770GainsQuad, S1771Coeff) -> 'SesterlStdlib.List':'map'(fun(S1772LoserSeat) -> begin S1773NumGains = 'SesterlStdlib.List':'length'('Tianjiupai.Quad':'access'(S1772LoserSeat, S1770GainsQuad)), begin S1774LoserDiff = case (S1773NumGains == 0) of true -> (0 - (5 * ((S1768NumConsecutives + 1) * S1771Coeff))); false -> ((S1773NumGains - 4) * ((S1768NumConsecutives + 1) * S1771Coeff)) end, {S1772LoserSeat, S1774LoserDiff} end end end, S1769LoserSeats).
'make_loser_updates_when_child_wins'(S1776NumConsecutives, S1777LoserSeats, S1778ParentSeat, S1779GainsQuad, S1780CoeffOriginal) -> 'SesterlStdlib.List':'map'(fun(S1781LoserSeat) -> begin S1782NumGains = 'SesterlStdlib.List':'length'('Tianjiupai.Quad':'access'(S1781LoserSeat, S1779GainsQuad)), begin S1784LoserDiff = begin S1783Coeff = case 'Tianjiupai.Quad':'seat_equal'(S1781LoserSeat, S1778ParentSeat) of true -> ((S1776NumConsecutives + 1) * S1780CoeffOriginal); false -> S1780CoeffOriginal end, case (S1782NumGains == 0) of true -> (0 - (5 * S1783Coeff)); false -> ((S1782NumGains - 4) * S1783Coeff) end end, {S1781LoserSeat, S1784LoserDiff} end end end, S1777LoserSeats).
'deal_with_inning_end'({'meta', S1786Meta}, S1787WinnerSeat, S1788SpecialOpt, S1789GainsQuad) -> begin S1790LoserSeats = 'Tianjiupai.Quad':'the_other_seats'(S1787WinnerSeat), begin S1791NumConsecutives = maps:get(num_consecutives, S1786Meta), begin S1792ParentSeat = maps:get(parent_seat, S1786Meta), case 'Tianjiupai.Quad':'seat_equal'(S1787WinnerSeat, S1792ParentSeat) of true -> begin S1797Losers = case S1788SpecialOpt of {'ok', 'inning_end_with_bazhijie'} -> 'SesterlStdlib.List':'map'(fun(S1793LoserSeat) -> begin S1794LoserDiff = ((0 - 20) * (S1791NumConsecutives + 1)), {S1793LoserSeat, S1794LoserDiff} end end, S1790LoserSeats); {'ok', 'inning_end_with_qizhijie'} -> 'SesterlStdlib.List':'map'(fun(S1795LoserSeat) -> begin S1796LoserDiff = ((0 - 10) * (S1791NumConsecutives + 1)), {S1795LoserSeat, S1796LoserDiff} end end, S1790LoserSeats); {'ok', _} -> 'Tianjiupai.RoomServer.Callback':'make_loser_updates_when_parent_wins'(S1791NumConsecutives, S1790LoserSeats, S1789GainsQuad, 2); 'error' -> 'Tianjiupai.RoomServer.Callback':'make_loser_updates_when_parent_wins'(S1791NumConsecutives, S1790LoserSeats, S1789GainsQuad, 1) end, begin S1798WinnerDiff = 'Tianjiupai.RoomServer.Callback':'make_winner_diff'(S1797Losers), begin {S1799Scores, S1800Diffs} = 'Tianjiupai.RoomServer.Callback':'update_score'(maps:get(scores, S1786Meta), [{S1787WinnerSeat, S1798WinnerDiff} | S1797Losers]), {{'meta', #{inning_index => maps:get(inning_index, S1786Meta), num_consecutives => (S1791NumConsecutives + 1), parent_seat => S1792ParentSeat, players => maps:get(players, S1786Meta), scores => S1799Scores}}, S1800Diffs} end end end; false -> begin S1807Losers = case S1788SpecialOpt of {'ok', 'inning_end_with_bazhijie'} -> 'SesterlStdlib.List':'map'(fun(S1801LoserSeat) -> begin S1802Coeff = case 'Tianjiupai.Quad':'seat_equal'(S1801LoserSeat, S1792ParentSeat) of true -> (S1791NumConsecutives + 1); false -> 1 end, begin S1803LoserDiff = (0 - (20 * S1802Coeff)), {S1801LoserSeat, S1803LoserDiff} end end end, S1790LoserSeats); {'ok', 'inning_end_with_qizhijie'} -> 'SesterlStdlib.List':'map'(fun(S1804LoserSeat) -> begin S1805Coeff = case 'Tianjiupai.Quad':'seat_equal'(S1804LoserSeat, S1792ParentSeat) of true -> (S1791NumConsecutives + 1); false -> 1 end, begin S1806LoserDiff = (0 - (10 * S1805Coeff)), {S1804LoserSeat, S1806LoserDiff} end end end, S1790LoserSeats); {'ok', _} -> 'Tianjiupai.RoomServer.Callback':'make_loser_updates_when_child_wins'(S1791NumConsecutives, S1790LoserSeats, S1792ParentSeat, S1789GainsQuad, 2); 'error' -> 'Tianjiupai.RoomServer.Callback':'make_loser_updates_when_child_wins'(S1791NumConsecutives, S1790LoserSeats, S1792ParentSeat, S1789GainsQuad, 1) end, begin S1808WinnerDiff = 'Tianjiupai.RoomServer.Callback':'make_winner_diff'(S1807Losers), begin {S1809Scores, S1810Diffs} = 'Tianjiupai.RoomServer.Callback':'update_score'(maps:get(scores, S1786Meta), [{S1787WinnerSeat, S1808WinnerDiff} | S1807Losers]), {{'meta', #{inning_index => (maps:get(inning_index, S1786Meta) + 1), num_consecutives => 1, parent_seat => S1787WinnerSeat, players => maps:get(players, S1786Meta), scores => S1809Scores}}, S1810Diffs} end end end end end end end.
'handle_submit_impl'(S1812UserId, S1813Cards, S1814GameState) -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1814GameState, S1812UserId) of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', {S1815Seat, _}} -> case maps:get(inning, S1814GameState) of {'inning_end', _, _} -> sesterl_internal_prim:'return'('error'); {'during_inning', S1816Inning} -> case 'Tianjiupai.Inning':'submit'(S1815Seat, S1813Cards, S1816Inning) of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', {S1817SubmitResult, S1818IsFront}} -> begin S1819SnapshotId = 'Tianjiupai.SnapshotId':'generate'(), begin S1820WholeGameMeta = maps:get(meta, S1814GameState), begin {S1841GameState, S1842LastOpt} = case S1817SubmitResult of {'continues', S1821Inning} -> {#{inning => {'during_inning', S1821Inning}, meta => S1820WholeGameMeta, snapshot_id => S1819SnapshotId, sync => {'waiting_sync', 'Tianjiupai.RoomServer.Callback':'make_initial_sync'()}}, 'error'}; {'wins_trick', S1822WinnerSeat, S1823LastTable, S1824SubmitterHand, S1825SpecialOpt, S1826Inning} -> begin {S1827WholeGameMeta, S1828DiffsOpt} = 'Tianjiupai.RoomServer.Callback':'deal_with_trick_end'(S1820WholeGameMeta, S1822WinnerSeat, S1825SpecialOpt), begin S1831ChangesOpt = case {S1825SpecialOpt, S1828DiffsOpt} of {{'ok', S1829Special}, {'ok', S1830Diffs}} -> {'ok', #{change_reason => {'special_trick_end', S1829Special}, diffs => S1830Diffs}}; _ -> 'error' end, {#{inning => {'during_inning', S1826Inning}, meta => S1827WholeGameMeta, snapshot_id => S1819SnapshotId, sync => {'waiting_sync', 'Tianjiupai.RoomServer.Callback':'make_initial_sync'()}}, {'ok', #{changes => S1831ChangesOpt, hand => S1824SubmitterHand, table => S1823LastTable}}} end end; {'wins_inning', S1832WinnerSeat, S1833LastTable, S1834GainsQuad, S1835SpecialOpt} -> begin {S1836WholeGameMeta, S1837Diffs} = 'Tianjiupai.RoomServer.Callback':'deal_with_inning_end'(S1820WholeGameMeta, S1832WinnerSeat, S1835SpecialOpt, S1834GainsQuad), begin S1839Reason = case S1835SpecialOpt of 'error' -> 'normal_inning_end'; {'ok', S1838Special} -> {'special_inning_end', S1838Special} end, begin S1840Changes = #{change_reason => S1839Reason, diffs => S1837Diffs}, {#{inning => {'inning_end', S1834GainsQuad, 'Tianjiupai.RoomServer.Callback':'make_initial_sync'()}, meta => S1836WholeGameMeta, snapshot_id => S1819SnapshotId, sync => {'waiting_sync', 'Tianjiupai.RoomServer.Callback':'make_initial_sync'()}}, {'ok', #{changes => {'ok', S1840Changes}, hand => [], table => S1833LastTable}}} end end end end, begin S1844CardOpts = case S1818IsFront of true -> 'SesterlStdlib.List':'map'(fun(S1843Card) -> {'ok', S1843Card} end, S1813Cards); false -> 'SesterlStdlib.List':'map'(fun(_) -> 'error' end, S1813Cards) end, begin _ = 'SesterlStdlib.List':'for_each'(fun(S1845U) -> case 'Tianjiupai.RoomServer.Callback':'make_observable_game_state'(S1841GameState, S1845U) of 'error' -> sesterl_internal_prim:'return'(ok); {'ok', S1846Obs} -> begin S1848TrickLast = 'SesterlStdlib.Option':'map'(fun(S1847Last) -> #{changes => maps:get(changes, S1847Last), table => maps:get(table, S1847Last)} end, S1842LastOpt), begin S1849Submission = #{new_state => S1846Obs, seat => S1815Seat, submitted => S1844CardOpts, trick_last => S1848TrickLast}, 'Tianjiupai.RoomServer.Callback':'notify'(S1845U, [{'notify_submission', S1849Submission} | []]) end end end end, 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids'(S1841GameState, S1815Seat)), begin {'ok', S1850Obs} = 'Tianjiupai.RoomServer.Callback':'make_observable_game_state'(S1841GameState, S1812UserId), sesterl_internal_prim:'return'({'ok', {S1850Obs, S1842LastOpt, S1841GameState}}) end end end end end end end end end.
'handle_submit'(S1852UserId, S1853Cards, S1854State) -> begin S1856Opt = case maps:get(room_state, S1854State) of {'internal_waiting', _} -> sesterl_internal_prim:'return'('error'); {'internal_playing', S1855GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_empty_seat'(S1855GameState) of 'error' -> 'Tianjiupai.RoomServer.Callback':'handle_submit_impl'(S1852UserId, S1853Cards, S1855GameState); {'ok', _} -> sesterl_internal_prim:'return'('error') end end, case S1856Opt of 'error' -> 'Tianjiupai.RoomServer.Callback':'reply'({'submission_done', 'error'}, S1854State); {'ok', {S1857Obs, S1858LastOpt, S1859GameState}} -> begin S1862ReversedLogs = case S1858LastOpt of 'error' -> maps:get(reversed_logs, S1854State); {'ok', S1860Last} -> case maps:get(changes, S1860Last) of 'error' -> maps:get(reversed_logs, S1854State); {'ok', S1861Changes} -> [{'log_changes', S1861Changes} | maps:get(reversed_logs, S1854State)] end end, 'Tianjiupai.RoomServer.Callback':'reply'({'submission_done', {'ok', {S1857Obs, S1858LastOpt}}}, maps:put(reversed_logs, S1862ReversedLogs, maps:put(room_state, {'internal_playing', S1859GameState}, S1854State))) end end end.
'handle_ack'(S1864UserId, S1865SnapshotId, S1866State) -> begin S1874Opt = case maps:get(room_state, S1866State) of {'internal_waiting', _} -> sesterl_internal_prim:'return'('error'); {'internal_playing', S1867GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1867GameState, S1864UserId) of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', {S1868Seat, _}} -> case 'Tianjiupai.SnapshotId':'equal'(S1865SnapshotId, maps:get(snapshot_id, S1867GameState)) of true -> case maps:get(sync, S1867GameState) of {'waiting_sync', S1869SyncQuad} -> begin S1870SyncQuad = 'Tianjiupai.Quad':'update'(S1868Seat, true, S1869SyncQuad), begin _ = begin S3154 = 'Tianjiupai.Logger':'debug'({"update sync (snapshot_id: ~s, user_id: ~s, quad: ~p)", 3}, {S1865SnapshotId, S1864UserId, S1870SyncQuad}), S3154(<<"RoomServer.sest">>, 1057) end, case 'Tianjiupai.Quad':'decompose'(S1870SyncQuad) of {true, true, true, true} -> begin S1871UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids'(S1867GameState, S1868Seat), begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'([S1864UserId | S1871UserIdsForNotification], ['notify_next_step' | []]), begin S1872GameState = maps:put(sync, 'waiting_input', S1867GameState), sesterl_internal_prim:'return'({'ok', S1872GameState}) end end end; _ -> begin S1873GameState = maps:put(sync, {'waiting_sync', S1870SyncQuad}, S1867GameState), sesterl_internal_prim:'return'({'ok', S1873GameState}) end end end end; 'waiting_input' -> begin _ = begin S3155 = 'Tianjiupai.Logger':'warning'({"ack during waiting input (snapshot_id: ~s, user_id: ~s)", 2}, {S1865SnapshotId, S1864UserId}), S3155(<<"RoomServer.sest">>, 1077) end, sesterl_internal_prim:'return'('error') end end; false -> begin _ = begin S3156 = 'Tianjiupai.Logger':'warning'({"snapshot mismatch (got: ~s, expected: ~s, user_id: ~s)", 3}, {S1865SnapshotId, maps:get(snapshot_id, S1867GameState), S1864UserId}), S3156(<<"RoomServer.sest">>, 1086) end, sesterl_internal_prim:'return'('error') end end end end, case S1874Opt of 'error' -> 'Tianjiupai.RoomServer.Callback':'no_reply'(S1866State); {'ok', S1875GameState} -> 'Tianjiupai.RoomServer.Callback':'no_reply'(maps:put(room_state, {'internal_playing', S1875GameState}, S1866State)) end end.
'handle_require_next_inning'(S1877UserId, S1878SnapshotId, S1879State) -> begin S1896Opt = case maps:get(room_state, S1879State) of {'internal_waiting', _} -> sesterl_internal_prim:'return'('error'); {'internal_playing', S1880GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1880GameState, S1877UserId) of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', {S1881Seat, _}} -> case 'Tianjiupai.SnapshotId':'equal'(S1878SnapshotId, maps:get(snapshot_id, S1880GameState)) of true -> case maps:get(inning, S1880GameState) of {'during_inning', _} -> sesterl_internal_prim:'return'('error'); {'inning_end', S1882GainsQuad, S1883InningSyncQuad} -> begin S1884InningSyncQuad = 'Tianjiupai.Quad':'update'(S1881Seat, true, S1883InningSyncQuad), begin _ = begin S3158 = 'Tianjiupai.Logger':'debug'({"update inning sync (snapshot_id: ~s, inning_sync_quad: ~p)", 2}, {S1878SnapshotId, S1884InningSyncQuad}), S3158(<<"RoomServer.sest">>, 1124) end, case 'Tianjiupai.Quad':'decompose'(S1884InningSyncQuad) of {true, true, true, true} -> begin S1885WholeGameMeta = maps:get(meta, S1880GameState), begin {'meta', S1886Meta} = S1885WholeGameMeta, begin S1887InningIndex = maps:get(inning_index, S1886Meta), begin S1888UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids'(S1880GameState, S1881Seat), begin S1889UserIdsForNotification = [S1877UserId | S1888UserIdsForNotification], case (S1887InningIndex >= 'Tianjiupai.Constants':'maximum_num_innings'()) of true -> sesterl_internal_prim:'return'({'ok', 'room_close'}); false -> begin S1890GameState = 'Tianjiupai.RoomServer.Callback':'start_new_inning'(S1885WholeGameMeta), begin _ = 'SesterlStdlib.List':'for_each'(fun(S1891U) -> case 'Tianjiupai.RoomServer.Callback':'make_observable_game_state'(S1890GameState, S1891U) of 'error' -> sesterl_internal_prim:'return'(ok); {'ok', S1892Obs} -> 'Tianjiupai.RoomServer.Callback':'notify'(S1891U, [{'notify_game_start', S1892Obs} | []]) end end, S1889UserIdsForNotification), begin S1894GameIndex = begin {'meta', S1893Meta} = maps:get(meta, S1890GameState), #{inning_index => S1887InningIndex, num_consecutives => maps:get(num_consecutives, S1893Meta)} end, sesterl_internal_prim:'return'({'ok', {'room_transition_to_next_inning', S1890GameState, {'ok', S1894GameIndex}}}) end end end end end end end end end; _ -> begin S1895GameState = maps:put(inning, {'inning_end', S1882GainsQuad, S1884InningSyncQuad}, S1880GameState), sesterl_internal_prim:'return'({'ok', {'room_transition_to_next_inning', S1895GameState, 'error'}}) end end end end end; false -> sesterl_internal_prim:'return'('error') end end end, case S1896Opt of 'error' -> 'Tianjiupai.RoomServer.Callback':'no_reply'(S1879State); {'ok', 'room_close'} -> 'Tianjiupai.RoomServer.Callback':'stop'(S1879State); {'ok', {'room_transition_to_next_inning', S1897GameState, S1898GameIndexOpt}} -> begin S1900State = case S1898GameIndexOpt of 'error' -> S1879State; {'ok', S1899GameIndex} -> maps:put(reversed_logs, [{'log_game_start', S1899GameIndex} | maps:get(reversed_logs, S1879State)], S1879State) end, 'Tianjiupai.RoomServer.Callback':'no_reply'(maps:put(room_state, {'internal_playing', S1897GameState}, S1900State)) end end end.
'handle_set_connection'(S1902UserId, S1903WsProc, S1904State) -> begin S1929Opt = case maps:get(room_state, S1904State) of {'internal_waiting', S1905WaitingState} -> begin S1906Members0 = maps:get(members, S1905WaitingState), case 'SesterlStdlib.List':'filter'(fun(S1907W) -> 'SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1907W)), S1902UserId) end, S1906Members0) of [] -> sesterl_internal_prim:'return'('error'); [S1908W | _] -> begin S1909User = maps:get(user, S1908W), begin S1915Acc = 'SesterlStdlib.List':'foldl_effect'(fun(S1910Acc, S1911W0) -> begin S1914W1 = case 'SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1911W0)), S1902UserId) of true -> begin {'ok', ok} = case maps:get(connection, S1911W0) of {'connected', _, _} -> sesterl_internal_prim:'return'({'ok', ok}); {'disconnected', S1912Timer} -> 'Tianjiupai.RoomServer.Callback':'cancel_disconnection_timer'(S1912Timer, S1902UserId, <<"waiting"/utf8>>) end, begin S1913WsMref = 'Tianjiupai.WebSocketHandler':'monitor'(S1903WsProc), sesterl_internal_prim:'return'(maps:put(connection, {'connected', S1903WsProc, S1913WsMref}, S1911W0)) end end; false -> sesterl_internal_prim:'return'(S1911W0) end, sesterl_internal_prim:'return'([S1914W1 | S1910Acc]) end end, [], S1906Members0), begin S1916Members1 = 'SesterlStdlib.List':'reverse'(S1915Acc), begin S1917UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids_from_list'(S1916Members1, S1902UserId), sesterl_internal_prim:'return'({'ok', {S1909User, S1917UserIdsForNotification, {'internal_waiting', #{members => S1916Members1}}}}) end end end end end end; {'internal_playing', S1918GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1918GameState, S1902UserId) of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', {S1919Seat, S1920P0}} -> begin {'meta', S1921Meta} = maps:get(meta, S1918GameState), begin S1922Players0 = maps:get(players, S1921Meta), begin {'ok', ok} = case maps:get(connection, S1920P0) of {'connected', _, _} -> begin _ = begin S3160 = 'Tianjiupai.Logger':'debug'({"no timer (playing, seat: ~p, user_id: ~s)", 2}, {S1919Seat, S1902UserId}), S3160(<<"RoomServer.sest">>, 1239) end, sesterl_internal_prim:'return'({'ok', ok}) end; {'disconnected', S1923Timer} -> 'Tianjiupai.RoomServer.Callback':'cancel_disconnection_timer'(S1923Timer, S1902UserId, <<"playing"/utf8>>) end, begin S1924WsMref = 'Tianjiupai.WebSocketHandler':'monitor'(S1903WsProc), begin S1925P1 = maps:put(connection, {'connected', S1903WsProc, S1924WsMref}, S1920P0), begin S1926Players1 = 'Tianjiupai.Quad':'update'(S1919Seat, {'ok', S1925P1}, S1922Players0), begin S1927UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids_from_quad'(S1926Players1, S1902UserId), begin S1928GameState = maps:put(meta, {'meta', maps:put(players, S1926Players1, S1921Meta)}, S1918GameState), sesterl_internal_prim:'return'({'ok', {maps:get(user, S1925P1), S1927UserIdsForNotification, {'internal_playing', S1928GameState}}}) end end end end end end end end end end, case S1929Opt of 'error' -> 'Tianjiupai.RoomServer.Callback':'no_reply'(S1904State); {'ok', {S1930User, S1931UserIdsForNotification, S1932RoomState}} -> begin S1933Connection = #{is_connected => true, user => S1930User}, begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1931UserIdsForNotification, [{'notify_connection', S1933Connection} | []]), begin S1934State = maps:put(reversed_logs, [{'log_connection', S1933Connection} | maps:get(reversed_logs, S1904State)], maps:put(room_state, S1932RoomState, S1904State)), 'Tianjiupai.RoomServer.Callback':'no_reply'(S1934State) end end end end end.
      send_room_deletion_to_user_server(UserId) ->
          try
              _ = 'Tianjiupai.User':set_room(UserId, error),
              ok
          catch
              _:_ -> ok
          end.
    
'handle_disconnection_timeout'(S1937UserId, S1938State) -> begin _ = begin S3162 = 'Tianjiupai.Logger':'info'({"disconnection timeout (user_id: ~s)", 1}, {S1937UserId}), S3162(<<"RoomServer.sest">>, 1287) end, begin S1939RoomState0 = maps:get(room_state, S1938State), begin S1957Opt = case S1939RoomState0 of {'internal_waiting', S1940WaitingState} -> begin S1941WaitingMembers0 = maps:get(members, S1940WaitingState), case 'SesterlStdlib.List':'filter'(fun(S1942W) -> 'SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1942W)), S1937UserId) end, S1941WaitingMembers0) of [] -> sesterl_internal_prim:'return'('error'); [S1943W | _] -> begin _ = 'Tianjiupai.RoomServer.Callback':'send_room_deletion_to_user_server'(S1937UserId), begin S1944User = maps:get(user, S1943W), begin S1946WaitingMembers1 = 'SesterlStdlib.List':'filter'(fun(S1945W) -> 'SesterlStdlib.Bool':'not'('SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1945W)), S1937UserId)) end, S1941WaitingMembers0), begin S1947UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids_from_list'(S1941WaitingMembers0, S1937UserId), begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1947UserIdsForNotification, [{'notify_exited', S1944User} | []]), sesterl_internal_prim:'return'({'ok', {S1944User, {'internal_waiting', maps:put(members, S1946WaitingMembers1, S1940WaitingState)}}}) end end end end end end end; {'internal_playing', S1948GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1948GameState, S1937UserId) of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', {S1949Seat, S1950Player}} -> begin _ = 'Tianjiupai.RoomServer.Callback':'send_room_deletion_to_user_server'(S1937UserId), begin {'meta', S1951Meta0} = maps:get(meta, S1948GameState), begin S1952Players0 = maps:get(players, S1951Meta0), begin S1953User = maps:get(user, S1950Player), begin S1954UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids'(S1948GameState, S1949Seat), begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1954UserIdsForNotification, [{'notify_exited', S1953User} | []]), begin S1955Players1 = 'Tianjiupai.Quad':'update'(S1949Seat, 'error', S1952Players0), begin S1956GameState = maps:put(meta, {'meta', maps:put(players, S1955Players1, S1951Meta0)}, S1948GameState), sesterl_internal_prim:'return'({'ok', {S1953User, {'internal_playing', S1956GameState}}}) end end end end end end end end end end, begin S1960State = case S1957Opt of {'ok', {S1958User, S1959RoomState1}} -> maps:put(room_state, S1959RoomState1, maps:put(reversed_logs, [{'log_exited', S1958User} | maps:get(reversed_logs, S1938State)], S1938State)); 'error' -> S1938State end, 'Tianjiupai.RoomServer.Callback':'no_reply'(S1960State) end end end end.
'update_sync'(S1962UserId, S1963State) -> case maps:get(room_state, S1963State) of {'internal_waiting', _} -> sesterl_internal_prim:'return'(S1963State); {'internal_playing', S1964GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1964GameState, S1962UserId) of 'error' -> sesterl_internal_prim:'return'(S1963State); {'ok', {S1965Seat, _}} -> case maps:get(sync, S1964GameState) of 'waiting_input' -> sesterl_internal_prim:'return'(S1963State); {'waiting_sync', S1966SyncQuad} -> begin S1967SyncQuad = 'Tianjiupai.Quad':'update'(S1965Seat, true, S1966SyncQuad), case 'Tianjiupai.Quad':'decompose'(S1967SyncQuad) of {true, true, true, true} -> begin S1968UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids'(S1964GameState, S1965Seat), begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1968UserIdsForNotification, ['notify_next_step' | []]), begin S1969GameState = maps:put(sync, 'waiting_input', S1964GameState), sesterl_internal_prim:'return'(maps:put(room_state, {'internal_playing', S1969GameState}, S1963State)) end end end; _ -> begin S1970GameState = maps:put(sync, {'waiting_sync', S1967SyncQuad}, S1964GameState), sesterl_internal_prim:'return'(maps:put(room_state, {'internal_playing', S1970GameState}, S1963State)) end end end end end end.
'handle_call'(S1972Req, _, S1973State) -> case S1972Req of 'get_whole_state' -> begin S1974WholeState = 'Tianjiupai.RoomServer.Callback':'make_whole_room_state'(S1973State), 'Tianjiupai.RoomServer.Callback':'reply'({'whole_state', S1974WholeState}, S1973State) end; {'get_personal_state', S1975UserId} -> begin S1976State = 'Tianjiupai.RoomServer.Callback':'update_sync'(S1975UserId, S1973State), begin S1977PersonalStateOpt = 'Tianjiupai.RoomServer.Callback':'make_personal_state'(S1976State, S1975UserId), 'Tianjiupai.RoomServer.Callback':'reply'({'personal_state', S1977PersonalStateOpt}, S1976State) end end; {'send_chat', S1978User, S1979Text} -> 'Tianjiupai.RoomServer.Callback':'handle_send_chat'(S1978User, S1979Text, S1973State); {'attend', S1980User, S1981WsProc} -> 'Tianjiupai.RoomServer.Callback':'handle_attend'(S1980User, S1981WsProc, S1973State); {'exit', S1982UserId} -> 'Tianjiupai.RoomServer.Callback':'handle_exit'(S1982UserId, S1973State); {'submit', S1983UserId, S1984Cards} -> 'Tianjiupai.RoomServer.Callback':'handle_submit'(S1983UserId, S1984Cards, S1973State) end.
'handle_cast'(S1986Msg, S1987State) -> case S1986Msg of {'ack', S1988UserId, S1989SnapshotId} -> 'Tianjiupai.RoomServer.Callback':'handle_ack'(S1988UserId, S1989SnapshotId, S1987State); {'require_next_inning', S1990UserId, S1991SnapshotId} -> 'Tianjiupai.RoomServer.Callback':'handle_require_next_inning'(S1990UserId, S1991SnapshotId, S1987State); {'set_connection', S1992UserId, S1993WsProc} -> 'Tianjiupai.RoomServer.Callback':'handle_set_connection'(S1992UserId, S1993WsProc, S1987State) end.
'handle_timeout'(S1995State) -> begin _ = begin S3167 = 'Tianjiupai.Logger':'debug'({"timeout (room_id: ~s)", 1}, {maps:get(room_id, maps:get(settings, S1995State))}), S3167(<<"RoomServer.sest">>, 1416) end, 'Tianjiupai.RoomServer.Callback':'stop'(S1995State) end.
'handle_down'(S1997Mref, _, S1998Reason, S1999State) -> case maps:get(room_state, S1999State) of {'internal_waiting', S2000Waiting} -> begin S2001WaitingMembers0 = maps:get(members, S2000Waiting), begin {S2013PlayerAcc, S2014LogAcc} = 'SesterlStdlib.List':'foldl_effect'(fun({S2002PlayerAcc, S2003LogAcc}, S2004Player) -> case maps:get(connection, S2004Player) of {'connected', _, S2005MrefWs} -> case 'SesterlStdlib.MonitorRef':'equal'(S2005MrefWs, S1997Mref) of true -> begin S2006User = maps:get(user, S2004Player), begin S2007UserId = maps:get(user_id, S2006User), begin _ = begin S3169 = 'Tianjiupai.Logger':'info'({"WebSocket connection closed (user_id: ~s, reason: ~p)", 2}, {S2007UserId, S1998Reason}), S3169(<<"RoomServer.sest">>, 1432) end, begin {'ok', S2008Timer} = 'Tianjiupai.RoomServer.Callback':'set_disconnection_timer'(S2007UserId, <<"waiting"/utf8>>), begin S2009UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids_from_list'(S2001WaitingMembers0, S2007UserId), begin S2010Connection = #{is_connected => false, user => S2006User}, begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S2009UserIdsForNotification, [{'notify_connection', S2010Connection} | []]), begin S2011PlayerAcc = [maps:put(connection, {'disconnected', S2008Timer}, S2004Player) | S2002PlayerAcc], begin S2012LogAcc = [{'log_connection', S2010Connection} | S2003LogAcc], sesterl_internal_prim:'return'({S2011PlayerAcc, S2012LogAcc}) end end end end end end end end end; false -> sesterl_internal_prim:'return'({[S2004Player | S2002PlayerAcc], S2003LogAcc}) end; {'disconnected', _} -> sesterl_internal_prim:'return'({[S2004Player | S2002PlayerAcc], S2003LogAcc}) end end, {[], maps:get(reversed_logs, S1999State)}, S2001WaitingMembers0), begin S2015Players = 'SesterlStdlib.List':'reverse'(S2013PlayerAcc), 'Tianjiupai.RoomServer.Callback':'no_reply'(maps:put(room_state, {'internal_waiting', #{members => S2015Players}}, maps:put(reversed_logs, S2014LogAcc, S1999State))) end end end; {'internal_playing', S2016GameState} -> begin {'meta', S2017Meta} = maps:get(meta, S2016GameState), begin S2018Players0 = maps:get(players, S2017Meta), begin {S2030LogAcc, S2031Players} = 'Tianjiupai.Quad':'map_fold_effect'(fun(S2019LogAcc, S2020PlayerOpt) -> case S2020PlayerOpt of 'error' -> sesterl_internal_prim:'return'({S2019LogAcc, 'error'}); {'ok', S2021Player} -> case maps:get(connection, S2021Player) of {'connected', _, S2022MrefWs} -> case 'SesterlStdlib.MonitorRef':'equal'(S2022MrefWs, S1997Mref) of true -> begin S2023User = maps:get(user, S2021Player), begin S2024UserId = maps:get(user_id, S2023User), begin _ = begin S3170 = 'Tianjiupai.Logger':'info'({"WebSocket connection closed (user_id: ~s, reason: ~p)", 2}, {S2024UserId, S1998Reason}), S3170(<<"RoomServer.sest">>, 1478) end, begin {'ok', S2025Timer} = 'Tianjiupai.RoomServer.Callback':'set_disconnection_timer'(maps:get(user_id, maps:get(user, S2021Player)), <<"playing"/utf8>>), begin S2026UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids_from_quad'(S2018Players0, S2024UserId), begin S2027Connection = #{is_connected => false, user => S2023User}, begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S2026UserIdsForNotification, [{'notify_connection', S2027Connection} | []]), begin S2028Player = maps:put(connection, {'disconnected', S2025Timer}, S2021Player), begin S2029LogAcc = [{'log_connection', S2027Connection} | S2019LogAcc], sesterl_internal_prim:'return'({S2029LogAcc, {'ok', S2028Player}}) end end end end end end end end end; false -> sesterl_internal_prim:'return'({S2019LogAcc, S2020PlayerOpt}) end; {'disconnected', _} -> sesterl_internal_prim:'return'({S2019LogAcc, S2020PlayerOpt}) end end end, maps:get(reversed_logs, S1999State), S2018Players0), begin S2032GameState = maps:put(meta, {'meta', maps:put(players, S2031Players, S2017Meta)}, S2016GameState), 'Tianjiupai.RoomServer.Callback':'no_reply'(maps:put(room_state, {'internal_playing', S2032GameState}, maps:put(reversed_logs, S2030LogAcc, S1999State))) end end end end end.
'handle_info'(S2034Info, S2035State) -> case S2034Info of {'disconnection_timeout', S2036UserId} -> 'Tianjiupai.RoomServer.Callback':'handle_disconnection_timeout'(S2036UserId, S2035State); _ -> begin _ = begin S3172 = 'Tianjiupai.Logger':'warning'({"unexpected info (info: ~p, state: ~p)", 2}, {S2034Info, S2035State}), S3172(<<"RoomServer.sest">>, 1515) end, 'Tianjiupai.RoomServer.Callback':'no_reply'(S2035State) end end.
'terminate'(S2038Reason, S2039State) -> begin _ = begin S3174 = 'Tianjiupai.Logger':'debug'({"terminate (reason: ~p, room_id: ~s)", 2}, {S2038Reason, maps:get(room_id, maps:get(settings, S2039State))}), S3174(<<"RoomServer.sest">>, 1520) end, sesterl_internal_prim:'return'(ok) end.
