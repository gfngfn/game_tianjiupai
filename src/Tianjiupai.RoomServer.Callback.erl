-module('Tianjiupai.RoomServer.Callback').
-export(['init'/1, 'get_members_from_state'/1, 'make_whole_room_state'/1, 'find_user_seat'/2, 'the_other_seats'/1, 'the_other_players'/2, 'make_observable_game_state'/2, 'make_observable'/2, 'make_personal_state'/2, 'make_initial_sync'/0, 'start_new_inning'/2, 'warn_notification_failure'/3, 'notify'/2, 'notify_for_each'/2, 'find_empty_seat'/1, 'handle_send_chat'/3, 'is_none'/1, 'handle_attend'/2, 'handle_exit'/2, 'make_winner_diff'/1, 'update_score'/2, 'deal_with_trick_end'/3, 'make_loser_updates_when_parent_wins'/4, 'make_loser_updates_when_child_wins'/5, 'deal_with_inning_end'/4, 'handle_submit_impl'/3, 'handle_submit'/3, 'handle_ack'/3, 'handle_require_next_inning'/3, 'handle_set_connection_status'/3, 'send_room_deletion_to_user_server'/1, 'handle_disconnection_timeout'/2, 'update_sync'/2, 'handle_call'/3, 'handle_cast'/2, 'handle_info'/2, 'terminate'/1]).
'init'(S1332InitArg) -> begin {S1333RoomId, S1334RoomName} = S1332InitArg, begin S1335Settings = #{room_id => S1333RoomId, room_name => S1334RoomName}, 'SesterlStdlib.GenServer':'init_ok'(#{reversed_logs => [], room_state => {'internal_waiting', #{members => []}}, settings => S1335Settings}) end end.
'get_members_from_state'(S1337RoomState) -> case S1337RoomState of {'internal_waiting', S1338WaitingState} -> {false, 'SesterlStdlib.List':'map'(fun(S1339W) -> maps:get(user, S1339W) end, maps:get(members, S1338WaitingState))}; {'internal_playing', S1340WholeGameState} -> begin S1341PlayerOpts = 'Tianjiupai.Quad':'to_list'(maps:get(players, maps:get(meta, S1340WholeGameState))), begin S1344Members = 'SesterlStdlib.List':'filter_map'(fun(S1342PlayerOpt) -> case S1342PlayerOpt of 'error' -> 'error'; {'ok', S1343Player} -> {'ok', maps:get(user, S1343Player)} end end, S1341PlayerOpts), {true, S1344Members} end end end.
'make_whole_room_state'(S1346State) -> begin S1347Settings = maps:get(settings, S1346State), begin {S1348IsPlaying, S1349Members} = 'Tianjiupai.RoomServer.Callback':'get_members_from_state'(maps:get(room_state, S1346State)), #{is_playing => S1348IsPlaying, members => S1349Members, room => #{room_id => maps:get(room_id, S1347Settings), room_name => maps:get(room_name, S1347Settings)}} end end.
'find_user_seat'(S1351GameState, S1352UserId) -> begin S1355Opt = 'Tianjiupai.Quad':'find'(fun(S1353PlayerOpt) -> case S1353PlayerOpt of 'error' -> false; {'ok', S1354Player} -> 'SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1354Player)), S1352UserId) end end, maps:get(players, maps:get(meta, S1351GameState))), 'SesterlStdlib.Option':'map'(fun(S1356Pair) -> begin {S1357Seat, _} = S1356Pair, S1357Seat end end, S1355Opt) end.
'the_other_seats'(S1359Seat) -> case S1359Seat of 'seat_a' -> ['seat_b' | ['seat_c' | ['seat_d' | []]]]; 'seat_b' -> ['seat_c' | ['seat_d' | ['seat_a' | []]]]; 'seat_c' -> ['seat_d' | ['seat_a' | ['seat_b' | []]]]; 'seat_d' -> ['seat_a' | ['seat_b' | ['seat_c' | []]]] end.
'the_other_players'(S1361GameState, S1362Seat) -> begin {S1365Uo0, S1366Uo1, S1367Uo2, S1368Uo3} = 'Tianjiupai.Quad':'decompose'('Tianjiupai.Quad':'map'(fun(S1363PlayerOpt) -> 'SesterlStdlib.Option':'map'(fun(S1364Player) -> maps:get(user_id, maps:get(user, S1364Player)) end, S1363PlayerOpt) end, maps:get(players, maps:get(meta, S1361GameState)))), case S1362Seat of 'seat_a' -> [S1366Uo1 | [S1367Uo2 | [S1368Uo3 | []]]]; 'seat_b' -> [S1367Uo2 | [S1368Uo3 | [S1365Uo0 | []]]]; 'seat_c' -> [S1368Uo3 | [S1365Uo0 | [S1366Uo1 | []]]]; 'seat_d' -> [S1365Uo0 | [S1366Uo1 | [S1367Uo2 | []]]] end end.
'make_observable_game_state'(S1370GameState, S1371UserId) -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1370GameState, S1371UserId) of 'error' -> 'error'; {'ok', S1372Seat} -> begin S1373Synchronizing = case maps:get(sync, S1370GameState) of 'waiting_input' -> false; {'waiting_sync', _} -> true end, begin S1376ObservableInning = case maps:get(inning, S1370GameState) of {'during_inning', S1374Inning} -> {'observable_during_inning', 'Tianjiupai.Inning':'observe'(S1372Seat, S1374Inning)}; {'inning_end', S1375GainsQuad, _} -> {'observable_inning_end', S1375GainsQuad} end, {'ok', #{meta => maps:get(meta, S1370GameState), observable_inning => S1376ObservableInning, snapshot_id => maps:get(snapshot_id, S1370GameState), synchronizing => S1373Synchronizing}} end end end.
'make_observable'(S1378RoomState, S1379UserId) -> case S1378RoomState of {'internal_waiting', S1380WaitingState} -> begin S1382Members = 'SesterlStdlib.List':'map'(fun(S1381W) -> maps:get(user, S1381W) end, maps:get(members, S1380WaitingState)), {'ok', {'waiting_start', S1382Members}} end; {'internal_playing', S1383GameState} -> 'SesterlStdlib.Option':'map'(fun(S1384Obs) -> {'playing_game', S1384Obs} end, 'Tianjiupai.RoomServer.Callback':'make_observable_game_state'(S1383GameState, S1379UserId)) end.
'make_personal_state'(S1386State, S1387UserId) -> begin S1388Settings = maps:get(settings, S1386State), case 'Tianjiupai.RoomServer.Callback':'make_observable'(maps:get(room_state, S1386State), S1387UserId) of 'error' -> 'error'; {'ok', S1389Observable} -> {'ok', #{game => S1389Observable, logs => 'SesterlStdlib.List':'reverse'(maps:get(reversed_logs, S1386State)), room => #{room_id => maps:get(room_id, S1388Settings), room_name => maps:get(room_name, S1388Settings)}}} end end.
'make_initial_sync'() -> 'Tianjiupai.Quad':'make'({false, false, false, false}).
'start_new_inning'(S1392GameMeta, S1393Timers) -> begin S1394NextParentSeat = maps:get(parent_seat, S1392GameMeta), begin S1395Inning = 'Tianjiupai.Inning':'start'(S1394NextParentSeat), begin S1396SnapshotId = 'Tianjiupai.SnapshotId':'generate'(), sesterl_internal_prim:'return'(#{inning => {'during_inning', S1395Inning}, meta => S1392GameMeta, snapshot_id => S1396SnapshotId, sync => {'waiting_sync', 'Tianjiupai.RoomServer.Callback':'make_initial_sync'()}, timers => S1393Timers}) end end end.
'warn_notification_failure'(S1398Reason, S1399UserId, S1400Notifications) -> begin S2607 = 'Tianjiupai.Logger':'warning'({"notify_log failed (reason: ~p, to: ~p, notifications: ~p)", 3}, {S1398Reason, S1399UserId, S1400Notifications}), S2607(<<"RoomServer.sest">>, 274) end.
      notify(UserId, Notifications) ->
          case tianjiupai_websocket:notify(UserId, Notifications) of
              ok ->
                  ok;
              {error, Reason} ->
                  ?MODULE:warn_notification_failure(Reason, UserId, Notifications),
                  ok
          end.
    
'notify_for_each'(S1403UserIds, S1404Logs) -> 'SesterlStdlib.List':'for_each'(fun(S1405UserId) -> 'Tianjiupai.RoomServer.Callback':'notify'(S1405UserId, S1404Logs) end, S1403UserIds).
'find_empty_seat'(S1407GameState) -> 'SesterlStdlib.Option':'map'(fun(S1408Pair) -> begin {S1409Seat, _} = S1408Pair, S1409Seat end end, 'Tianjiupai.Quad':'find'(fun(S1410PlayerOpt) -> case S1410PlayerOpt of {'ok', _} -> false; 'error' -> true end end, maps:get(players, maps:get(meta, S1407GameState)))).
'handle_send_chat'(S1412User, S1413Text, S1414State) -> begin {_, S1415Members} = 'Tianjiupai.RoomServer.Callback':'get_members_from_state'(maps:get(room_state, S1414State)), begin S1416Comment = #{from => S1412User, text => S1413Text}, begin S1419Dummy = begin S1418UserIds = 'SesterlStdlib.List':'map'(fun(S1417U) -> maps:get(user_id, S1417U) end, S1415Members), 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1418UserIds, [{'notify_comment', S1416Comment} | []]) end, 'SesterlStdlib.GenServer':'reply'('chat_sent', maps:put(reversed_logs, [{'log_comment', S1416Comment} | maps:get(reversed_logs, S1414State)], S1414State)) end end end.
'is_none'(S1421X) -> case S1421X of 'error' -> true; {'ok', _} -> false end.
'handle_attend'(S1423User, S1424State) -> begin S1425UserId = maps:get(user_id, S1423User), case maps:get(room_state, S1424State) of {'internal_playing', S1426GameState0} -> case 'Tianjiupai.RoomServer.Callback':'find_empty_seat'(S1426GameState0) of 'error' -> 'SesterlStdlib.GenServer':'reply'({'attended', 'error'}, S1424State); {'ok', S1427Seat} -> begin S1428GameMeta0 = maps:get(meta, S1426GameState0), begin S1429Player = #{is_connected => true, user => S1423User}, begin S1430Players1 = 'Tianjiupai.Quad':'update'(S1427Seat, {'ok', S1429Player}, maps:get(players, S1428GameMeta0)), begin S1431GameState1 = maps:put(meta, maps:put(players, S1430Players1, S1428GameMeta0), S1426GameState0), begin S1434UserIds = begin S1432UserIdOpts = 'Tianjiupai.RoomServer.Callback':'the_other_players'(S1431GameState1, S1427Seat), 'SesterlStdlib.List':'filter_map'(fun(S1433UOpt) -> S1433UOpt end, S1432UserIdOpts) end, begin S1441GameState2 = case maps:get(sync, S1431GameState1) of 'waiting_input' -> begin _ = begin S2613 = 'Tianjiupai.Logger':'info'({"attend -> waiting input (seat: ~p, user_id: ~p)", 2}, {S1427Seat, S1425UserId}), S2613(<<"RoomServer.sest">>, 340) end, begin S1435Dummy = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1434UserIds, [{'notify_entered_midway', #{seat => S1427Seat, user => S1423User}} | []]), sesterl_internal_prim:'return'(S1431GameState1) end end; {'waiting_sync', S1436SyncQuad0} -> case 'Tianjiupai.Quad':'access'(S1427Seat, S1436SyncQuad0) of true -> begin _ = begin S2614 = 'Tianjiupai.Logger':'info'({"attend -> no need to sync (seat: ~p, user_id: ~p, sync_quad: ~p)", 3}, {S1427Seat, S1425UserId, S1436SyncQuad0}), S2614(<<"RoomServer.sest">>, 355) end, begin S1437Dummy = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1434UserIds, [{'notify_entered_midway', #{seat => S1427Seat, user => S1423User}} | []]), sesterl_internal_prim:'return'(S1431GameState1) end end; false -> begin S1438SyncQuad1 = 'Tianjiupai.Quad':'update'(S1427Seat, true, S1436SyncQuad0), begin _ = begin S2615 = 'Tianjiupai.Logger':'info'({"attend -> sync update (seat: ~p, user_id: ~p, sync_quad: ~p)", 3}, {S1427Seat, S1425UserId, S1438SyncQuad1}), S2615(<<"RoomServer.sest">>, 369) end, case 'Tianjiupai.Quad':'decompose'(S1438SyncQuad1) of {true, true, true, true} -> begin S1439Dummy = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1434UserIds, [{'notify_entered_midway', #{seat => S1427Seat, user => S1423User}} | ['notify_next_step' | []]]), sesterl_internal_prim:'return'(maps:put(sync, 'waiting_input', S1431GameState1)) end; _ -> begin S1440Dummy = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1434UserIds, [{'notify_entered_midway', #{seat => S1427Seat, user => S1423User}} | []]), sesterl_internal_prim:'return'(maps:put(sync, {'waiting_sync', S1438SyncQuad1}, S1431GameState1)) end end end end end end, begin S1442State = maps:put(reversed_logs, [{'log_entered', S1423User} | maps:get(reversed_logs, S1424State)], maps:put(room_state, {'internal_playing', S1441GameState2}, S1424State)), begin {'ok', S1443PersonalState} = 'Tianjiupai.RoomServer.Callback':'make_personal_state'(S1442State, S1425UserId), 'SesterlStdlib.GenServer':'reply'({'attended', {'ok', S1443PersonalState}}, S1442State) end end end end end end end end end; {'internal_waiting', S1444WaitingState} -> begin S1445Members = maps:get(members, S1444WaitingState), case 'SesterlStdlib.List':'any'(fun(S1446W) -> 'SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1446W)), S1425UserId) end, S1445Members) of true -> begin {'ok', S1447PersonalState} = 'Tianjiupai.RoomServer.Callback':'make_personal_state'(S1424State, S1425UserId), 'SesterlStdlib.GenServer':'reply'({'attended', {'ok', S1447PersonalState}}, S1424State) end; false -> begin S1448LogEnter = {'log_entered', S1423User}, begin S1449NotifEnter = {'notify_entered', S1423User}, case S1445Members of [S1450W0 | [S1451W1 | [S1452W2 | _]]] -> begin S1453U0 = maps:get(user, S1450W0), begin S1454U1 = maps:get(user, S1451W1), begin S1455U2 = maps:get(user, S1452W2), begin S1460PlayerQuad = begin S1456Player0 = #{is_connected => 'Tianjiupai.RoomServer.Callback':'is_none'(maps:get(disconnected, S1450W0)), user => S1453U0}, begin S1457Player1 = #{is_connected => 'Tianjiupai.RoomServer.Callback':'is_none'(maps:get(disconnected, S1451W1)), user => S1454U1}, begin S1458Player2 = #{is_connected => 'Tianjiupai.RoomServer.Callback':'is_none'(maps:get(disconnected, S1452W2)), user => S1455U2}, begin S1459Player3 = #{is_connected => true, user => S1423User}, 'Tianjiupai.Quad':'make'({{'ok', S1456Player0}, {'ok', S1457Player1}, {'ok', S1458Player2}, {'ok', S1459Player3}}) end end end end, begin S1461ParentSeat = 'seat_a', begin S1462GameMeta = #{inning_index => 0, num_consecutives => 0, parent_seat => S1461ParentSeat, players => S1460PlayerQuad, scores => 'Tianjiupai.Quad':'make'({0, 0, 0, 0})}, begin S1463GameIndex = #{inning_index => 0, num_consecutives => 0}, begin S1464TimerQuad = 'Tianjiupai.Quad':'make'({'error', 'error', 'error', 'error'}), begin S1465GameState = 'Tianjiupai.RoomServer.Callback':'start_new_inning'(S1462GameMeta, S1464TimerQuad), begin S1468Dummy = 'SesterlStdlib.List':'for_each'(fun(S1466U) -> begin {'ok', S1467Obs} = 'Tianjiupai.RoomServer.Callback':'make_observable_game_state'(S1465GameState, S1466U), 'Tianjiupai.RoomServer.Callback':'notify'(S1466U, [S1449NotifEnter | [{'notify_game_start', S1467Obs} | []]]) end end, [maps:get(user_id, S1453U0) | [maps:get(user_id, S1454U1) | [maps:get(user_id, S1455U2) | []]]]), begin S1469State = maps:put(reversed_logs, [{'log_game_start', S1463GameIndex} | [S1448LogEnter | maps:get(reversed_logs, S1424State)]], maps:put(room_state, {'internal_playing', S1465GameState}, S1424State)), begin {'ok', S1470PersonalState} = 'Tianjiupai.RoomServer.Callback':'make_personal_state'(S1469State, S1425UserId), 'SesterlStdlib.GenServer':'reply'({'attended', {'ok', S1470PersonalState}}, S1469State) end end end end end end end end end end end end; _ -> begin S1471W = #{disconnected => 'error', user => S1423User}, begin S1472WaitingState = maps:put(members, 'SesterlStdlib.List':'append'(S1445Members, [S1471W | []]), S1444WaitingState), begin S1474Dummy = 'Tianjiupai.RoomServer.Callback':'notify_for_each'('SesterlStdlib.List':'map'(fun(S1473W) -> maps:get(user_id, maps:get(user, S1473W)) end, S1445Members), [S1449NotifEnter | []]), begin S1475State = maps:put(reversed_logs, [S1448LogEnter | maps:get(reversed_logs, S1424State)], maps:put(room_state, {'internal_waiting', S1472WaitingState}, S1424State)), begin {'ok', S1476PersonalState} = 'Tianjiupai.RoomServer.Callback':'make_personal_state'(S1475State, S1425UserId), 'SesterlStdlib.GenServer':'reply'({'attended', {'ok', S1476PersonalState}}, S1475State) end end end end end end end end end end end end.
'handle_exit'(S1478UserId, S1479State) -> begin S1497Opt = case maps:get(room_state, S1479State) of {'internal_playing', S1480GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1480GameState, S1478UserId) of 'error' -> 'error'; {'ok', S1481Seat} -> begin S1482Meta0 = maps:get(meta, S1480GameState), begin S1483Players0 = maps:get(players, S1482Meta0), begin {'ok', S1484Player} = 'Tianjiupai.Quad':'access'(S1481Seat, S1483Players0), begin S1485Players1 = 'Tianjiupai.Quad':'update'(S1481Seat, 'error', S1483Players0), begin S1488UserIdsForNotification = begin S1486UserIdOpts = 'Tianjiupai.RoomServer.Callback':'the_other_players'(S1480GameState, S1481Seat), 'SesterlStdlib.List':'filter_map'(fun(S1487UOpt) -> S1487UOpt end, S1486UserIdOpts) end, {'ok', {maps:get(user, S1484Player), S1488UserIdsForNotification, {'internal_playing', maps:put(meta, maps:put(players, S1485Players1, S1482Meta0), S1480GameState)}}} end end end end end end; {'internal_waiting', S1489WaitingState} -> begin S1490Members0 = maps:get(members, S1489WaitingState), case 'SesterlStdlib.List':'filter'(fun(S1491W0) -> 'SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1491W0)), S1478UserId) end, S1490Members0) of [] -> 'error'; [S1492W | _] -> begin S1494Members1 = 'SesterlStdlib.List':'filter'(fun(S1493W0) -> 'SesterlStdlib.Bool':'not'('SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1493W0)), S1478UserId)) end, S1490Members0), begin S1496UserIdsForNotification = 'SesterlStdlib.List':'map'(fun(S1495W) -> maps:get(user_id, maps:get(user, S1495W)) end, S1494Members1), {'ok', {maps:get(user, S1492W), S1496UserIdsForNotification, {'internal_waiting', maps:put(members, S1494Members1, S1489WaitingState)}}} end end end end end, case S1497Opt of 'error' -> 'SesterlStdlib.GenServer':'reply'({'exited', false}, S1479State); {'ok', {S1498User, S1499UserIdsForNotification, S1500RoomState}} -> begin S1501Dummy = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1499UserIdsForNotification, [{'notify_exited', S1498User} | []]), begin S1502State = maps:put(reversed_logs, [{'log_exited', S1498User} | maps:get(reversed_logs, S1479State)], maps:put(room_state, S1500RoomState, S1479State)), 'SesterlStdlib.GenServer':'reply'({'exited', true}, S1502State) end end end end.
'make_winner_diff'(S1504Losers) -> begin S1508LoserDiffSum = 'SesterlStdlib.List':'foldl'(fun(S1505Acc, S1506Loser) -> begin {_, S1507LoserDiff} = S1506Loser, (S1505Acc + S1507LoserDiff) end end, 0, S1504Losers), (0 - S1508LoserDiffSum) end.
'update_score'(S1510Scores, S1511Updates) -> 'SesterlStdlib.List':'foldl'(fun(S1512Acc, S1513Update) -> begin {S1514Scores, S1515Diffs} = S1512Acc, begin {S1516Seat, S1517Diff} = S1513Update, begin S1518Score = 'Tianjiupai.Quad':'access'(S1516Seat, S1514Scores), {'Tianjiupai.Quad':'update'(S1516Seat, (S1518Score + S1517Diff), S1514Scores), 'Tianjiupai.Quad':'update'(S1516Seat, S1517Diff, S1515Diffs)} end end end end, {S1510Scores, 'Tianjiupai.Quad':'make'({0, 0, 0, 0})}, S1511Updates).
'deal_with_trick_end'(S1520GameMeta, S1521WinnerSeat, S1522SpecialOpt) -> case S1522SpecialOpt of 'error' -> {S1520GameMeta, 'error'}; {'ok', S1523Special} -> begin S1524LoserSeats = 'Tianjiupai.RoomServer.Callback':'the_other_seats'(S1521WinnerSeat), begin S1525NumConsecutives = maps:get(num_consecutives, S1520GameMeta), begin S1526ParentSeat = maps:get(parent_seat, S1520GameMeta), begin S1531Losers = case 'Tianjiupai.Quad':'seat_equal'(S1521WinnerSeat, S1526ParentSeat) of true -> 'SesterlStdlib.List':'map'(fun(S1527LoserSeat) -> begin S1528LoserDiff = ((0 - 2) * (S1525NumConsecutives + 1)), {S1527LoserSeat, S1528LoserDiff} end end, S1524LoserSeats); false -> 'SesterlStdlib.List':'map'(fun(S1529LoserSeat) -> begin S1530LoserDiff = case 'Tianjiupai.Quad':'seat_equal'(S1529LoserSeat, S1526ParentSeat) of true -> ((0 - 2) * (S1525NumConsecutives + 1)); false -> (0 - 2) end, {S1529LoserSeat, S1530LoserDiff} end end, S1524LoserSeats) end, begin S1532WinnerDiff = 'Tianjiupai.RoomServer.Callback':'make_winner_diff'(S1531Losers), begin {S1533Scores, S1534Diffs} = 'Tianjiupai.RoomServer.Callback':'update_score'(maps:get(scores, S1520GameMeta), [{S1521WinnerSeat, S1532WinnerDiff} | S1531Losers]), {maps:put(scores, S1533Scores, S1520GameMeta), {'ok', S1534Diffs}} end end end end end end end.
'make_loser_updates_when_parent_wins'(S1536NumConsecutives, S1537LoserSeats, S1538GainsQuad, S1539Coeff) -> 'SesterlStdlib.List':'map'(fun(S1540LoserSeat) -> begin S1541NumGains = 'SesterlStdlib.List':'length'('Tianjiupai.Quad':'access'(S1540LoserSeat, S1538GainsQuad)), begin S1542LoserDiff = case (S1541NumGains == 0) of true -> ((0 - 5) * ((S1536NumConsecutives + 1) * S1539Coeff)); false -> ((S1541NumGains - 4) * ((S1536NumConsecutives + 1) * S1539Coeff)) end, {S1540LoserSeat, S1542LoserDiff} end end end, S1537LoserSeats).
'make_loser_updates_when_child_wins'(S1544NumConsecutives, S1545LoserSeats, S1546ParentSeat, S1547GainsQuad, S1548CoeffOriginal) -> 'SesterlStdlib.List':'map'(fun(S1549LoserSeat) -> begin S1550NumGains = 'SesterlStdlib.List':'length'('Tianjiupai.Quad':'access'(S1549LoserSeat, S1547GainsQuad)), begin S1552LoserDiff = begin S1551Coeff = case 'Tianjiupai.Quad':'seat_equal'(S1549LoserSeat, S1546ParentSeat) of true -> ((S1544NumConsecutives + 1) * S1548CoeffOriginal); false -> S1548CoeffOriginal end, case (S1550NumGains == 0) of true -> ((0 - 5) * S1551Coeff); false -> ((S1550NumGains - 4) * S1551Coeff) end end, {S1549LoserSeat, S1552LoserDiff} end end end, S1545LoserSeats).
'deal_with_inning_end'(S1554GameMeta, S1555WinnerSeat, S1556SpecialOpt, S1557GainsQuad) -> begin S1558LoserSeats = 'Tianjiupai.RoomServer.Callback':'the_other_seats'(S1555WinnerSeat), begin S1559NumConsecutives = maps:get(num_consecutives, S1554GameMeta), begin S1560ParentSeat = maps:get(parent_seat, S1554GameMeta), case 'Tianjiupai.Quad':'seat_equal'(S1555WinnerSeat, S1560ParentSeat) of true -> begin S1565Losers = case S1556SpecialOpt of {'ok', 'inning_end_with_bazhijie'} -> 'SesterlStdlib.List':'map'(fun(S1561LoserSeat) -> begin S1562LoserDiff = ((0 - 20) * (S1559NumConsecutives + 1)), {S1561LoserSeat, S1562LoserDiff} end end, S1558LoserSeats); {'ok', 'inning_end_with_qizhijie'} -> 'SesterlStdlib.List':'map'(fun(S1563LoserSeat) -> begin S1564LoserDiff = ((0 - 10) * (S1559NumConsecutives + 1)), {S1563LoserSeat, S1564LoserDiff} end end, S1558LoserSeats); {'ok', _} -> 'Tianjiupai.RoomServer.Callback':'make_loser_updates_when_parent_wins'(S1559NumConsecutives, S1558LoserSeats, S1557GainsQuad, 2); 'error' -> 'Tianjiupai.RoomServer.Callback':'make_loser_updates_when_parent_wins'(S1559NumConsecutives, S1558LoserSeats, S1557GainsQuad, 1) end, begin S1566WinnerDiff = 'Tianjiupai.RoomServer.Callback':'make_winner_diff'(S1565Losers), begin {S1567Scores, S1568Diffs} = 'Tianjiupai.RoomServer.Callback':'update_score'(maps:get(scores, S1554GameMeta), [{S1555WinnerSeat, S1566WinnerDiff} | S1565Losers]), {#{inning_index => maps:get(inning_index, S1554GameMeta), num_consecutives => (S1559NumConsecutives + 1), parent_seat => S1560ParentSeat, players => maps:get(players, S1554GameMeta), scores => S1567Scores}, S1568Diffs} end end end; false -> begin S1575Losers = case S1556SpecialOpt of {'ok', 'inning_end_with_bazhijie'} -> 'SesterlStdlib.List':'map'(fun(S1569LoserSeat) -> begin S1570Coeff = case 'Tianjiupai.Quad':'seat_equal'(S1569LoserSeat, S1560ParentSeat) of true -> (S1559NumConsecutives + 1); false -> 1 end, begin S1571LoserDiff = ((0 - 20) * S1570Coeff), {S1569LoserSeat, S1571LoserDiff} end end end, S1558LoserSeats); {'ok', 'inning_end_with_qizhijie'} -> 'SesterlStdlib.List':'map'(fun(S1572LoserSeat) -> begin S1573Coeff = case 'Tianjiupai.Quad':'seat_equal'(S1572LoserSeat, S1560ParentSeat) of true -> (S1559NumConsecutives + 1); false -> 1 end, begin S1574LoserDiff = ((0 - 10) * S1573Coeff), {S1572LoserSeat, S1574LoserDiff} end end end, S1558LoserSeats); {'ok', _} -> 'Tianjiupai.RoomServer.Callback':'make_loser_updates_when_child_wins'(S1559NumConsecutives, S1558LoserSeats, S1560ParentSeat, S1557GainsQuad, 2); 'error' -> 'Tianjiupai.RoomServer.Callback':'make_loser_updates_when_child_wins'(S1559NumConsecutives, S1558LoserSeats, S1560ParentSeat, S1557GainsQuad, 1) end, begin S1576WinnerDiff = 'Tianjiupai.RoomServer.Callback':'make_winner_diff'(S1575Losers), begin {S1577Scores, S1578Diffs} = 'Tianjiupai.RoomServer.Callback':'update_score'(maps:get(scores, S1554GameMeta), [{S1555WinnerSeat, S1576WinnerDiff} | S1575Losers]), {#{inning_index => (maps:get(inning_index, S1554GameMeta) + 1), num_consecutives => 1, parent_seat => S1555WinnerSeat, players => maps:get(players, S1554GameMeta), scores => S1577Scores}, S1578Diffs} end end end end end end end.
'handle_submit_impl'(S1580UserId, S1581Cards, S1582GameState) -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1582GameState, S1580UserId) of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', S1583Seat} -> case maps:get(inning, S1582GameState) of {'inning_end', _, _} -> sesterl_internal_prim:'return'('error'); {'during_inning', S1584Inning} -> case 'Tianjiupai.Inning':'submit'(S1583Seat, S1581Cards, S1584Inning) of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', {S1585SubmitResult, S1586IsFront}} -> begin S1587SnapshotId = 'Tianjiupai.SnapshotId':'generate'(), begin S1588GameMeta = maps:get(meta, S1582GameState), begin S1589Timers = maps:get(timers, S1582GameState), begin {S1610GameState, S1611LastOpt} = case S1585SubmitResult of {'continues', S1590Inning} -> {#{inning => {'during_inning', S1590Inning}, meta => S1588GameMeta, snapshot_id => S1587SnapshotId, sync => {'waiting_sync', 'Tianjiupai.RoomServer.Callback':'make_initial_sync'()}, timers => S1589Timers}, 'error'}; {'wins_trick', S1591WinnerSeat, S1592LastTable, S1593SubmitterHand, S1594SpecialOpt, S1595Inning} -> begin {S1596GameMeta, S1597DiffsOpt} = 'Tianjiupai.RoomServer.Callback':'deal_with_trick_end'(S1588GameMeta, S1591WinnerSeat, S1594SpecialOpt), begin S1600ChangesOpt = case {S1594SpecialOpt, S1597DiffsOpt} of {{'ok', S1598Special}, {'ok', S1599Diffs}} -> {'ok', #{change_reason => {'special_trick_end', S1598Special}, diffs => S1599Diffs}}; _ -> 'error' end, {#{inning => {'during_inning', S1595Inning}, meta => S1596GameMeta, snapshot_id => S1587SnapshotId, sync => {'waiting_sync', 'Tianjiupai.RoomServer.Callback':'make_initial_sync'()}, timers => S1589Timers}, {'ok', #{changes => S1600ChangesOpt, hand => S1593SubmitterHand, table => S1592LastTable}}} end end; {'wins_inning', S1601WinnerSeat, S1602LastTable, S1603GainsQuad, S1604SpecialOpt} -> begin {S1605GameMeta, S1606Diffs} = 'Tianjiupai.RoomServer.Callback':'deal_with_inning_end'(S1588GameMeta, S1601WinnerSeat, S1604SpecialOpt, S1603GainsQuad), begin S1608Reason = case S1604SpecialOpt of 'error' -> 'normal_inning_end'; {'ok', S1607Special} -> {'special_inning_end', S1607Special} end, begin S1609Changes = #{change_reason => S1608Reason, diffs => S1606Diffs}, {#{inning => {'inning_end', S1603GainsQuad, 'Tianjiupai.RoomServer.Callback':'make_initial_sync'()}, meta => S1605GameMeta, snapshot_id => S1587SnapshotId, sync => {'waiting_sync', 'Tianjiupai.RoomServer.Callback':'make_initial_sync'()}, timers => S1589Timers}, {'ok', #{changes => {'ok', S1609Changes}, hand => [], table => S1602LastTable}}} end end end end, begin S1614CardOpts = case S1586IsFront of true -> 'SesterlStdlib.List':'map'(fun(S1612Card) -> {'ok', S1612Card} end, S1581Cards); false -> 'SesterlStdlib.List':'map'(fun(S1613Card) -> 'error' end, S1581Cards) end, begin S1621Dummy = 'SesterlStdlib.List':'for_each'(fun(S1615UOpt) -> case S1615UOpt of 'error' -> sesterl_internal_prim:'return'(ok); {'ok', S1616U} -> begin {'ok', S1617Obs} = 'Tianjiupai.RoomServer.Callback':'make_observable_game_state'(S1610GameState, S1616U), begin S1619TrickLast = 'SesterlStdlib.Option':'map'(fun(S1618Last) -> #{changes => maps:get(changes, S1618Last), table => maps:get(table, S1618Last)} end, S1611LastOpt), begin S1620Submission = #{new_state => S1617Obs, seat => S1583Seat, submitted => S1614CardOpts, trick_last => S1619TrickLast}, 'Tianjiupai.RoomServer.Callback':'notify'(S1616U, [{'notify_submission', S1620Submission} | []]) end end end end end, 'Tianjiupai.RoomServer.Callback':'the_other_players'(S1610GameState, S1583Seat)), begin {'ok', S1622Obs} = 'Tianjiupai.RoomServer.Callback':'make_observable_game_state'(S1610GameState, S1580UserId), sesterl_internal_prim:'return'({'ok', {S1622Obs, S1611LastOpt, S1610GameState}}) end end end end end end end end end end.
'handle_submit'(S1624UserId, S1625Cards, S1626State) -> begin S1628Opt = case maps:get(room_state, S1626State) of {'internal_waiting', _} -> sesterl_internal_prim:'return'('error'); {'internal_playing', S1627GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_empty_seat'(S1627GameState) of 'error' -> 'Tianjiupai.RoomServer.Callback':'handle_submit_impl'(S1624UserId, S1625Cards, S1627GameState); {'ok', _} -> sesterl_internal_prim:'return'('error') end end, case S1628Opt of 'error' -> 'SesterlStdlib.GenServer':'reply'({'submission_done', 'error'}, S1626State); {'ok', {S1629Obs, S1630LastOpt, S1631GameState}} -> begin S1634ReversedLogs = case S1630LastOpt of 'error' -> maps:get(reversed_logs, S1626State); {'ok', S1632Last} -> case maps:get(changes, S1632Last) of 'error' -> maps:get(reversed_logs, S1626State); {'ok', S1633Changes} -> [{'log_changes', S1633Changes} | maps:get(reversed_logs, S1626State)] end end, 'SesterlStdlib.GenServer':'reply'({'submission_done', {'ok', {S1629Obs, S1630LastOpt}}}, maps:put(reversed_logs, S1634ReversedLogs, maps:put(room_state, {'internal_playing', S1631GameState}, S1626State))) end end end.
'handle_ack'(S1636UserId, S1637SnapshotId, S1638State) -> begin S1649Opt = case maps:get(room_state, S1638State) of {'internal_waiting', _} -> sesterl_internal_prim:'return'('error'); {'internal_playing', S1639GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1639GameState, S1636UserId) of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', S1640Seat} -> case 'Tianjiupai.SnapshotId':'equal'(S1637SnapshotId, maps:get(snapshot_id, S1639GameState)) of true -> case maps:get(sync, S1639GameState) of {'waiting_sync', S1641SyncQuad} -> begin S1642SyncQuad = 'Tianjiupai.Quad':'update'(S1640Seat, true, S1641SyncQuad), begin _ = begin S2626 = 'Tianjiupai.Logger':'info'({"update sync (snapshot_id: ~p, user_id: ~p, quad: ~p)", 3}, {S1637SnapshotId, S1636UserId, S1642SyncQuad}), S2626(<<"RoomServer.sest">>, 924) end, case 'Tianjiupai.Quad':'decompose'(S1642SyncQuad) of {true, true, true, true} -> begin S1645UserIds = begin S1643UserIdOpts = 'Tianjiupai.RoomServer.Callback':'the_other_players'(S1639GameState, S1640Seat), 'SesterlStdlib.List':'filter_map'(fun(S1644UOpt) -> S1644UOpt end, S1643UserIdOpts) end, begin S1646Dummy = 'Tianjiupai.RoomServer.Callback':'notify_for_each'([S1636UserId | S1645UserIds], ['notify_next_step' | []]), begin S1647GameState = maps:put(sync, 'waiting_input', S1639GameState), sesterl_internal_prim:'return'({'ok', S1647GameState}) end end end; _ -> begin S1648GameState = maps:put(sync, {'waiting_sync', S1642SyncQuad}, S1639GameState), sesterl_internal_prim:'return'({'ok', S1648GameState}) end end end end; 'waiting_input' -> begin _ = begin S2627 = 'Tianjiupai.Logger':'warning'({"waiting input (snapshot_id: ~p, user_id: ~p)", 2}, {S1637SnapshotId, S1636UserId}), S2627(<<"RoomServer.sest">>, 946) end, sesterl_internal_prim:'return'('error') end end; false -> begin _ = begin S2628 = 'Tianjiupai.Logger':'warning'({"snapshot mismatch (got: ~p, expected: ~p, user_id: ~p)", 3}, {S1637SnapshotId, maps:get(snapshot_id, S1639GameState), S1636UserId}), S2628(<<"RoomServer.sest">>, 955) end, sesterl_internal_prim:'return'('error') end end end end, case S1649Opt of 'error' -> 'SesterlStdlib.GenServer':'no_reply'(S1638State); {'ok', S1650GameState} -> 'SesterlStdlib.GenServer':'no_reply'(maps:put(room_state, {'internal_playing', S1650GameState}, S1638State)) end end.
'handle_require_next_inning'(S1652UserId, S1653SnapshotId, S1654State) -> begin S1673Opt = case maps:get(room_state, S1654State) of {'internal_waiting', _} -> sesterl_internal_prim:'return'('error'); {'internal_playing', S1655GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1655GameState, S1652UserId) of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', S1656Seat} -> case 'Tianjiupai.SnapshotId':'equal'(S1653SnapshotId, maps:get(snapshot_id, S1655GameState)) of true -> case maps:get(inning, S1655GameState) of {'during_inning', _} -> sesterl_internal_prim:'return'('error'); {'inning_end', S1657GainsQuad, S1658InningSyncQuad} -> begin S1659InningSyncQuad = 'Tianjiupai.Quad':'update'(S1656Seat, true, S1658InningSyncQuad), begin _ = begin S2630 = 'Tianjiupai.Logger':'info'({"update inning sync (snapshot_id: ~p, inning_sync_quad: ~p)", 2}, {S1653SnapshotId, S1659InningSyncQuad}), S2630(<<"RoomServer.sest">>, 993) end, case 'Tianjiupai.Quad':'decompose'(S1659InningSyncQuad) of {true, true, true, true} -> begin S1660InningIndex = maps:get(inning_index, maps:get(meta, S1655GameState)), begin S1663UserIds = begin S1661UserIdOpts = 'Tianjiupai.RoomServer.Callback':'the_other_players'(S1655GameState, S1656Seat), 'SesterlStdlib.List':'filter_map'(fun(S1662UOpt) -> S1662UOpt end, S1661UserIdOpts) end, begin S1664UserIdsForNotification = [S1652UserId | S1663UserIds], case (S1660InningIndex >= 'Tianjiupai.RoomServer':'maximum_num_innings'()) of true -> begin S1665Dummy = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1664UserIdsForNotification, ['notify_room_close' | []]), sesterl_internal_prim:'return'({'ok', 'room_close'}) end; false -> begin S1666GameState = 'Tianjiupai.RoomServer.Callback':'start_new_inning'(maps:get(meta, S1655GameState), maps:get(timers, S1655GameState)), begin S1669Dummy = 'SesterlStdlib.List':'for_each'(fun(S1667U) -> begin {'ok', S1668Obs} = 'Tianjiupai.RoomServer.Callback':'make_observable_game_state'(S1666GameState, S1667U), 'Tianjiupai.RoomServer.Callback':'notify'(S1667U, [{'notify_game_start', S1668Obs} | []]) end end, [S1652UserId | S1663UserIds]), begin S1671GameIndex = begin S1670Meta = maps:get(meta, S1666GameState), #{inning_index => S1660InningIndex, num_consecutives => maps:get(num_consecutives, S1670Meta)} end, sesterl_internal_prim:'return'({'ok', {'room_transition_to_next_inning', S1666GameState, {'ok', S1671GameIndex}}}) end end end end end end end; _ -> begin S1672GameState = maps:put(inning, {'inning_end', S1657GainsQuad, S1659InningSyncQuad}, S1655GameState), sesterl_internal_prim:'return'({'ok', {'room_transition_to_next_inning', S1672GameState, 'error'}}) end end end end end; false -> sesterl_internal_prim:'return'('error') end end end, case S1673Opt of 'error' -> 'SesterlStdlib.GenServer':'no_reply'(S1654State); {'ok', 'room_close'} -> 'SesterlStdlib.GenServer':'stop'('Tianjiupai.RoomServer':'normal_atom'(), S1654State); {'ok', {'room_transition_to_next_inning', S1674GameState, S1675GameIndexOpt}} -> begin S1677State = case S1675GameIndexOpt of 'error' -> S1654State; {'ok', S1676GameIndex} -> maps:put(reversed_logs, [{'log_game_start', S1676GameIndex} | maps:get(reversed_logs, S1654State)], S1654State) end, 'SesterlStdlib.GenServer':'no_reply'(maps:put(room_state, {'internal_playing', S1674GameState}, S1677State)) end end end.
'handle_set_connection_status'(S1679UserId, S1680IsConnected, S1681State) -> begin S1718Opt = case maps:get(room_state, S1681State) of {'internal_waiting', S1682WaitingState} -> begin S1683Members0 = maps:get(members, S1682WaitingState), case 'SesterlStdlib.List':'filter'(fun(S1684W) -> 'SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1684W)), S1679UserId) end, S1683Members0) of [] -> sesterl_internal_prim:'return'('error'); [S1685W | _] -> begin S1686User = maps:get(user, S1685W), begin S1695Acc = 'SesterlStdlib.List':'foldl_effect'(fun(S1687Acc, S1688W0) -> begin S1694W1 = case 'SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1688W0)), S1679UserId) of true -> case S1680IsConnected of true -> begin S1691Res = case maps:get(disconnected, S1688W0) of 'error' -> sesterl_internal_prim:'return'({'ok', ok}); {'ok', S1689Timer} -> begin S1690Res = 'SesterlStdlib.Timer':'cancel'(S1689Timer), begin _ = begin S2632 = 'Tianjiupai.Logger':'info'({"cancels timer (waiting, user_id: ~p, timer: ~p, result: ~p)", 3}, {S1679UserId, S1689Timer, S1690Res}), S2632(<<"RoomServer.sest">>, 1084) end, sesterl_internal_prim:'return'(S1690Res) end end end, sesterl_internal_prim:'return'(maps:put(disconnected, 'error', S1688W0)) end; false -> begin S1692Res = 'SesterlStdlib.Timer':'send_after_self'('Tianjiupai.RoomServer':'disconnection_timeout'(), {'disconnection_timeout', S1679UserId}), begin _ = begin S2633 = 'Tianjiupai.Logger':'info'({"sets timer (waiting, user_id: ~p, result: ~p)", 2}, {S1679UserId, S1692Res}), S2633(<<"RoomServer.sest">>, 1099) end, begin {'ok', S1693Timer} = S1692Res, sesterl_internal_prim:'return'(maps:put(disconnected, {'ok', S1693Timer}, S1688W0)) end end end end; false -> sesterl_internal_prim:'return'(S1688W0) end, sesterl_internal_prim:'return'([S1694W1 | S1687Acc]) end end, [], S1683Members0), begin S1696Members1 = 'SesterlStdlib.List':'reverse'(S1695Acc), begin S1699UserIdsForNotification = 'SesterlStdlib.List':'filter_map'(fun(S1697W) -> case maps:get(disconnected, S1697W) of 'error' -> begin S1698U = maps:get(user_id, maps:get(user, S1697W)), case 'SesterlStdlib.Binary':'equal'(S1698U, S1679UserId) of true -> 'error'; false -> {'ok', S1698U} end end; {'ok', _} -> 'error' end end, S1696Members1), sesterl_internal_prim:'return'({'ok', {S1686User, S1699UserIdsForNotification, {'internal_waiting', #{members => S1696Members1}}}}) end end end end end end; {'internal_playing', S1700GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1700GameState, S1679UserId) of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', S1701Seat} -> begin S1702GameMeta = maps:get(meta, S1700GameState), begin S1703Players0 = maps:get(players, S1702GameMeta), begin {'ok', S1704P0} = 'Tianjiupai.Quad':'access'(S1701Seat, S1703Players0), begin S1705P1 = maps:put(is_connected, S1680IsConnected, S1704P0), begin S1706Players1 = 'Tianjiupai.Quad':'update'(S1701Seat, {'ok', S1705P1}, S1703Players0), begin S1710UserIdsForNotification = 'SesterlStdlib.List':'filter_map'(fun(S1707GOpt) -> case S1707GOpt of 'error' -> 'error'; {'ok', S1708G} -> case maps:get(is_connected, S1708G) of true -> begin S1709U = maps:get(user_id, maps:get(user, S1708G)), case 'SesterlStdlib.Binary':'equal'(S1709U, S1679UserId) of true -> 'error'; false -> {'ok', S1709U} end end; false -> 'error' end end end, 'Tianjiupai.Quad':'to_list'(S1706Players1)), begin S1716TimerQuad = begin S1711TimerQuad = maps:get(timers, S1700GameState), case S1680IsConnected of true -> case 'Tianjiupai.Quad':'access'(S1701Seat, S1711TimerQuad) of 'error' -> begin _ = begin S2634 = 'Tianjiupai.Logger':'info'({"no timer (playing, seat: ~p, user_id: ~p)", 2}, {S1701Seat, S1679UserId}), S2634(<<"RoomServer.sest">>, 1167) end, sesterl_internal_prim:'return'(S1711TimerQuad) end; {'ok', S1712Timer} -> begin S1713Res = 'SesterlStdlib.Timer':'cancel'(S1712Timer), begin _ = begin S2635 = 'Tianjiupai.Logger':'info'({"cancels timer (playing, user_id: ~p, timer: ~p, result: ~p)", 3}, {S1679UserId, S1712Timer, S1713Res}), S2635(<<"RoomServer.sest">>, 1176) end, sesterl_internal_prim:'return'('Tianjiupai.Quad':'update'(S1701Seat, 'error', S1711TimerQuad)) end end end; false -> begin S1714Res = 'SesterlStdlib.Timer':'send_after_self'('Tianjiupai.RoomServer':'disconnection_timeout'(), {'disconnection_timeout', S1679UserId}), begin _ = begin S2636 = 'Tianjiupai.Logger':'info'({"sets timer (playing, seat: ~p, user_id: ~p, result: ~p)", 3}, {S1701Seat, S1679UserId, S1714Res}), S2636(<<"RoomServer.sest">>, 1189) end, begin {'ok', S1715Timer} = S1714Res, sesterl_internal_prim:'return'('Tianjiupai.Quad':'update'(S1701Seat, {'ok', S1715Timer}, S1711TimerQuad)) end end end end end, begin S1717GameState = maps:put(timers, S1716TimerQuad, maps:put(meta, maps:put(players, S1706Players1, S1702GameMeta), S1700GameState)), sesterl_internal_prim:'return'({'ok', {maps:get(user, S1705P1), S1710UserIdsForNotification, {'internal_playing', S1717GameState}}}) end end end end end end end end end end, case S1718Opt of 'error' -> 'SesterlStdlib.GenServer':'no_reply'(S1681State); {'ok', {S1719User, S1720UserIdsForNotification, S1721RoomState}} -> begin S1722Connection = #{is_connected => S1680IsConnected, user => S1719User}, begin S1723Dummy = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1720UserIdsForNotification, [{'notify_connection', S1722Connection} | []]), begin S1724State = maps:put(reversed_logs, [{'log_connection', S1722Connection} | maps:get(reversed_logs, S1681State)], maps:put(room_state, S1721RoomState, S1681State)), 'SesterlStdlib.GenServer':'no_reply'(S1724State) end end end end end.
      send_room_deletion_to_user_server(UserId) ->
          try
              _ = 'Tianjiupai.User':set_room(UserId, error),
              ok
          catch
              _:_ -> ok
          end.
    
'handle_disconnection_timeout'(S1727UserId, S1728State) -> begin _ = begin S2638 = 'Tianjiupai.Logger':'info'({"disconnection timeout (user_id: ~p)", 1}, {S1727UserId}), S2638(<<"RoomServer.sest">>, 1235) end, begin S1729RoomState0 = maps:get(room_state, S1728State), begin S1753Pair = case S1729RoomState0 of {'internal_waiting', S1730WaitingState} -> begin S1731WaitingMembers0 = maps:get(members, S1730WaitingState), case 'SesterlStdlib.List':'filter'(fun(S1732W) -> 'SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1732W)), S1727UserId) end, S1731WaitingMembers0) of [] -> sesterl_internal_prim:'return'({'error', S1729RoomState0}); [S1733W | _] -> begin S1734User = maps:get(user, S1733W), begin S1736WaitingMembers1 = 'SesterlStdlib.List':'filter'(fun(S1735W) -> 'SesterlStdlib.Bool':'not'('SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1735W)), S1727UserId)) end, S1731WaitingMembers0), begin S1737Dummy = 'Tianjiupai.RoomServer.Callback':'send_room_deletion_to_user_server'(S1727UserId), begin S1740Dummy = begin S1739UserIds = 'SesterlStdlib.List':'filter_map'(fun(S1738W) -> case maps:get(disconnected, S1738W) of 'error' -> {'ok', maps:get(user_id, maps:get(user, S1738W))}; {'ok', _} -> 'error' end end, S1731WaitingMembers0), 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1739UserIds, [{'notify_exited', S1734User} | []]) end, sesterl_internal_prim:'return'({{'ok', S1734User}, {'internal_waiting', maps:put(members, S1736WaitingMembers1, S1730WaitingState)}}) end end end end end end; {'internal_playing', S1741GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1741GameState, S1727UserId) of 'error' -> sesterl_internal_prim:'return'({'error', S1729RoomState0}); {'ok', S1742Seat} -> begin S1743Meta0 = maps:get(meta, S1741GameState), begin S1744Players0 = maps:get(players, S1743Meta0), begin {'ok', S1745Player} = 'Tianjiupai.Quad':'access'(S1742Seat, S1744Players0), begin S1746User = maps:get(user, S1745Player), begin S1750Dummy = begin S1749UserIds = begin S1747UserIdOpts = 'Tianjiupai.RoomServer.Callback':'the_other_players'(S1741GameState, S1742Seat), 'SesterlStdlib.List':'filter_map'(fun(S1748UOpt) -> S1748UOpt end, S1747UserIdOpts) end, 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1749UserIds, [{'notify_exited', S1746User} | []]) end, begin S1751Players1 = 'Tianjiupai.Quad':'update'(S1742Seat, 'error', S1744Players0), begin S1752GameState = maps:put(timers, 'Tianjiupai.Quad':'update'(S1742Seat, 'error', maps:get(timers, S1741GameState)), maps:put(meta, maps:put(players, S1751Players1, S1743Meta0), S1741GameState)), sesterl_internal_prim:'return'({{'ok', S1746User}, {'internal_playing', S1752GameState}}) end end end end end end end end end, begin {S1754UserOpt, S1755RoomState1} = S1753Pair, begin S1757State = case S1754UserOpt of {'ok', S1756User} -> maps:put(room_state, S1755RoomState1, maps:put(reversed_logs, [{'log_exited', S1756User} | maps:get(reversed_logs, S1728State)], S1728State)); 'error' -> maps:put(room_state, S1755RoomState1, S1728State) end, 'SesterlStdlib.GenServer':'no_reply'(S1757State) end end end end end.
'update_sync'(S1759UserId, S1760State) -> case maps:get(room_state, S1760State) of {'internal_waiting', _} -> sesterl_internal_prim:'return'(S1760State); {'internal_playing', S1761GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1761GameState, S1759UserId) of 'error' -> sesterl_internal_prim:'return'(S1760State); {'ok', S1762Seat} -> case maps:get(sync, S1761GameState) of 'waiting_input' -> sesterl_internal_prim:'return'(S1760State); {'waiting_sync', S1763SyncQuad} -> begin S1764SyncQuad = 'Tianjiupai.Quad':'update'(S1762Seat, true, S1763SyncQuad), case 'Tianjiupai.Quad':'decompose'(S1764SyncQuad) of {true, true, true, true} -> begin S1767UserIds = begin S1765UserIdOpts = 'Tianjiupai.RoomServer.Callback':'the_other_players'(S1761GameState, S1762Seat), 'SesterlStdlib.List':'filter_map'(fun(S1766UOpt) -> S1766UOpt end, S1765UserIdOpts) end, begin S1768Dummy = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1767UserIds, ['notify_next_step' | []]), begin S1769GameState = maps:put(sync, 'waiting_input', S1761GameState), sesterl_internal_prim:'return'(maps:put(room_state, {'internal_playing', S1769GameState}, S1760State)) end end end; _ -> begin S1770GameState = maps:put(sync, {'waiting_sync', S1764SyncQuad}, S1761GameState), sesterl_internal_prim:'return'(maps:put(room_state, {'internal_playing', S1770GameState}, S1760State)) end end end end end end.
'handle_call'(S1772Req, S1773From, S1774State) -> case S1772Req of 'get_whole_state' -> begin S1775WholeState = 'Tianjiupai.RoomServer.Callback':'make_whole_room_state'(S1774State), 'SesterlStdlib.GenServer':'reply'({'whole_state', S1775WholeState}, S1774State) end; {'get_personal_state', S1776UserId} -> begin S1777State = 'Tianjiupai.RoomServer.Callback':'update_sync'(S1776UserId, S1774State), begin S1778PersonalStateOpt = 'Tianjiupai.RoomServer.Callback':'make_personal_state'(S1777State, S1776UserId), 'SesterlStdlib.GenServer':'reply'({'personal_state', S1778PersonalStateOpt}, S1777State) end end; {'send_chat', S1779User, S1780Text} -> 'Tianjiupai.RoomServer.Callback':'handle_send_chat'(S1779User, S1780Text, S1774State); {'attend', S1781User} -> 'Tianjiupai.RoomServer.Callback':'handle_attend'(S1781User, S1774State); {'exit', S1782UserId} -> 'Tianjiupai.RoomServer.Callback':'handle_exit'(S1782UserId, S1774State); {'submit', S1783UserId, S1784Cards} -> 'Tianjiupai.RoomServer.Callback':'handle_submit'(S1783UserId, S1784Cards, S1774State) end.
'handle_cast'(S1786Msg, S1787State) -> case S1786Msg of {'ack', S1788UserId, S1789SnapshotId} -> 'Tianjiupai.RoomServer.Callback':'handle_ack'(S1788UserId, S1789SnapshotId, S1787State); {'require_next_inning', S1790UserId, S1791SnapshotId} -> 'Tianjiupai.RoomServer.Callback':'handle_require_next_inning'(S1790UserId, S1791SnapshotId, S1787State); {'set_connection_status', S1792UserId, S1793IsConnected} -> 'Tianjiupai.RoomServer.Callback':'handle_set_connection_status'(S1792UserId, S1793IsConnected, S1787State) end.
'handle_info'(S1795Info, S1796State) -> case S1795Info of {'disconnection_timeout', S1797UserId} -> 'Tianjiupai.RoomServer.Callback':'handle_disconnection_timeout'(S1797UserId, S1796State); _ -> begin _ = begin S2643 = 'Tianjiupai.Logger':'warning'({"unexpected info (info: ~p, state: ~p)", 2}, {S1795Info, S1796State}), S2643(<<"RoomServer.sest">>, 1391) end, 'SesterlStdlib.GenServer':'no_reply'(S1796State) end end.
'terminate'(S1799State) -> begin _ = begin S2645 = 'Tianjiupai.Logger':'info'({"terminate (room_id: ~p)", 1}, {maps:get(room_id, maps:get(settings, S1799State))}), S2645(<<"RoomServer.sest">>, 1396) end, sesterl_internal_prim:'return'(ok) end.
