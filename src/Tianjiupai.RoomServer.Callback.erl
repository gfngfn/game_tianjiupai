-module('Tianjiupai.RoomServer.Callback').
-export(['init'/1, 'get_members_from_state'/1, 'make_whole_room_state'/1, 'find_user_seat'/2, 'the_other_seats'/1, 'the_other_players'/2, 'make_observable_game_state'/2, 'make_observable'/2, 'make_personal_state'/2, 'make_initial_sync'/0, 'start_new_inning'/2, 'warn_notification_failure'/3, 'notify'/2, 'notify_for_each'/2, 'find_empty_seat'/1, 'handle_send_chat'/3, 'is_none'/1, 'handle_attend'/2, 'handle_exit'/2, 'make_winner_diff'/1, 'update_score'/2, 'deal_with_trick_end'/3, 'make_loser_updates_when_parent_wins'/4, 'make_loser_updates_when_child_wins'/5, 'deal_with_inning_end'/4, 'handle_submit_impl'/3, 'handle_submit'/3, 'handle_ack'/3, 'handle_require_next_inning'/3, 'handle_set_connection_status'/3, 'send_room_deletion_to_user_server'/1, 'handle_disconnection_timeout'/2, 'update_sync'/2, 'handle_call'/3, 'handle_cast'/2, 'handle_info'/2, 'terminate'/1]).
'init'(S1331InitArg) -> begin {S1332RoomId, S1333RoomName} = S1331InitArg, begin S1334Settings = #{room_id => S1332RoomId, room_name => S1333RoomName}, 'SesterlStdlib.GenServer':'init_ok'(#{reversed_logs => [], room_state => {'internal_waiting', #{members => []}}, settings => S1334Settings}) end end.
'get_members_from_state'(S1336RoomState) -> case S1336RoomState of {'internal_waiting', S1337WaitingState} -> {false, 'SesterlStdlib.List':'map'(fun(S1338W) -> maps:get(user, S1338W) end, maps:get(members, S1337WaitingState))}; {'internal_playing', S1339WholeGameState} -> begin S1340PlayerOpts = 'Tianjiupai.Quad':'to_list'(maps:get(players, maps:get(meta, S1339WholeGameState))), begin S1343Members = 'SesterlStdlib.List':'filter_map'(fun(S1341PlayerOpt) -> case S1341PlayerOpt of 'error' -> 'error'; {'ok', S1342Player} -> {'ok', maps:get(user, S1342Player)} end end, S1340PlayerOpts), {true, S1343Members} end end end.
'make_whole_room_state'(S1345State) -> begin S1346Settings = maps:get(settings, S1345State), begin {S1347IsPlaying, S1348Members} = 'Tianjiupai.RoomServer.Callback':'get_members_from_state'(maps:get(room_state, S1345State)), #{is_playing => S1347IsPlaying, members => S1348Members, room => #{room_id => maps:get(room_id, S1346Settings), room_name => maps:get(room_name, S1346Settings)}} end end.
'find_user_seat'(S1350GameState, S1351UserId) -> begin S1354Opt = 'Tianjiupai.Quad':'find'(fun(S1352PlayerOpt) -> case S1352PlayerOpt of 'error' -> false; {'ok', S1353Player} -> 'SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1353Player)), S1351UserId) end end, maps:get(players, maps:get(meta, S1350GameState))), 'SesterlStdlib.Option':'map'(fun(S1355Pair) -> begin {S1356Seat, _} = S1355Pair, S1356Seat end end, S1354Opt) end.
'the_other_seats'(S1358Seat) -> case S1358Seat of 'seat_a' -> ['seat_b' | ['seat_c' | ['seat_d' | []]]]; 'seat_b' -> ['seat_c' | ['seat_d' | ['seat_a' | []]]]; 'seat_c' -> ['seat_d' | ['seat_a' | ['seat_b' | []]]]; 'seat_d' -> ['seat_a' | ['seat_b' | ['seat_c' | []]]] end.
'the_other_players'(S1360GameState, S1361Seat) -> begin {S1364Uo0, S1365Uo1, S1366Uo2, S1367Uo3} = 'Tianjiupai.Quad':'decompose'('Tianjiupai.Quad':'map'(fun(S1362PlayerOpt) -> 'SesterlStdlib.Option':'map'(fun(S1363Player) -> maps:get(user_id, maps:get(user, S1363Player)) end, S1362PlayerOpt) end, maps:get(players, maps:get(meta, S1360GameState)))), case S1361Seat of 'seat_a' -> [S1365Uo1 | [S1366Uo2 | [S1367Uo3 | []]]]; 'seat_b' -> [S1366Uo2 | [S1367Uo3 | [S1364Uo0 | []]]]; 'seat_c' -> [S1367Uo3 | [S1364Uo0 | [S1365Uo1 | []]]]; 'seat_d' -> [S1364Uo0 | [S1365Uo1 | [S1366Uo2 | []]]] end end.
'make_observable_game_state'(S1369GameState, S1370UserId) -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1369GameState, S1370UserId) of 'error' -> 'error'; {'ok', S1371Seat} -> begin S1372Synchronizing = case maps:get(sync, S1369GameState) of 'waiting_input' -> false; {'waiting_sync', _} -> true end, begin S1375ObservableInning = case maps:get(inning, S1369GameState) of {'during_inning', S1373Inning} -> {'observable_during_inning', 'Tianjiupai.Inning':'observe'(S1371Seat, S1373Inning)}; {'inning_end', S1374GainsQuad, _} -> {'observable_inning_end', S1374GainsQuad} end, {'ok', #{meta => maps:get(meta, S1369GameState), observable_inning => S1375ObservableInning, snapshot_id => maps:get(snapshot_id, S1369GameState), synchronizing => S1372Synchronizing}} end end end.
'make_observable'(S1377RoomState, S1378UserId) -> case S1377RoomState of {'internal_waiting', S1379WaitingState} -> begin S1381Members = 'SesterlStdlib.List':'map'(fun(S1380W) -> maps:get(user, S1380W) end, maps:get(members, S1379WaitingState)), {'ok', {'waiting_start', S1381Members}} end; {'internal_playing', S1382GameState} -> 'SesterlStdlib.Option':'map'(fun(S1383Obs) -> {'playing_game', S1383Obs} end, 'Tianjiupai.RoomServer.Callback':'make_observable_game_state'(S1382GameState, S1378UserId)) end.
'make_personal_state'(S1385State, S1386UserId) -> begin S1387Settings = maps:get(settings, S1385State), case 'Tianjiupai.RoomServer.Callback':'make_observable'(maps:get(room_state, S1385State), S1386UserId) of 'error' -> 'error'; {'ok', S1388Observable} -> {'ok', #{game => S1388Observable, logs => 'SesterlStdlib.List':'reverse'(maps:get(reversed_logs, S1385State)), room => #{room_id => maps:get(room_id, S1387Settings), room_name => maps:get(room_name, S1387Settings)}}} end end.
'make_initial_sync'() -> 'Tianjiupai.Quad':'make'({false, false, false, false}).
'start_new_inning'(S1391GameMeta, S1392Timers) -> begin S1393NextParentSeat = maps:get(parent_seat, S1391GameMeta), begin S1394Inning = 'Tianjiupai.Inning':'start'(S1393NextParentSeat), begin S1395SnapshotId = 'Tianjiupai.SnapshotId':'generate'(), sesterl_internal_prim:'return'(#{inning => {'during_inning', S1394Inning}, meta => S1391GameMeta, snapshot_id => S1395SnapshotId, sync => {'waiting_sync', 'Tianjiupai.RoomServer.Callback':'make_initial_sync'()}, timers => S1392Timers}) end end end.
'warn_notification_failure'(S1397Reason, S1398UserId, S1399Notifications) -> begin S2606 = 'Tianjiupai.Logger':'warning'({"notify_log failed (reason: ~p, to: ~p, notifications: ~p)", 3}, {S1397Reason, S1398UserId, S1399Notifications}), S2606(<<"RoomServer.sest">>, 274) end.
      notify(UserId, Notifications) ->
          case tianjiupai_websocket:notify(UserId, Notifications) of
              ok ->
                  ok;
              {error, Reason} ->
                  ?MODULE:warn_notification_failure(Reason, UserId, Notifications),
                  ok
          end.
    
'notify_for_each'(S1402UserIds, S1403Logs) -> 'SesterlStdlib.List':'for_each'(fun(S1404UserId) -> 'Tianjiupai.RoomServer.Callback':'notify'(S1404UserId, S1403Logs) end, S1402UserIds).
'find_empty_seat'(S1406GameState) -> 'SesterlStdlib.Option':'map'(fun(S1407Pair) -> begin {S1408Seat, _} = S1407Pair, S1408Seat end end, 'Tianjiupai.Quad':'find'(fun(S1409PlayerOpt) -> case S1409PlayerOpt of {'ok', _} -> false; 'error' -> true end end, maps:get(players, maps:get(meta, S1406GameState)))).
'handle_send_chat'(S1411User, S1412Text, S1413State) -> begin {_, S1414Members} = 'Tianjiupai.RoomServer.Callback':'get_members_from_state'(maps:get(room_state, S1413State)), begin S1415Comment = #{from => S1411User, text => S1412Text}, begin S1418Dummy = begin S1417UserIds = 'SesterlStdlib.List':'map'(fun(S1416U) -> maps:get(user_id, S1416U) end, S1414Members), 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1417UserIds, [{'notify_comment', S1415Comment} | []]) end, 'SesterlStdlib.GenServer':'reply'('chat_sent', maps:put(reversed_logs, [{'log_comment', S1415Comment} | maps:get(reversed_logs, S1413State)], S1413State)) end end end.
'is_none'(S1420X) -> case S1420X of 'error' -> true; {'ok', _} -> false end.
'handle_attend'(S1422User, S1423State) -> begin S1424UserId = maps:get(user_id, S1422User), case maps:get(room_state, S1423State) of {'internal_playing', S1425GameState0} -> case 'Tianjiupai.RoomServer.Callback':'find_empty_seat'(S1425GameState0) of 'error' -> 'SesterlStdlib.GenServer':'reply'({'attended', 'error'}, S1423State); {'ok', S1426Seat} -> begin S1427GameMeta0 = maps:get(meta, S1425GameState0), begin S1428Player = #{is_connected => true, user => S1422User}, begin S1429Players1 = 'Tianjiupai.Quad':'update'(S1426Seat, {'ok', S1428Player}, maps:get(players, S1427GameMeta0)), begin S1430GameState1 = maps:put(meta, maps:put(players, S1429Players1, S1427GameMeta0), S1425GameState0), begin S1433UserIds = begin S1431UserIdOpts = 'Tianjiupai.RoomServer.Callback':'the_other_players'(S1430GameState1, S1426Seat), 'SesterlStdlib.List':'filter_map'(fun(S1432UOpt) -> S1432UOpt end, S1431UserIdOpts) end, begin S1440GameState2 = case maps:get(sync, S1430GameState1) of 'waiting_input' -> begin _ = begin S2612 = 'Tianjiupai.Logger':'info'({"attend -> waiting input (seat: ~p, user_id: ~p)", 2}, {S1426Seat, S1424UserId}), S2612(<<"RoomServer.sest">>, 340) end, begin S1434Dummy = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1433UserIds, [{'notify_entered_midway', #{seat => S1426Seat, user => S1422User}} | []]), sesterl_internal_prim:'return'(S1430GameState1) end end; {'waiting_sync', S1435SyncQuad0} -> case 'Tianjiupai.Quad':'access'(S1426Seat, S1435SyncQuad0) of true -> begin _ = begin S2613 = 'Tianjiupai.Logger':'info'({"attend -> no need to sync (seat: ~p, user_id: ~p, sync_quad: ~p)", 3}, {S1426Seat, S1424UserId, S1435SyncQuad0}), S2613(<<"RoomServer.sest">>, 355) end, begin S1436Dummy = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1433UserIds, [{'notify_entered_midway', #{seat => S1426Seat, user => S1422User}} | []]), sesterl_internal_prim:'return'(S1430GameState1) end end; false -> begin S1437SyncQuad1 = 'Tianjiupai.Quad':'update'(S1426Seat, true, S1435SyncQuad0), begin _ = begin S2614 = 'Tianjiupai.Logger':'info'({"attend -> sync update (seat: ~p, user_id: ~p, sync_quad: ~p)", 3}, {S1426Seat, S1424UserId, S1437SyncQuad1}), S2614(<<"RoomServer.sest">>, 369) end, case 'Tianjiupai.Quad':'decompose'(S1437SyncQuad1) of {true, true, true, true} -> begin S1438Dummy = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1433UserIds, [{'notify_entered_midway', #{seat => S1426Seat, user => S1422User}} | ['notify_next_step' | []]]), sesterl_internal_prim:'return'(maps:put(sync, 'waiting_input', S1430GameState1)) end; _ -> begin S1439Dummy = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1433UserIds, [{'notify_entered_midway', #{seat => S1426Seat, user => S1422User}} | []]), sesterl_internal_prim:'return'(maps:put(sync, {'waiting_sync', S1437SyncQuad1}, S1430GameState1)) end end end end end end, begin S1441State = maps:put(reversed_logs, [{'log_entered', S1422User} | maps:get(reversed_logs, S1423State)], maps:put(room_state, {'internal_playing', S1440GameState2}, S1423State)), begin {'ok', S1442PersonalState} = 'Tianjiupai.RoomServer.Callback':'make_personal_state'(S1441State, S1424UserId), 'SesterlStdlib.GenServer':'reply'({'attended', {'ok', S1442PersonalState}}, S1441State) end end end end end end end end end; {'internal_waiting', S1443WaitingState} -> begin S1444Members = maps:get(members, S1443WaitingState), case 'SesterlStdlib.List':'any'(fun(S1445W) -> 'SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1445W)), S1424UserId) end, S1444Members) of true -> begin {'ok', S1446PersonalState} = 'Tianjiupai.RoomServer.Callback':'make_personal_state'(S1423State, S1424UserId), 'SesterlStdlib.GenServer':'reply'({'attended', {'ok', S1446PersonalState}}, S1423State) end; false -> begin S1447LogEnter = {'log_entered', S1422User}, begin S1448NotifEnter = {'notify_entered', S1422User}, case S1444Members of [S1449W0 | [S1450W1 | [S1451W2 | _]]] -> begin S1452U0 = maps:get(user, S1449W0), begin S1453U1 = maps:get(user, S1450W1), begin S1454U2 = maps:get(user, S1451W2), begin S1459PlayerQuad = begin S1455Player0 = #{is_connected => 'Tianjiupai.RoomServer.Callback':'is_none'(maps:get(disconnected, S1449W0)), user => S1452U0}, begin S1456Player1 = #{is_connected => 'Tianjiupai.RoomServer.Callback':'is_none'(maps:get(disconnected, S1450W1)), user => S1453U1}, begin S1457Player2 = #{is_connected => 'Tianjiupai.RoomServer.Callback':'is_none'(maps:get(disconnected, S1451W2)), user => S1454U2}, begin S1458Player3 = #{is_connected => true, user => S1422User}, 'Tianjiupai.Quad':'make'({{'ok', S1455Player0}, {'ok', S1456Player1}, {'ok', S1457Player2}, {'ok', S1458Player3}}) end end end end, begin S1460ParentSeat = 'seat_a', begin S1461GameMeta = #{inning_index => 0, num_consecutives => 0, parent_seat => S1460ParentSeat, players => S1459PlayerQuad, scores => 'Tianjiupai.Quad':'make'({0, 0, 0, 0})}, begin S1462GameIndex = #{inning_index => 0, num_consecutives => 0}, begin S1463TimerQuad = 'Tianjiupai.Quad':'make'({'error', 'error', 'error', 'error'}), begin S1464GameState = 'Tianjiupai.RoomServer.Callback':'start_new_inning'(S1461GameMeta, S1463TimerQuad), begin S1467Dummy = 'SesterlStdlib.List':'for_each'(fun(S1465U) -> begin {'ok', S1466Obs} = 'Tianjiupai.RoomServer.Callback':'make_observable_game_state'(S1464GameState, S1465U), 'Tianjiupai.RoomServer.Callback':'notify'(S1465U, [S1448NotifEnter | [{'notify_game_start', S1466Obs} | []]]) end end, [maps:get(user_id, S1452U0) | [maps:get(user_id, S1453U1) | [maps:get(user_id, S1454U2) | []]]]), begin S1468State = maps:put(reversed_logs, [{'log_game_start', S1462GameIndex} | [S1447LogEnter | maps:get(reversed_logs, S1423State)]], maps:put(room_state, {'internal_playing', S1464GameState}, S1423State)), begin {'ok', S1469PersonalState} = 'Tianjiupai.RoomServer.Callback':'make_personal_state'(S1468State, S1424UserId), 'SesterlStdlib.GenServer':'reply'({'attended', {'ok', S1469PersonalState}}, S1468State) end end end end end end end end end end end end; _ -> begin S1470W = #{disconnected => 'error', user => S1422User}, begin S1471WaitingState = maps:put(members, 'SesterlStdlib.List':'append'(S1444Members, [S1470W | []]), S1443WaitingState), begin S1473Dummy = 'Tianjiupai.RoomServer.Callback':'notify_for_each'('SesterlStdlib.List':'map'(fun(S1472W) -> maps:get(user_id, maps:get(user, S1472W)) end, S1444Members), [S1448NotifEnter | []]), begin S1474State = maps:put(reversed_logs, [S1447LogEnter | maps:get(reversed_logs, S1423State)], maps:put(room_state, {'internal_waiting', S1471WaitingState}, S1423State)), begin {'ok', S1475PersonalState} = 'Tianjiupai.RoomServer.Callback':'make_personal_state'(S1474State, S1424UserId), 'SesterlStdlib.GenServer':'reply'({'attended', {'ok', S1475PersonalState}}, S1474State) end end end end end end end end end end end end.
'handle_exit'(S1477UserId, S1478State) -> begin S1496Opt = case maps:get(room_state, S1478State) of {'internal_playing', S1479GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1479GameState, S1477UserId) of 'error' -> 'error'; {'ok', S1480Seat} -> begin S1481Meta0 = maps:get(meta, S1479GameState), begin S1482Players0 = maps:get(players, S1481Meta0), begin {'ok', S1483Player} = 'Tianjiupai.Quad':'access'(S1480Seat, S1482Players0), begin S1484Players1 = 'Tianjiupai.Quad':'update'(S1480Seat, 'error', S1482Players0), begin S1487UserIdsForNotification = begin S1485UserIdOpts = 'Tianjiupai.RoomServer.Callback':'the_other_players'(S1479GameState, S1480Seat), 'SesterlStdlib.List':'filter_map'(fun(S1486UOpt) -> S1486UOpt end, S1485UserIdOpts) end, {'ok', {maps:get(user, S1483Player), S1487UserIdsForNotification, {'internal_playing', maps:put(meta, maps:put(players, S1484Players1, S1481Meta0), S1479GameState)}}} end end end end end end; {'internal_waiting', S1488WaitingState} -> begin S1489Members0 = maps:get(members, S1488WaitingState), case 'SesterlStdlib.List':'filter'(fun(S1490W0) -> 'SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1490W0)), S1477UserId) end, S1489Members0) of [] -> 'error'; [S1491W | _] -> begin S1493Members1 = 'SesterlStdlib.List':'filter'(fun(S1492W0) -> 'SesterlStdlib.Bool':'not'('SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1492W0)), S1477UserId)) end, S1489Members0), begin S1495UserIdsForNotification = 'SesterlStdlib.List':'map'(fun(S1494W) -> maps:get(user_id, maps:get(user, S1494W)) end, S1493Members1), {'ok', {maps:get(user, S1491W), S1495UserIdsForNotification, {'internal_waiting', maps:put(members, S1493Members1, S1488WaitingState)}}} end end end end end, case S1496Opt of 'error' -> 'SesterlStdlib.GenServer':'reply'({'exited', false}, S1478State); {'ok', {S1497User, S1498UserIdsForNotification, S1499RoomState}} -> begin S1500Dummy = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1498UserIdsForNotification, [{'notify_exited', S1497User} | []]), begin S1501State = maps:put(reversed_logs, [{'log_exited', S1497User} | maps:get(reversed_logs, S1478State)], maps:put(room_state, S1499RoomState, S1478State)), 'SesterlStdlib.GenServer':'reply'({'exited', true}, S1501State) end end end end.
'make_winner_diff'(S1503Losers) -> begin S1507LoserDiffSum = 'SesterlStdlib.List':'foldl'(fun(S1504Acc, S1505Loser) -> begin {_, S1506LoserDiff} = S1505Loser, (S1504Acc + S1506LoserDiff) end end, 0, S1503Losers), (0 - S1507LoserDiffSum) end.
'update_score'(S1509Scores, S1510Updates) -> 'SesterlStdlib.List':'foldl'(fun(S1511Acc, S1512Update) -> begin {S1513Scores, S1514Diffs} = S1511Acc, begin {S1515Seat, S1516Diff} = S1512Update, begin S1517Score = 'Tianjiupai.Quad':'access'(S1515Seat, S1513Scores), {'Tianjiupai.Quad':'update'(S1515Seat, (S1517Score + S1516Diff), S1513Scores), 'Tianjiupai.Quad':'update'(S1515Seat, S1516Diff, S1514Diffs)} end end end end, {S1509Scores, 'Tianjiupai.Quad':'make'({0, 0, 0, 0})}, S1510Updates).
'deal_with_trick_end'(S1519GameMeta, S1520WinnerSeat, S1521SpecialOpt) -> case S1521SpecialOpt of 'error' -> {S1519GameMeta, 'error'}; {'ok', S1522Special} -> begin S1523LoserSeats = 'Tianjiupai.RoomServer.Callback':'the_other_seats'(S1520WinnerSeat), begin S1524NumConsecutives = maps:get(num_consecutives, S1519GameMeta), begin S1525ParentSeat = maps:get(parent_seat, S1519GameMeta), begin S1530Losers = case 'Tianjiupai.Quad':'seat_equal'(S1520WinnerSeat, S1525ParentSeat) of true -> 'SesterlStdlib.List':'map'(fun(S1526LoserSeat) -> begin S1527LoserDiff = ((0 - 2) * (S1524NumConsecutives + 1)), {S1526LoserSeat, S1527LoserDiff} end end, S1523LoserSeats); false -> 'SesterlStdlib.List':'map'(fun(S1528LoserSeat) -> begin S1529LoserDiff = case 'Tianjiupai.Quad':'seat_equal'(S1528LoserSeat, S1525ParentSeat) of true -> ((0 - 2) * (S1524NumConsecutives + 1)); false -> (0 - 2) end, {S1528LoserSeat, S1529LoserDiff} end end, S1523LoserSeats) end, begin S1531WinnerDiff = 'Tianjiupai.RoomServer.Callback':'make_winner_diff'(S1530Losers), begin {S1532Scores, S1533Diffs} = 'Tianjiupai.RoomServer.Callback':'update_score'(maps:get(scores, S1519GameMeta), [{S1520WinnerSeat, S1531WinnerDiff} | S1530Losers]), {maps:put(scores, S1532Scores, S1519GameMeta), {'ok', S1533Diffs}} end end end end end end end.
'make_loser_updates_when_parent_wins'(S1535NumConsecutives, S1536LoserSeats, S1537GainsQuad, S1538Coeff) -> 'SesterlStdlib.List':'map'(fun(S1539LoserSeat) -> begin S1540NumGains = 'SesterlStdlib.List':'length'('Tianjiupai.Quad':'access'(S1539LoserSeat, S1537GainsQuad)), begin S1541LoserDiff = case (S1540NumGains == 0) of true -> ((0 - 5) * ((S1535NumConsecutives + 1) * S1538Coeff)); false -> ((S1540NumGains - 4) * ((S1535NumConsecutives + 1) * S1538Coeff)) end, {S1539LoserSeat, S1541LoserDiff} end end end, S1536LoserSeats).
'make_loser_updates_when_child_wins'(S1543NumConsecutives, S1544LoserSeats, S1545ParentSeat, S1546GainsQuad, S1547CoeffOriginal) -> 'SesterlStdlib.List':'map'(fun(S1548LoserSeat) -> begin S1549NumGains = 'SesterlStdlib.List':'length'('Tianjiupai.Quad':'access'(S1548LoserSeat, S1546GainsQuad)), begin S1551LoserDiff = begin S1550Coeff = case 'Tianjiupai.Quad':'seat_equal'(S1548LoserSeat, S1545ParentSeat) of true -> ((S1543NumConsecutives + 1) * S1547CoeffOriginal); false -> S1547CoeffOriginal end, case (S1549NumGains == 0) of true -> ((0 - 5) * S1550Coeff); false -> ((S1549NumGains - 4) * S1550Coeff) end end, {S1548LoserSeat, S1551LoserDiff} end end end, S1544LoserSeats).
'deal_with_inning_end'(S1553GameMeta, S1554WinnerSeat, S1555SpecialOpt, S1556GainsQuad) -> begin S1557LoserSeats = 'Tianjiupai.RoomServer.Callback':'the_other_seats'(S1554WinnerSeat), begin S1558NumConsecutives = maps:get(num_consecutives, S1553GameMeta), begin S1559ParentSeat = maps:get(parent_seat, S1553GameMeta), case 'Tianjiupai.Quad':'seat_equal'(S1554WinnerSeat, S1559ParentSeat) of true -> begin S1564Losers = case S1555SpecialOpt of {'ok', 'inning_end_with_bazhijie'} -> 'SesterlStdlib.List':'map'(fun(S1560LoserSeat) -> begin S1561LoserDiff = ((0 - 20) * (S1558NumConsecutives + 1)), {S1560LoserSeat, S1561LoserDiff} end end, S1557LoserSeats); {'ok', 'inning_end_with_qizhijie'} -> 'SesterlStdlib.List':'map'(fun(S1562LoserSeat) -> begin S1563LoserDiff = ((0 - 10) * (S1558NumConsecutives + 1)), {S1562LoserSeat, S1563LoserDiff} end end, S1557LoserSeats); {'ok', _} -> 'Tianjiupai.RoomServer.Callback':'make_loser_updates_when_parent_wins'(S1558NumConsecutives, S1557LoserSeats, S1556GainsQuad, 2); 'error' -> 'Tianjiupai.RoomServer.Callback':'make_loser_updates_when_parent_wins'(S1558NumConsecutives, S1557LoserSeats, S1556GainsQuad, 1) end, begin S1565WinnerDiff = 'Tianjiupai.RoomServer.Callback':'make_winner_diff'(S1564Losers), begin {S1566Scores, S1567Diffs} = 'Tianjiupai.RoomServer.Callback':'update_score'(maps:get(scores, S1553GameMeta), [{S1554WinnerSeat, S1565WinnerDiff} | S1564Losers]), {#{inning_index => maps:get(inning_index, S1553GameMeta), num_consecutives => (S1558NumConsecutives + 1), parent_seat => S1559ParentSeat, players => maps:get(players, S1553GameMeta), scores => S1566Scores}, S1567Diffs} end end end; false -> begin S1574Losers = case S1555SpecialOpt of {'ok', 'inning_end_with_bazhijie'} -> 'SesterlStdlib.List':'map'(fun(S1568LoserSeat) -> begin S1569Coeff = case 'Tianjiupai.Quad':'seat_equal'(S1568LoserSeat, S1559ParentSeat) of true -> (S1558NumConsecutives + 1); false -> 1 end, begin S1570LoserDiff = ((0 - 20) * S1569Coeff), {S1568LoserSeat, S1570LoserDiff} end end end, S1557LoserSeats); {'ok', 'inning_end_with_qizhijie'} -> 'SesterlStdlib.List':'map'(fun(S1571LoserSeat) -> begin S1572Coeff = case 'Tianjiupai.Quad':'seat_equal'(S1571LoserSeat, S1559ParentSeat) of true -> (S1558NumConsecutives + 1); false -> 1 end, begin S1573LoserDiff = ((0 - 10) * S1572Coeff), {S1571LoserSeat, S1573LoserDiff} end end end, S1557LoserSeats); {'ok', _} -> 'Tianjiupai.RoomServer.Callback':'make_loser_updates_when_child_wins'(S1558NumConsecutives, S1557LoserSeats, S1559ParentSeat, S1556GainsQuad, 2); 'error' -> 'Tianjiupai.RoomServer.Callback':'make_loser_updates_when_child_wins'(S1558NumConsecutives, S1557LoserSeats, S1559ParentSeat, S1556GainsQuad, 1) end, begin S1575WinnerDiff = 'Tianjiupai.RoomServer.Callback':'make_winner_diff'(S1574Losers), begin {S1576Scores, S1577Diffs} = 'Tianjiupai.RoomServer.Callback':'update_score'(maps:get(scores, S1553GameMeta), [{S1554WinnerSeat, S1575WinnerDiff} | S1574Losers]), {#{inning_index => (maps:get(inning_index, S1553GameMeta) + 1), num_consecutives => 1, parent_seat => S1554WinnerSeat, players => maps:get(players, S1553GameMeta), scores => S1576Scores}, S1577Diffs} end end end end end end end.
'handle_submit_impl'(S1579UserId, S1580Cards, S1581GameState) -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1581GameState, S1579UserId) of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', S1582Seat} -> case maps:get(inning, S1581GameState) of {'inning_end', _, _} -> sesterl_internal_prim:'return'('error'); {'during_inning', S1583Inning} -> case 'Tianjiupai.Inning':'submit'(S1582Seat, S1580Cards, S1583Inning) of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', {S1584SubmitResult, S1585IsFront}} -> begin S1586SnapshotId = 'Tianjiupai.SnapshotId':'generate'(), begin S1587GameMeta = maps:get(meta, S1581GameState), begin S1588Timers = maps:get(timers, S1581GameState), begin {S1609GameState, S1610LastOpt} = case S1584SubmitResult of {'continues', S1589Inning} -> {#{inning => {'during_inning', S1589Inning}, meta => S1587GameMeta, snapshot_id => S1586SnapshotId, sync => {'waiting_sync', 'Tianjiupai.RoomServer.Callback':'make_initial_sync'()}, timers => S1588Timers}, 'error'}; {'wins_trick', S1590WinnerSeat, S1591LastTable, S1592SubmitterHand, S1593SpecialOpt, S1594Inning} -> begin {S1595GameMeta, S1596DiffsOpt} = 'Tianjiupai.RoomServer.Callback':'deal_with_trick_end'(S1587GameMeta, S1590WinnerSeat, S1593SpecialOpt), begin S1599ChangesOpt = case {S1593SpecialOpt, S1596DiffsOpt} of {{'ok', S1597Special}, {'ok', S1598Diffs}} -> {'ok', #{change_reason => {'special_trick_end', S1597Special}, diffs => S1598Diffs}}; _ -> 'error' end, {#{inning => {'during_inning', S1594Inning}, meta => S1595GameMeta, snapshot_id => S1586SnapshotId, sync => {'waiting_sync', 'Tianjiupai.RoomServer.Callback':'make_initial_sync'()}, timers => S1588Timers}, {'ok', #{changes => S1599ChangesOpt, hand => S1592SubmitterHand, table => S1591LastTable}}} end end; {'wins_inning', S1600WinnerSeat, S1601LastTable, S1602GainsQuad, S1603SpecialOpt} -> begin {S1604GameMeta, S1605Diffs} = 'Tianjiupai.RoomServer.Callback':'deal_with_inning_end'(S1587GameMeta, S1600WinnerSeat, S1603SpecialOpt, S1602GainsQuad), begin S1607Reason = case S1603SpecialOpt of 'error' -> 'normal_inning_end'; {'ok', S1606Special} -> {'special_inning_end', S1606Special} end, begin S1608Changes = #{change_reason => S1607Reason, diffs => S1605Diffs}, {#{inning => {'inning_end', S1602GainsQuad, 'Tianjiupai.RoomServer.Callback':'make_initial_sync'()}, meta => S1604GameMeta, snapshot_id => S1586SnapshotId, sync => {'waiting_sync', 'Tianjiupai.RoomServer.Callback':'make_initial_sync'()}, timers => S1588Timers}, {'ok', #{changes => {'ok', S1608Changes}, hand => [], table => S1601LastTable}}} end end end end, begin S1613CardOpts = case S1585IsFront of true -> 'SesterlStdlib.List':'map'(fun(S1611Card) -> {'ok', S1611Card} end, S1580Cards); false -> 'SesterlStdlib.List':'map'(fun(S1612Card) -> 'error' end, S1580Cards) end, begin S1620Dummy = 'SesterlStdlib.List':'for_each'(fun(S1614UOpt) -> case S1614UOpt of 'error' -> sesterl_internal_prim:'return'(ok); {'ok', S1615U} -> begin {'ok', S1616Obs} = 'Tianjiupai.RoomServer.Callback':'make_observable_game_state'(S1609GameState, S1615U), begin S1618TrickLast = 'SesterlStdlib.Option':'map'(fun(S1617Last) -> #{changes => maps:get(changes, S1617Last), table => maps:get(table, S1617Last)} end, S1610LastOpt), begin S1619Submission = #{new_state => S1616Obs, seat => S1582Seat, submitted => S1613CardOpts, trick_last => S1618TrickLast}, 'Tianjiupai.RoomServer.Callback':'notify'(S1615U, [{'notify_submission', S1619Submission} | []]) end end end end end, 'Tianjiupai.RoomServer.Callback':'the_other_players'(S1609GameState, S1582Seat)), begin {'ok', S1621Obs} = 'Tianjiupai.RoomServer.Callback':'make_observable_game_state'(S1609GameState, S1579UserId), sesterl_internal_prim:'return'({'ok', {S1621Obs, S1610LastOpt, S1609GameState}}) end end end end end end end end end end.
'handle_submit'(S1623UserId, S1624Cards, S1625State) -> begin S1627Opt = case maps:get(room_state, S1625State) of {'internal_waiting', _} -> sesterl_internal_prim:'return'('error'); {'internal_playing', S1626GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_empty_seat'(S1626GameState) of 'error' -> 'Tianjiupai.RoomServer.Callback':'handle_submit_impl'(S1623UserId, S1624Cards, S1626GameState); {'ok', _} -> sesterl_internal_prim:'return'('error') end end, case S1627Opt of 'error' -> 'SesterlStdlib.GenServer':'reply'({'submission_done', 'error'}, S1625State); {'ok', {S1628Obs, S1629LastOpt, S1630GameState}} -> begin S1633ReversedLogs = case S1629LastOpt of 'error' -> maps:get(reversed_logs, S1625State); {'ok', S1631Last} -> case maps:get(changes, S1631Last) of 'error' -> maps:get(reversed_logs, S1625State); {'ok', S1632Changes} -> [{'log_changes', S1632Changes} | maps:get(reversed_logs, S1625State)] end end, 'SesterlStdlib.GenServer':'reply'({'submission_done', {'ok', {S1628Obs, S1629LastOpt}}}, maps:put(reversed_logs, S1633ReversedLogs, maps:put(room_state, {'internal_playing', S1630GameState}, S1625State))) end end end.
'handle_ack'(S1635UserId, S1636SnapshotId, S1637State) -> begin S1648Opt = case maps:get(room_state, S1637State) of {'internal_waiting', _} -> sesterl_internal_prim:'return'('error'); {'internal_playing', S1638GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1638GameState, S1635UserId) of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', S1639Seat} -> case 'Tianjiupai.SnapshotId':'equal'(S1636SnapshotId, maps:get(snapshot_id, S1638GameState)) of true -> case maps:get(sync, S1638GameState) of {'waiting_sync', S1640SyncQuad} -> begin S1641SyncQuad = 'Tianjiupai.Quad':'update'(S1639Seat, true, S1640SyncQuad), begin _ = begin S2625 = 'Tianjiupai.Logger':'info'({"update sync (snapshot_id: ~p, user_id: ~p, quad: ~p)", 3}, {S1636SnapshotId, S1635UserId, S1641SyncQuad}), S2625(<<"RoomServer.sest">>, 924) end, case 'Tianjiupai.Quad':'decompose'(S1641SyncQuad) of {true, true, true, true} -> begin S1644UserIds = begin S1642UserIdOpts = 'Tianjiupai.RoomServer.Callback':'the_other_players'(S1638GameState, S1639Seat), 'SesterlStdlib.List':'filter_map'(fun(S1643UOpt) -> S1643UOpt end, S1642UserIdOpts) end, begin S1645Dummy = 'Tianjiupai.RoomServer.Callback':'notify_for_each'([S1635UserId | S1644UserIds], ['notify_next_step' | []]), begin S1646GameState = maps:put(sync, 'waiting_input', S1638GameState), sesterl_internal_prim:'return'({'ok', S1646GameState}) end end end; _ -> begin S1647GameState = maps:put(sync, {'waiting_sync', S1641SyncQuad}, S1638GameState), sesterl_internal_prim:'return'({'ok', S1647GameState}) end end end end; 'waiting_input' -> begin _ = begin S2626 = 'Tianjiupai.Logger':'warning'({"waiting input (snapshot_id: ~p, user_id: ~p)", 2}, {S1636SnapshotId, S1635UserId}), S2626(<<"RoomServer.sest">>, 946) end, sesterl_internal_prim:'return'('error') end end; false -> begin _ = begin S2627 = 'Tianjiupai.Logger':'warning'({"snapshot mismatch (got: ~p, expected: ~p, user_id: ~p)", 3}, {S1636SnapshotId, maps:get(snapshot_id, S1638GameState), S1635UserId}), S2627(<<"RoomServer.sest">>, 955) end, sesterl_internal_prim:'return'('error') end end end end, case S1648Opt of 'error' -> 'SesterlStdlib.GenServer':'no_reply'(S1637State); {'ok', S1649GameState} -> 'SesterlStdlib.GenServer':'no_reply'(maps:put(room_state, {'internal_playing', S1649GameState}, S1637State)) end end.
'handle_require_next_inning'(S1651UserId, S1652SnapshotId, S1653State) -> begin S1672Opt = case maps:get(room_state, S1653State) of {'internal_waiting', _} -> sesterl_internal_prim:'return'('error'); {'internal_playing', S1654GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1654GameState, S1651UserId) of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', S1655Seat} -> case 'Tianjiupai.SnapshotId':'equal'(S1652SnapshotId, maps:get(snapshot_id, S1654GameState)) of true -> case maps:get(inning, S1654GameState) of {'during_inning', _} -> sesterl_internal_prim:'return'('error'); {'inning_end', S1656GainsQuad, S1657InningSyncQuad} -> begin S1658InningSyncQuad = 'Tianjiupai.Quad':'update'(S1655Seat, true, S1657InningSyncQuad), begin _ = begin S2629 = 'Tianjiupai.Logger':'info'({"update inning sync (snapshot_id: ~p, inning_sync_quad: ~p)", 2}, {S1652SnapshotId, S1658InningSyncQuad}), S2629(<<"RoomServer.sest">>, 993) end, case 'Tianjiupai.Quad':'decompose'(S1658InningSyncQuad) of {true, true, true, true} -> begin S1659InningIndex = maps:get(inning_index, maps:get(meta, S1654GameState)), begin S1662UserIds = begin S1660UserIdOpts = 'Tianjiupai.RoomServer.Callback':'the_other_players'(S1654GameState, S1655Seat), 'SesterlStdlib.List':'filter_map'(fun(S1661UOpt) -> S1661UOpt end, S1660UserIdOpts) end, begin S1663UserIdsForNotification = [S1651UserId | S1662UserIds], case (S1659InningIndex >= 'Tianjiupai.RoomServer':'maximum_num_innings'()) of true -> begin S1664Dummy = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1663UserIdsForNotification, ['notify_room_close' | []]), sesterl_internal_prim:'return'({'ok', 'room_close'}) end; false -> begin S1665GameState = 'Tianjiupai.RoomServer.Callback':'start_new_inning'(maps:get(meta, S1654GameState), maps:get(timers, S1654GameState)), begin S1668Dummy = 'SesterlStdlib.List':'for_each'(fun(S1666U) -> begin {'ok', S1667Obs} = 'Tianjiupai.RoomServer.Callback':'make_observable_game_state'(S1665GameState, S1666U), 'Tianjiupai.RoomServer.Callback':'notify'(S1666U, [{'notify_game_start', S1667Obs} | []]) end end, [S1651UserId | S1662UserIds]), begin S1670GameIndex = begin S1669Meta = maps:get(meta, S1665GameState), #{inning_index => S1659InningIndex, num_consecutives => maps:get(num_consecutives, S1669Meta)} end, sesterl_internal_prim:'return'({'ok', {'room_transition_to_next_inning', S1665GameState, {'ok', S1670GameIndex}}}) end end end end end end end; _ -> begin S1671GameState = maps:put(inning, {'inning_end', S1656GainsQuad, S1658InningSyncQuad}, S1654GameState), sesterl_internal_prim:'return'({'ok', {'room_transition_to_next_inning', S1671GameState, 'error'}}) end end end end end; false -> sesterl_internal_prim:'return'('error') end end end, case S1672Opt of 'error' -> 'SesterlStdlib.GenServer':'no_reply'(S1653State); {'ok', 'room_close'} -> 'SesterlStdlib.GenServer':'stop'('Tianjiupai.RoomServer':'normal_atom'(), S1653State); {'ok', {'room_transition_to_next_inning', S1673GameState, S1674GameIndexOpt}} -> begin S1676State = case S1674GameIndexOpt of 'error' -> S1653State; {'ok', S1675GameIndex} -> maps:put(reversed_logs, [{'log_game_start', S1675GameIndex} | maps:get(reversed_logs, S1653State)], S1653State) end, 'SesterlStdlib.GenServer':'no_reply'(maps:put(room_state, {'internal_playing', S1673GameState}, S1676State)) end end end.
'handle_set_connection_status'(S1678UserId, S1679IsConnected, S1680State) -> begin S1717Opt = case maps:get(room_state, S1680State) of {'internal_waiting', S1681WaitingState} -> begin S1682Members0 = maps:get(members, S1681WaitingState), case 'SesterlStdlib.List':'filter'(fun(S1683W) -> 'SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1683W)), S1678UserId) end, S1682Members0) of [] -> sesterl_internal_prim:'return'('error'); [S1684W | _] -> begin S1685User = maps:get(user, S1684W), begin S1694Acc = 'SesterlStdlib.List':'foldl_effect'(fun(S1686Acc, S1687W0) -> begin S1693W1 = case 'SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1687W0)), S1678UserId) of true -> case S1679IsConnected of true -> begin S1690Res = case maps:get(disconnected, S1687W0) of 'error' -> sesterl_internal_prim:'return'({'ok', ok}); {'ok', S1688Timer} -> begin S1689Res = 'SesterlStdlib.Timer':'cancel'(S1688Timer), begin _ = begin S2631 = 'Tianjiupai.Logger':'info'({"cancels timer (waiting, user_id: ~p, timer: ~p, result: ~p)", 3}, {S1678UserId, S1688Timer, S1689Res}), S2631(<<"RoomServer.sest">>, 1084) end, sesterl_internal_prim:'return'(S1689Res) end end end, sesterl_internal_prim:'return'(maps:put(disconnected, 'error', S1687W0)) end; false -> begin S1691Res = 'SesterlStdlib.Timer':'send_after_self'('Tianjiupai.RoomServer':'disconnection_timeout'(), {'disconnection_timeout', S1678UserId}), begin _ = begin S2632 = 'Tianjiupai.Logger':'info'({"sets timer (waiting, user_id: ~p, result: ~p)", 2}, {S1678UserId, S1691Res}), S2632(<<"RoomServer.sest">>, 1099) end, begin {'ok', S1692Timer} = S1691Res, sesterl_internal_prim:'return'(maps:put(disconnected, {'ok', S1692Timer}, S1687W0)) end end end end; false -> sesterl_internal_prim:'return'(S1687W0) end, sesterl_internal_prim:'return'([S1693W1 | S1686Acc]) end end, [], S1682Members0), begin S1695Members1 = 'SesterlStdlib.List':'reverse'(S1694Acc), begin S1698UserIdsForNotification = 'SesterlStdlib.List':'filter_map'(fun(S1696W) -> case maps:get(disconnected, S1696W) of 'error' -> begin S1697U = maps:get(user_id, maps:get(user, S1696W)), case 'SesterlStdlib.Binary':'equal'(S1697U, S1678UserId) of true -> 'error'; false -> {'ok', S1697U} end end; {'ok', _} -> 'error' end end, S1695Members1), sesterl_internal_prim:'return'({'ok', {S1685User, S1698UserIdsForNotification, {'internal_waiting', #{members => S1695Members1}}}}) end end end end end end; {'internal_playing', S1699GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1699GameState, S1678UserId) of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', S1700Seat} -> begin S1701GameMeta = maps:get(meta, S1699GameState), begin S1702Players0 = maps:get(players, S1701GameMeta), begin {'ok', S1703P0} = 'Tianjiupai.Quad':'access'(S1700Seat, S1702Players0), begin S1704P1 = maps:put(is_connected, S1679IsConnected, S1703P0), begin S1705Players1 = 'Tianjiupai.Quad':'update'(S1700Seat, {'ok', S1704P1}, S1702Players0), begin S1709UserIdsForNotification = 'SesterlStdlib.List':'filter_map'(fun(S1706GOpt) -> case S1706GOpt of 'error' -> 'error'; {'ok', S1707G} -> case maps:get(is_connected, S1707G) of true -> begin S1708U = maps:get(user_id, maps:get(user, S1707G)), case 'SesterlStdlib.Binary':'equal'(S1708U, S1678UserId) of true -> 'error'; false -> {'ok', S1708U} end end; false -> 'error' end end end, 'Tianjiupai.Quad':'to_list'(S1705Players1)), begin S1715TimerQuad = begin S1710TimerQuad = maps:get(timers, S1699GameState), case S1679IsConnected of true -> case 'Tianjiupai.Quad':'access'(S1700Seat, S1710TimerQuad) of 'error' -> begin _ = begin S2633 = 'Tianjiupai.Logger':'info'({"no timer (playing, seat: ~p, user_id: ~p)", 2}, {S1700Seat, S1678UserId}), S2633(<<"RoomServer.sest">>, 1167) end, sesterl_internal_prim:'return'(S1710TimerQuad) end; {'ok', S1711Timer} -> begin S1712Res = 'SesterlStdlib.Timer':'cancel'(S1711Timer), begin _ = begin S2634 = 'Tianjiupai.Logger':'info'({"cancels timer (playing, user_id: ~p, timer: ~p, result: ~p)", 3}, {S1678UserId, S1711Timer, S1712Res}), S2634(<<"RoomServer.sest">>, 1176) end, sesterl_internal_prim:'return'('Tianjiupai.Quad':'update'(S1700Seat, 'error', S1710TimerQuad)) end end end; false -> begin S1713Res = 'SesterlStdlib.Timer':'send_after_self'('Tianjiupai.RoomServer':'disconnection_timeout'(), {'disconnection_timeout', S1678UserId}), begin _ = begin S2635 = 'Tianjiupai.Logger':'info'({"sets timer (playing, seat: ~p, user_id: ~p, result: ~p)", 3}, {S1700Seat, S1678UserId, S1713Res}), S2635(<<"RoomServer.sest">>, 1189) end, begin {'ok', S1714Timer} = S1713Res, sesterl_internal_prim:'return'('Tianjiupai.Quad':'update'(S1700Seat, {'ok', S1714Timer}, S1710TimerQuad)) end end end end end, begin S1716GameState = maps:put(timers, S1715TimerQuad, maps:put(meta, maps:put(players, S1705Players1, S1701GameMeta), S1699GameState)), sesterl_internal_prim:'return'({'ok', {maps:get(user, S1704P1), S1709UserIdsForNotification, {'internal_playing', S1716GameState}}}) end end end end end end end end end end, case S1717Opt of 'error' -> 'SesterlStdlib.GenServer':'no_reply'(S1680State); {'ok', {S1718User, S1719UserIdsForNotification, S1720RoomState}} -> begin S1721Connection = #{is_connected => S1679IsConnected, user => S1718User}, begin S1722Dummy = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1719UserIdsForNotification, [{'notify_connection', S1721Connection} | []]), begin S1723State = maps:put(reversed_logs, [{'log_connection', S1721Connection} | maps:get(reversed_logs, S1680State)], maps:put(room_state, S1720RoomState, S1680State)), 'SesterlStdlib.GenServer':'no_reply'(S1723State) end end end end end.
      send_room_deletion_to_user_server(UserId) ->
          try
              _ = 'Tianjiupai.User':set_room(UserId, error),
              ok
          catch
              _:_ -> ok
          end.
    
'handle_disconnection_timeout'(S1726UserId, S1727State) -> begin _ = begin S2637 = 'Tianjiupai.Logger':'info'({"disconnection timeout (user_id: ~p)", 1}, {S1726UserId}), S2637(<<"RoomServer.sest">>, 1235) end, begin S1728RoomState0 = maps:get(room_state, S1727State), begin S1752Pair = case S1728RoomState0 of {'internal_waiting', S1729WaitingState} -> begin S1730WaitingMembers0 = maps:get(members, S1729WaitingState), case 'SesterlStdlib.List':'filter'(fun(S1731W) -> 'SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1731W)), S1726UserId) end, S1730WaitingMembers0) of [] -> sesterl_internal_prim:'return'({'error', S1728RoomState0}); [S1732W | _] -> begin S1733User = maps:get(user, S1732W), begin S1735WaitingMembers1 = 'SesterlStdlib.List':'filter'(fun(S1734W) -> 'SesterlStdlib.Bool':'not'('SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1734W)), S1726UserId)) end, S1730WaitingMembers0), begin S1736Dummy = 'Tianjiupai.RoomServer.Callback':'send_room_deletion_to_user_server'(S1726UserId), begin S1739Dummy = begin S1738UserIds = 'SesterlStdlib.List':'filter_map'(fun(S1737W) -> case maps:get(disconnected, S1737W) of 'error' -> {'ok', maps:get(user_id, maps:get(user, S1737W))}; {'ok', _} -> 'error' end end, S1730WaitingMembers0), 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1738UserIds, [{'notify_exited', S1733User} | []]) end, sesterl_internal_prim:'return'({{'ok', S1733User}, {'internal_waiting', maps:put(members, S1735WaitingMembers1, S1729WaitingState)}}) end end end end end end; {'internal_playing', S1740GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1740GameState, S1726UserId) of 'error' -> sesterl_internal_prim:'return'({'error', S1728RoomState0}); {'ok', S1741Seat} -> begin S1742Meta0 = maps:get(meta, S1740GameState), begin S1743Players0 = maps:get(players, S1742Meta0), begin {'ok', S1744Player} = 'Tianjiupai.Quad':'access'(S1741Seat, S1743Players0), begin S1745User = maps:get(user, S1744Player), begin S1749Dummy = begin S1748UserIds = begin S1746UserIdOpts = 'Tianjiupai.RoomServer.Callback':'the_other_players'(S1740GameState, S1741Seat), 'SesterlStdlib.List':'filter_map'(fun(S1747UOpt) -> S1747UOpt end, S1746UserIdOpts) end, 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1748UserIds, [{'notify_exited', S1745User} | []]) end, begin S1750Players1 = 'Tianjiupai.Quad':'update'(S1741Seat, 'error', S1743Players0), begin S1751GameState = maps:put(timers, 'Tianjiupai.Quad':'update'(S1741Seat, 'error', maps:get(timers, S1740GameState)), maps:put(meta, maps:put(players, S1750Players1, S1742Meta0), S1740GameState)), sesterl_internal_prim:'return'({{'ok', S1745User}, {'internal_playing', S1751GameState}}) end end end end end end end end end, begin {S1753UserOpt, S1754RoomState1} = S1752Pair, begin S1756State = case S1753UserOpt of {'ok', S1755User} -> maps:put(room_state, S1754RoomState1, maps:put(reversed_logs, [{'log_exited', S1755User} | maps:get(reversed_logs, S1727State)], S1727State)); 'error' -> maps:put(room_state, S1754RoomState1, S1727State) end, 'SesterlStdlib.GenServer':'no_reply'(S1756State) end end end end end.
'update_sync'(S1758UserId, S1759State) -> case maps:get(room_state, S1759State) of {'internal_waiting', _} -> sesterl_internal_prim:'return'(S1759State); {'internal_playing', S1760GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1760GameState, S1758UserId) of 'error' -> sesterl_internal_prim:'return'(S1759State); {'ok', S1761Seat} -> case maps:get(sync, S1760GameState) of 'waiting_input' -> sesterl_internal_prim:'return'(S1759State); {'waiting_sync', S1762SyncQuad} -> begin S1763SyncQuad = 'Tianjiupai.Quad':'update'(S1761Seat, true, S1762SyncQuad), case 'Tianjiupai.Quad':'decompose'(S1763SyncQuad) of {true, true, true, true} -> begin S1766UserIds = begin S1764UserIdOpts = 'Tianjiupai.RoomServer.Callback':'the_other_players'(S1760GameState, S1761Seat), 'SesterlStdlib.List':'filter_map'(fun(S1765UOpt) -> S1765UOpt end, S1764UserIdOpts) end, begin S1767Dummy = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1766UserIds, ['notify_next_step' | []]), begin S1768GameState = maps:put(sync, 'waiting_input', S1760GameState), sesterl_internal_prim:'return'(maps:put(room_state, {'internal_playing', S1768GameState}, S1759State)) end end end; _ -> begin S1769GameState = maps:put(sync, {'waiting_sync', S1763SyncQuad}, S1760GameState), sesterl_internal_prim:'return'(maps:put(room_state, {'internal_playing', S1769GameState}, S1759State)) end end end end end end.
'handle_call'(S1771Req, S1772From, S1773State) -> case S1771Req of 'get_whole_state' -> begin S1774WholeState = 'Tianjiupai.RoomServer.Callback':'make_whole_room_state'(S1773State), 'SesterlStdlib.GenServer':'reply'({'whole_state', S1774WholeState}, S1773State) end; {'get_personal_state', S1775UserId} -> begin S1776State = 'Tianjiupai.RoomServer.Callback':'update_sync'(S1775UserId, S1773State), begin S1777PersonalStateOpt = 'Tianjiupai.RoomServer.Callback':'make_personal_state'(S1776State, S1775UserId), 'SesterlStdlib.GenServer':'reply'({'personal_state', S1777PersonalStateOpt}, S1776State) end end; {'send_chat', S1778User, S1779Text} -> 'Tianjiupai.RoomServer.Callback':'handle_send_chat'(S1778User, S1779Text, S1773State); {'attend', S1780User} -> 'Tianjiupai.RoomServer.Callback':'handle_attend'(S1780User, S1773State); {'exit', S1781UserId} -> 'Tianjiupai.RoomServer.Callback':'handle_exit'(S1781UserId, S1773State); {'submit', S1782UserId, S1783Cards} -> 'Tianjiupai.RoomServer.Callback':'handle_submit'(S1782UserId, S1783Cards, S1773State) end.
'handle_cast'(S1785Msg, S1786State) -> case S1785Msg of {'ack', S1787UserId, S1788SnapshotId} -> 'Tianjiupai.RoomServer.Callback':'handle_ack'(S1787UserId, S1788SnapshotId, S1786State); {'require_next_inning', S1789UserId, S1790SnapshotId} -> 'Tianjiupai.RoomServer.Callback':'handle_require_next_inning'(S1789UserId, S1790SnapshotId, S1786State); {'set_connection_status', S1791UserId, S1792IsConnected} -> 'Tianjiupai.RoomServer.Callback':'handle_set_connection_status'(S1791UserId, S1792IsConnected, S1786State) end.
'handle_info'(S1794Info, S1795State) -> case S1794Info of {'disconnection_timeout', S1796UserId} -> 'Tianjiupai.RoomServer.Callback':'handle_disconnection_timeout'(S1796UserId, S1795State); _ -> begin _ = begin S2642 = 'Tianjiupai.Logger':'warning'({"unexpected info (info: ~p, state: ~p)", 2}, {S1794Info, S1795State}), S2642(<<"RoomServer.sest">>, 1391) end, 'SesterlStdlib.GenServer':'no_reply'(S1795State) end end.
'terminate'(S1798State) -> begin _ = begin S2644 = 'Tianjiupai.Logger':'info'({"terminate (room_id: ~p)", 1}, {maps:get(room_id, maps:get(settings, S1798State))}), S2644(<<"RoomServer.sest">>, 1396) end, sesterl_internal_prim:'return'(ok) end.
