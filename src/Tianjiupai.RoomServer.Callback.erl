-module('Tianjiupai.RoomServer.Callback').
-export(['set_disconnection_timer'/2, 'cancel_disconnection_timer'/3, 'get_members_from_state'/1, 'make_whole_room_state'/1, 'update_plaza'/1, 'init'/1, 'reply'/2, 'no_reply'/1, 'find_user_seat'/2, 'get_connected_user_ids'/2, 'get_connected_user_ids_from_list'/2, 'get_connected_user_ids_from_quad'/2, 'get_all_connected_user_ids'/1, 'make_game_player'/1, 'make_game_meta'/1, 'make_observable_game_state'/2, 'make_observable'/2, 'make_personal_state'/2, 'make_initial_sync'/0, 'start_new_inning'/1, 'notify'/2, 'notify_for_each'/2, 'stop'/1, 'find_empty_seat'/1, 'handle_send_chat'/3, 'is_none'/1, 'handle_attend'/3, 'handle_exit'/2, 'make_winner_diff'/1, 'update_score'/2, 'deal_with_trick_end'/3, 'make_loser_updates_when_parent_wins'/4, 'make_loser_updates_when_child_wins'/5, 'deal_with_inning_end'/4, 'handle_submit_impl'/3, 'handle_submit'/3, 'handle_ack'/3, 'handle_require_next_inning'/3, 'handle_set_connection'/3, 'send_room_deletion_to_user_server'/1, 'handle_disconnection_timeout'/2, 'update_sync'/2, 'handle_call'/3, 'handle_cast'/2, 'handle_timeout'/1, 'handle_down'/4, 'handle_info'/2, 'terminate'/2]).
'set_disconnection_timer'(S1522UserId, S1523Message) -> begin S1524Res = 'SesterlStdlib.Timer':'send_after_self'('Tianjiupai.Constants':'disconnection_timeout'(), {'disconnection_timeout', S1522UserId}), begin _ = begin S2890 = 'Tianjiupai.Logger':'debug'({"sets timer (~s, user_id: ~s, result: ~p)", 3}, {S1523Message, S1522UserId, S1524Res}), S2890(<<"RoomServer.sest">>, 164) end, sesterl_internal_prim:'return'(S1524Res) end end.
'cancel_disconnection_timer'(S1526Timer, S1527UserId, S1528Message) -> begin S1529Res = 'SesterlStdlib.Timer':'cancel'(S1526Timer), begin _ = begin S2892 = 'Tianjiupai.Logger':'debug'({"cancels timer (~s, user_id: ~s, timer: ~p, result: ~p)", 4}, {S1528Message, S1527UserId, S1526Timer, S1529Res}), S2892(<<"RoomServer.sest">>, 174) end, sesterl_internal_prim:'return'(S1529Res) end end.
'get_members_from_state'(S1531RoomState) -> case S1531RoomState of {'internal_waiting', S1532WaitingState} -> {false, 'SesterlStdlib.List':'map'(fun(S1533W) -> maps:get(user, S1533W) end, maps:get(members, S1532WaitingState))}; {'internal_playing', S1534WholeGameState} -> begin {'meta', S1535Meta} = maps:get(meta, S1534WholeGameState), begin S1536PlayerOpts = 'Tianjiupai.Quad':'to_list'(maps:get(players, S1535Meta)), begin S1539Members = 'SesterlStdlib.List':'filter_map'(fun(S1537PlayerOpt) -> case S1537PlayerOpt of 'error' -> 'error'; {'ok', S1538Player} -> {'ok', maps:get(user, S1538Player)} end end, S1536PlayerOpts), {true, S1539Members} end end end end.
'make_whole_room_state'(S1541State) -> begin S1542Settings = maps:get(settings, S1541State), begin {S1543IsPlaying, S1544Members} = 'Tianjiupai.RoomServer.Callback':'get_members_from_state'(maps:get(room_state, S1541State)), #{is_playing => S1543IsPlaying, members => S1544Members, room => #{room_id => maps:get(room_id, S1542Settings), room_name => maps:get(room_name, S1542Settings)}} end end.
'update_plaza'(S1546State) -> begin S1547RoomSummary = 'Tianjiupai.RoomServer.Callback':'make_whole_room_state'(S1546State), 'Tianjiupai.PlazaServer':'update_room'(S1547RoomSummary) end.
'init'(S1549InitArg) -> begin {S1550RoomId, S1551RoomName} = S1549InitArg, begin S1552Settings = #{room_id => S1550RoomId, room_name => S1551RoomName}, begin S1553State = #{reversed_logs => [], room_state => {'internal_waiting', #{members => []}}, settings => S1552Settings}, begin _ = 'Tianjiupai.RoomServer.Callback':'update_plaza'(S1553State), 'SesterlStdlib.GenServer':'init_ok'(S1553State, #{timeout => 'Tianjiupai.Constants':'room_expiration_timeout'()}) end end end end.
'reply'(S1555Response, S1556State) -> 'SesterlStdlib.GenServer':'reply'(S1555Response, S1556State, #{timeout => 'Tianjiupai.Constants':'room_expiration_timeout'()}).
'no_reply'(S1558State) -> 'SesterlStdlib.GenServer':'no_reply'(S1558State, #{timeout => 'Tianjiupai.Constants':'room_expiration_timeout'()}).
'find_user_seat'(S1560GameState, S1561UserId) -> begin {'meta', S1562Meta} = maps:get(meta, S1560GameState), begin S1565Opt = 'Tianjiupai.Quad':'find'(fun(S1563PlayerOpt) -> case S1563PlayerOpt of 'error' -> false; {'ok', S1564Player} -> 'SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1564Player)), S1561UserId) end end, maps:get(players, S1562Meta)), 'SesterlStdlib.Option':'map'(fun({S1566Seat, {'ok', S1567Player}}) -> {S1566Seat, S1567Player} end, S1565Opt) end end.
'get_connected_user_ids'(S1569GameState, S1570Seat0) -> begin {'meta', S1571Meta} = maps:get(meta, S1569GameState), begin {S1572PA, S1573PB, S1574PC, S1575PD} = 'Tianjiupai.Quad':'decompose'(maps:get(players, S1571Meta)), begin S1576Players = [{'seat_a', S1572PA} | [{'seat_b', S1573PB} | [{'seat_c', S1574PC} | [{'seat_d', S1575PD} | []]]]], 'SesterlStdlib.List':'filter_map'(fun({S1577Seat, S1578PlayerOpt}) -> case 'Tianjiupai.Quad':'seat_equal'(S1577Seat, S1570Seat0) of true -> 'error'; false -> 'SesterlStdlib.Option':'bind'(S1578PlayerOpt, fun(S1579Player) -> case maps:get(connection, S1579Player) of {'connected', _, _} -> {'ok', maps:get(user_id, maps:get(user, S1579Player))}; {'disconnected', _} -> 'error' end end) end end, S1576Players) end end end.
'get_connected_user_ids_from_list'(S1581Players, S1582UserId) -> 'SesterlStdlib.List':'filter_map'(fun(S1583P) -> case maps:get(connection, S1583P) of {'connected', _, _} -> begin S1584U = maps:get(user_id, maps:get(user, S1583P)), case 'SesterlStdlib.Binary':'equal'(S1584U, S1582UserId) of true -> 'error'; false -> {'ok', S1584U} end end; {'disconnected', _} -> 'error' end end, S1581Players).
'get_connected_user_ids_from_quad'(S1586Players, S1587UserId) -> 'SesterlStdlib.List':'filter_map'(fun(S1588GOpt) -> case S1588GOpt of 'error' -> 'error'; {'ok', S1589G} -> case maps:get(connection, S1589G) of {'connected', _, _} -> begin S1590U = maps:get(user_id, maps:get(user, S1589G)), case 'SesterlStdlib.Binary':'equal'(S1590U, S1587UserId) of true -> 'error'; false -> {'ok', S1590U} end end; {'disconnected', _} -> 'error' end end end, 'Tianjiupai.Quad':'to_list'(S1586Players)).
'get_all_connected_user_ids'(S1592State) -> case maps:get(room_state, S1592State) of {'internal_waiting', S1593WaitingState} -> 'SesterlStdlib.List':'filter_map'(fun(S1594Player) -> case maps:get(connection, S1594Player) of {'connected', _, _} -> {'ok', maps:get(user_id, maps:get(user, S1594Player))}; {'disconnected', _} -> 'error' end end, maps:get(members, S1593WaitingState)); {'internal_playing', S1595WholeGameState} -> begin {'meta', S1596Meta} = maps:get(meta, S1595WholeGameState), 'SesterlStdlib.List':'filter_map'(fun(S1597PlayerOpt) -> case S1597PlayerOpt of 'error' -> 'error'; {'ok', S1598Player} -> case maps:get(connection, S1598Player) of {'connected', _, _} -> {'ok', maps:get(user_id, maps:get(user, S1598Player))}; {'disconnected', _} -> 'error' end end end, 'Tianjiupai.Quad':'to_list'(maps:get(players, S1596Meta))) end end.
'make_game_player'(S1600Iplayer) -> begin S1601IsConnected = case maps:get(connection, S1600Iplayer) of {'connected', _, _} -> true; {'disconnected', _} -> false end, #{is_connected => S1601IsConnected, user => maps:get(user, S1600Iplayer)} end.
'make_game_meta'({'meta', S1603Meta}) -> #{inning_index => maps:get(inning_index, S1603Meta), num_consecutives => maps:get(num_consecutives, S1603Meta), parent_seat => maps:get(parent_seat, S1603Meta), players => 'Tianjiupai.Quad':'map'(fun(S1604Opt) -> 'SesterlStdlib.Option':'map'((fun 'Tianjiupai.RoomServer.Callback':'make_game_player'/1), S1604Opt) end, maps:get(players, S1603Meta)), scores => maps:get(scores, S1603Meta)}.
'make_observable_game_state'(S1606GameState, S1607UserId) -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1606GameState, S1607UserId) of 'error' -> 'error'; {'ok', {S1608Seat, _}} -> begin S1609Synchronizing = case maps:get(sync, S1606GameState) of 'waiting_input' -> false; {'waiting_sync', _} -> true end, begin S1612ObservableInning = case maps:get(inning, S1606GameState) of {'during_inning', S1610Inning} -> {'observable_during_inning', 'Tianjiupai.Inning':'observe'(S1608Seat, S1610Inning)}; {'inning_end', S1611GainsQuad, _} -> {'observable_inning_end', S1611GainsQuad} end, {'ok', #{meta => 'Tianjiupai.RoomServer.Callback':'make_game_meta'(maps:get(meta, S1606GameState)), observable_inning => S1612ObservableInning, snapshot_id => maps:get(snapshot_id, S1606GameState), synchronizing => S1609Synchronizing}} end end end.
'make_observable'(S1614RoomState, S1615UserId) -> case S1614RoomState of {'internal_waiting', S1616WaitingState} -> begin S1618Members = 'SesterlStdlib.List':'map'(fun(S1617W) -> maps:get(user, S1617W) end, maps:get(members, S1616WaitingState)), {'ok', {'waiting_start', S1618Members}} end; {'internal_playing', S1619GameState} -> 'SesterlStdlib.Option':'map'(fun(S1620Obs) -> {'playing_game', S1620Obs} end, 'Tianjiupai.RoomServer.Callback':'make_observable_game_state'(S1619GameState, S1615UserId)) end.
'make_personal_state'(S1622State, S1623UserId) -> begin S1624Settings = maps:get(settings, S1622State), case 'Tianjiupai.RoomServer.Callback':'make_observable'(maps:get(room_state, S1622State), S1623UserId) of 'error' -> 'error'; {'ok', S1625Observable} -> {'ok', #{game => S1625Observable, logs => 'SesterlStdlib.List':'reverse'(maps:get(reversed_logs, S1622State)), room => #{room_id => maps:get(room_id, S1624Settings), room_name => maps:get(room_name, S1624Settings)}}} end end.
'make_initial_sync'() -> 'Tianjiupai.Quad':'make'({false, false, false, false}).
'start_new_inning'({'meta', S1628Meta}) -> begin S1629NextParentSeat = maps:get(parent_seat, S1628Meta), begin S1630Inning = 'Tianjiupai.Inning':'start'(S1629NextParentSeat), begin S1631SnapshotId = 'Tianjiupai.SnapshotId':'generate'(), sesterl_internal_prim:'return'(#{inning => {'during_inning', S1630Inning}, meta => {'meta', S1628Meta}, snapshot_id => S1631SnapshotId, sync => {'waiting_sync', 'Tianjiupai.RoomServer.Callback':'make_initial_sync'()}}) end end end.
'notify'(S1633UserId, S1634Notifications) -> 'Tianjiupai.WebSocketHandler':'notify'(S1633UserId, S1634Notifications).
'notify_for_each'(S1636UserIds, S1637Notifications) -> 'SesterlStdlib.List':'for_each'(fun(S1638UserId) -> 'Tianjiupai.RoomServer.Callback':'notify'(S1638UserId, S1637Notifications) end, S1636UserIds).
'stop'(S1640State) -> begin S1641UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_all_connected_user_ids'(S1640State), begin _ = begin S2914 = 'Tianjiupai.Logger':'debug'({"delete room sync (room_id: ~p)", 1}, {maps:get(room_id, maps:get(settings, S1640State))}), S2914(<<"RoomServer.sest">>, 425) end, begin ok = 'Tianjiupai.PlazaServer':'delete_room_sync'(maps:get(room_id, maps:get(settings, S1640State))), begin _ = begin S2915 = 'Tianjiupai.Logger':'debug'({"deleted from plaza (room_id: ~p)", 1}, {maps:get(room_id, maps:get(settings, S1640State))}), S2915(<<"RoomServer.sest">>, 427) end, begin ok = 'SesterlStdlib.List':'foldl_effect'(fun(ok, S1642UserId) -> begin _ = 'Tianjiupai.WebSocketHandler':'notify_room_close'(S1642UserId), sesterl_internal_prim:'return'(ok) end end, ok, S1641UserIdsForNotification), 'SesterlStdlib.GenServer':'no_reply_and_stop'('SesterlStdlib.StopReason':'normal'(), S1640State) end end end end end.
'find_empty_seat'(S1644GameState) -> begin {'meta', S1645Meta} = maps:get(meta, S1644GameState), 'SesterlStdlib.Option':'map'(fun(S1646Pair) -> begin {S1647Seat, _} = S1646Pair, S1647Seat end end, 'Tianjiupai.Quad':'find'(fun(S1648PlayerOpt) -> case S1648PlayerOpt of {'ok', _} -> false; 'error' -> true end end, maps:get(players, S1645Meta))) end.
'handle_send_chat'(S1650User, S1651Text, S1652State) -> begin {_, S1653Members} = 'Tianjiupai.RoomServer.Callback':'get_members_from_state'(maps:get(room_state, S1652State)), begin S1654Comment = #{from => S1650User, text => S1651Text}, begin _ = begin S1656UserIds = 'SesterlStdlib.List':'map'(fun(S1655U) -> maps:get(user_id, S1655U) end, S1653Members), 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1656UserIds, [{'notify_comment', S1654Comment} | []]) end, 'Tianjiupai.RoomServer.Callback':'reply'('chat_sent', maps:put(reversed_logs, [{'log_comment', S1654Comment} | maps:get(reversed_logs, S1652State)], S1652State)) end end end.
'is_none'(S1658X) -> case S1658X of 'error' -> true; {'ok', _} -> false end.
'handle_attend'(S1660User, S1661WsProc, S1662State) -> begin S1663UserId = maps:get(user_id, S1660User), case maps:get(room_state, S1662State) of {'internal_playing', S1664GameState0} -> case 'Tianjiupai.RoomServer.Callback':'find_empty_seat'(S1664GameState0) of 'error' -> 'Tianjiupai.RoomServer.Callback':'reply'({'attended', 'error'}, S1662State); {'ok', S1665Seat} -> begin {'meta', S1666Meta0} = maps:get(meta, S1664GameState0), begin S1667WsMref = 'Tianjiupai.WebSocketHandler':'monitor'(S1661WsProc), begin S1668Player = #{connection => {'connected', S1661WsProc, S1667WsMref}, user => S1660User}, begin S1669Players1 = 'Tianjiupai.Quad':'update'(S1665Seat, {'ok', S1668Player}, maps:get(players, S1666Meta0)), begin S1670GameState1 = maps:put(meta, {'meta', maps:put(players, S1669Players1, S1666Meta0)}, S1664GameState0), begin S1671UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids'(S1670GameState1, S1665Seat), begin S1676GameState2 = case maps:get(sync, S1670GameState1) of 'waiting_input' -> begin _ = begin S2920 = 'Tianjiupai.Logger':'debug'({"attend -> waiting input (seat: ~p, user_id: ~s)", 2}, {S1665Seat, S1663UserId}), S2920(<<"RoomServer.sest">>, 486) end, begin S1672Notif = {'notify_entered_midway', #{seat => S1665Seat, user => S1660User}}, begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1671UserIdsForNotification, [S1672Notif | []]), sesterl_internal_prim:'return'(S1670GameState1) end end end; {'waiting_sync', S1673SyncQuad0} -> case 'Tianjiupai.Quad':'access'(S1665Seat, S1673SyncQuad0) of true -> begin _ = begin S2921 = 'Tianjiupai.Logger':'debug'({"attend -> no need to sync (seat: ~p, user_id: ~s, sync_quad: ~p)", 3}, {S1665Seat, S1663UserId, S1673SyncQuad0}), S2921(<<"RoomServer.sest">>, 498) end, begin S1674Notif = {'notify_entered_midway', #{seat => S1665Seat, user => S1660User}}, begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1671UserIdsForNotification, [S1674Notif | []]), sesterl_internal_prim:'return'(S1670GameState1) end end end; false -> begin S1675SyncQuad1 = 'Tianjiupai.Quad':'update'(S1665Seat, true, S1673SyncQuad0), begin _ = begin S2922 = 'Tianjiupai.Logger':'debug'({"attend -> sync update (seat: ~p, user_id: ~s, sync_quad: ~p)", 3}, {S1665Seat, S1663UserId, S1675SyncQuad1}), S2922(<<"RoomServer.sest">>, 509) end, case 'Tianjiupai.Quad':'decompose'(S1675SyncQuad1) of {true, true, true, true} -> begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1671UserIdsForNotification, [{'notify_entered_midway', #{seat => S1665Seat, user => S1660User}} | ['notify_next_step' | []]]), sesterl_internal_prim:'return'(maps:put(sync, 'waiting_input', S1670GameState1)) end; _ -> begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1671UserIdsForNotification, [{'notify_entered_midway', #{seat => S1665Seat, user => S1660User}} | []]), sesterl_internal_prim:'return'(maps:put(sync, {'waiting_sync', S1675SyncQuad1}, S1670GameState1)) end end end end end end, begin S1677State = maps:put(reversed_logs, [{'log_entered', S1660User} | maps:get(reversed_logs, S1662State)], maps:put(room_state, {'internal_playing', S1676GameState2}, S1662State)), begin ok = 'Tianjiupai.RoomServer.Callback':'update_plaza'(S1677State), begin {'ok', S1678PersonalState} = 'Tianjiupai.RoomServer.Callback':'make_personal_state'(S1677State, S1663UserId), 'Tianjiupai.RoomServer.Callback':'reply'({'attended', {'ok', S1678PersonalState}}, S1677State) end end end end end end end end end end end; {'internal_waiting', S1679WaitingState} -> begin S1680Members = maps:get(members, S1679WaitingState), case 'SesterlStdlib.List':'any'(fun(S1681W) -> 'SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1681W)), S1663UserId) end, S1680Members) of true -> begin {'ok', S1682PersonalState} = 'Tianjiupai.RoomServer.Callback':'make_personal_state'(S1662State, S1663UserId), 'Tianjiupai.RoomServer.Callback':'reply'({'attended', {'ok', S1682PersonalState}}, S1662State) end; false -> begin S1683WsMref = 'Tianjiupai.WebSocketHandler':'monitor'(S1661WsProc), begin S1684LogEnter = {'log_entered', S1660User}, begin S1685NotifEnter = {'notify_entered', S1660User}, case S1680Members of [S1686W0 | [S1687W1 | [S1688W2 | _]]] -> begin S1689U0 = maps:get(user, S1686W0), begin S1690U1 = maps:get(user, S1687W1), begin S1691U2 = maps:get(user, S1688W2), begin S1696PlayerQuad = begin S1692Player0 = #{connection => maps:get(connection, S1686W0), user => S1689U0}, begin S1693Player1 = #{connection => maps:get(connection, S1687W1), user => S1690U1}, begin S1694Player2 = #{connection => maps:get(connection, S1688W2), user => S1691U2}, begin S1695Player3 = #{connection => {'connected', S1661WsProc, S1683WsMref}, user => S1660User}, 'Tianjiupai.Quad':'make'({{'ok', S1692Player0}, {'ok', S1693Player1}, {'ok', S1694Player2}, {'ok', S1695Player3}}) end end end end, begin S1697ParentSeat = 'seat_a', begin S1698WholeGameMeta = {'meta', #{inning_index => 0, num_consecutives => 0, parent_seat => S1697ParentSeat, players => S1696PlayerQuad, scores => 'Tianjiupai.Quad':'make'({0, 0, 0, 0})}}, begin S1699GameIndex = #{inning_index => 0, num_consecutives => 0}, begin S1700GameState = 'Tianjiupai.RoomServer.Callback':'start_new_inning'(S1698WholeGameMeta), begin _ = 'SesterlStdlib.List':'for_each'(fun(S1701U) -> case 'Tianjiupai.RoomServer.Callback':'make_observable_game_state'(S1700GameState, S1701U) of 'error' -> sesterl_internal_prim:'return'(ok); {'ok', S1702Obs} -> 'Tianjiupai.RoomServer.Callback':'notify'(S1701U, [S1685NotifEnter | [{'notify_game_start', S1702Obs} | []]]) end end, [maps:get(user_id, S1689U0) | [maps:get(user_id, S1690U1) | [maps:get(user_id, S1691U2) | []]]]), begin S1703State = maps:put(reversed_logs, [{'log_game_start', S1699GameIndex} | [S1684LogEnter | maps:get(reversed_logs, S1662State)]], maps:put(room_state, {'internal_playing', S1700GameState}, S1662State)), begin ok = 'Tianjiupai.RoomServer.Callback':'update_plaza'(S1703State), begin {'ok', S1704PersonalState} = 'Tianjiupai.RoomServer.Callback':'make_personal_state'(S1703State, S1663UserId), 'Tianjiupai.RoomServer.Callback':'reply'({'attended', {'ok', S1704PersonalState}}, S1703State) end end end end end end end end end end end end; _ -> begin S1705W = #{connection => {'connected', S1661WsProc, S1683WsMref}, user => S1660User}, begin S1706WaitingState = maps:put(members, 'SesterlStdlib.List':'append'(S1680Members, [S1705W | []]), S1679WaitingState), begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'('SesterlStdlib.List':'map'(fun(S1707W) -> maps:get(user_id, maps:get(user, S1707W)) end, S1680Members), [S1685NotifEnter | []]), begin S1708State = maps:put(reversed_logs, [S1684LogEnter | maps:get(reversed_logs, S1662State)], maps:put(room_state, {'internal_waiting', S1706WaitingState}, S1662State)), begin ok = 'Tianjiupai.RoomServer.Callback':'update_plaza'(S1708State), begin {'ok', S1709PersonalState} = 'Tianjiupai.RoomServer.Callback':'make_personal_state'(S1708State, S1663UserId), 'Tianjiupai.RoomServer.Callback':'reply'({'attended', {'ok', S1709PersonalState}}, S1708State) end end end end end end end end end end end end end end.
'handle_exit'(S1711UserId, S1712State) -> begin S1728Opt = case maps:get(room_state, S1712State) of {'internal_playing', S1713GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1713GameState, S1711UserId) of 'error' -> 'error'; {'ok', {S1714Seat, S1715Player}} -> begin {'meta', S1716Meta0} = maps:get(meta, S1713GameState), begin S1717Players0 = maps:get(players, S1716Meta0), begin S1718Players1 = 'Tianjiupai.Quad':'update'(S1714Seat, 'error', S1717Players0), begin S1719UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids'(S1713GameState, S1714Seat), {'ok', {maps:get(user, S1715Player), S1719UserIdsForNotification, {'internal_playing', maps:put(meta, {'meta', maps:put(players, S1718Players1, S1716Meta0)}, S1713GameState)}}} end end end end end; {'internal_waiting', S1720WaitingState} -> begin S1721Members0 = maps:get(members, S1720WaitingState), case 'SesterlStdlib.List':'filter'(fun(S1722W0) -> 'SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1722W0)), S1711UserId) end, S1721Members0) of [] -> 'error'; [S1723W | _] -> begin S1725Members1 = 'SesterlStdlib.List':'filter'(fun(S1724W0) -> 'SesterlStdlib.Bool':'not'('SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1724W0)), S1711UserId)) end, S1721Members0), begin S1727UserIdsForNotification = 'SesterlStdlib.List':'map'(fun(S1726W) -> maps:get(user_id, maps:get(user, S1726W)) end, S1725Members1), {'ok', {maps:get(user, S1723W), S1727UserIdsForNotification, {'internal_waiting', maps:put(members, S1725Members1, S1720WaitingState)}}} end end end end end, case S1728Opt of 'error' -> 'Tianjiupai.RoomServer.Callback':'reply'({'exited', false}, S1712State); {'ok', {S1729User, S1730UserIdsForNotification, S1731RoomState}} -> begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1730UserIdsForNotification, [{'notify_exited', S1729User} | []]), begin S1732State = maps:put(reversed_logs, [{'log_exited', S1729User} | maps:get(reversed_logs, S1712State)], maps:put(room_state, S1731RoomState, S1712State)), begin ok = 'Tianjiupai.RoomServer.Callback':'update_plaza'(S1732State), 'Tianjiupai.RoomServer.Callback':'reply'({'exited', true}, S1732State) end end end end end.
'make_winner_diff'(S1734Losers) -> begin S1738LoserDiffSum = 'SesterlStdlib.List':'foldl'(fun(S1735Acc, S1736Loser) -> begin {_, S1737LoserDiff} = S1736Loser, (S1735Acc + S1737LoserDiff) end end, 0, S1734Losers), (0 - S1738LoserDiffSum) end.
'update_score'(S1740Scores, S1741Updates) -> 'SesterlStdlib.List':'foldl'(fun(S1742Acc, S1743Update) -> begin {S1744Scores, S1745Diffs} = S1742Acc, begin {S1746Seat, S1747Diff} = S1743Update, begin S1748Score = 'Tianjiupai.Quad':'access'(S1746Seat, S1744Scores), {'Tianjiupai.Quad':'update'(S1746Seat, (S1748Score + S1747Diff), S1744Scores), 'Tianjiupai.Quad':'update'(S1746Seat, S1747Diff, S1745Diffs)} end end end end, {S1740Scores, 'Tianjiupai.Quad':'make'({0, 0, 0, 0})}, S1741Updates).
'deal_with_trick_end'({'meta', S1750Meta}, S1751WinnerSeat, S1752SpecialOpt) -> case S1752SpecialOpt of 'error' -> {{'meta', S1750Meta}, 'error'}; {'ok', _} -> begin S1753LoserSeats = 'Tianjiupai.Quad':'the_other_seats'(S1751WinnerSeat), begin S1754NumConsecutives = maps:get(num_consecutives, S1750Meta), begin S1755ParentSeat = maps:get(parent_seat, S1750Meta), begin S1760Losers = case 'Tianjiupai.Quad':'seat_equal'(S1751WinnerSeat, S1755ParentSeat) of true -> 'SesterlStdlib.List':'map'(fun(S1756LoserSeat) -> begin S1757LoserDiff = ((0 - 2) * (S1754NumConsecutives + 1)), {S1756LoserSeat, S1757LoserDiff} end end, S1753LoserSeats); false -> 'SesterlStdlib.List':'map'(fun(S1758LoserSeat) -> begin S1759LoserDiff = case 'Tianjiupai.Quad':'seat_equal'(S1758LoserSeat, S1755ParentSeat) of true -> ((0 - 2) * (S1754NumConsecutives + 1)); false -> (0 - 2) end, {S1758LoserSeat, S1759LoserDiff} end end, S1753LoserSeats) end, begin S1761WinnerDiff = 'Tianjiupai.RoomServer.Callback':'make_winner_diff'(S1760Losers), begin {S1762Scores, S1763Diffs} = 'Tianjiupai.RoomServer.Callback':'update_score'(maps:get(scores, S1750Meta), [{S1751WinnerSeat, S1761WinnerDiff} | S1760Losers]), {{'meta', maps:put(scores, S1762Scores, S1750Meta)}, {'ok', S1763Diffs}} end end end end end end end.
'make_loser_updates_when_parent_wins'(S1765NumConsecutives, S1766LoserSeats, S1767GainsQuad, S1768Coeff) -> 'SesterlStdlib.List':'map'(fun(S1769LoserSeat) -> begin S1770NumGains = 'SesterlStdlib.List':'length'('Tianjiupai.Quad':'access'(S1769LoserSeat, S1767GainsQuad)), begin S1771LoserDiff = case (S1770NumGains == 0) of true -> ((0 - 5) * ((S1765NumConsecutives + 1) * S1768Coeff)); false -> ((S1770NumGains - 4) * ((S1765NumConsecutives + 1) * S1768Coeff)) end, {S1769LoserSeat, S1771LoserDiff} end end end, S1766LoserSeats).
'make_loser_updates_when_child_wins'(S1773NumConsecutives, S1774LoserSeats, S1775ParentSeat, S1776GainsQuad, S1777CoeffOriginal) -> 'SesterlStdlib.List':'map'(fun(S1778LoserSeat) -> begin S1779NumGains = 'SesterlStdlib.List':'length'('Tianjiupai.Quad':'access'(S1778LoserSeat, S1776GainsQuad)), begin S1781LoserDiff = begin S1780Coeff = case 'Tianjiupai.Quad':'seat_equal'(S1778LoserSeat, S1775ParentSeat) of true -> ((S1773NumConsecutives + 1) * S1777CoeffOriginal); false -> S1777CoeffOriginal end, case (S1779NumGains == 0) of true -> ((0 - 5) * S1780Coeff); false -> ((S1779NumGains - 4) * S1780Coeff) end end, {S1778LoserSeat, S1781LoserDiff} end end end, S1774LoserSeats).
'deal_with_inning_end'({'meta', S1783Meta}, S1784WinnerSeat, S1785SpecialOpt, S1786GainsQuad) -> begin S1787LoserSeats = 'Tianjiupai.Quad':'the_other_seats'(S1784WinnerSeat), begin S1788NumConsecutives = maps:get(num_consecutives, S1783Meta), begin S1789ParentSeat = maps:get(parent_seat, S1783Meta), case 'Tianjiupai.Quad':'seat_equal'(S1784WinnerSeat, S1789ParentSeat) of true -> begin S1794Losers = case S1785SpecialOpt of {'ok', 'inning_end_with_bazhijie'} -> 'SesterlStdlib.List':'map'(fun(S1790LoserSeat) -> begin S1791LoserDiff = ((0 - 20) * (S1788NumConsecutives + 1)), {S1790LoserSeat, S1791LoserDiff} end end, S1787LoserSeats); {'ok', 'inning_end_with_qizhijie'} -> 'SesterlStdlib.List':'map'(fun(S1792LoserSeat) -> begin S1793LoserDiff = ((0 - 10) * (S1788NumConsecutives + 1)), {S1792LoserSeat, S1793LoserDiff} end end, S1787LoserSeats); {'ok', _} -> 'Tianjiupai.RoomServer.Callback':'make_loser_updates_when_parent_wins'(S1788NumConsecutives, S1787LoserSeats, S1786GainsQuad, 2); 'error' -> 'Tianjiupai.RoomServer.Callback':'make_loser_updates_when_parent_wins'(S1788NumConsecutives, S1787LoserSeats, S1786GainsQuad, 1) end, begin S1795WinnerDiff = 'Tianjiupai.RoomServer.Callback':'make_winner_diff'(S1794Losers), begin {S1796Scores, S1797Diffs} = 'Tianjiupai.RoomServer.Callback':'update_score'(maps:get(scores, S1783Meta), [{S1784WinnerSeat, S1795WinnerDiff} | S1794Losers]), {{'meta', #{inning_index => maps:get(inning_index, S1783Meta), num_consecutives => (S1788NumConsecutives + 1), parent_seat => S1789ParentSeat, players => maps:get(players, S1783Meta), scores => S1796Scores}}, S1797Diffs} end end end; false -> begin S1804Losers = case S1785SpecialOpt of {'ok', 'inning_end_with_bazhijie'} -> 'SesterlStdlib.List':'map'(fun(S1798LoserSeat) -> begin S1799Coeff = case 'Tianjiupai.Quad':'seat_equal'(S1798LoserSeat, S1789ParentSeat) of true -> (S1788NumConsecutives + 1); false -> 1 end, begin S1800LoserDiff = ((0 - 20) * S1799Coeff), {S1798LoserSeat, S1800LoserDiff} end end end, S1787LoserSeats); {'ok', 'inning_end_with_qizhijie'} -> 'SesterlStdlib.List':'map'(fun(S1801LoserSeat) -> begin S1802Coeff = case 'Tianjiupai.Quad':'seat_equal'(S1801LoserSeat, S1789ParentSeat) of true -> (S1788NumConsecutives + 1); false -> 1 end, begin S1803LoserDiff = ((0 - 10) * S1802Coeff), {S1801LoserSeat, S1803LoserDiff} end end end, S1787LoserSeats); {'ok', _} -> 'Tianjiupai.RoomServer.Callback':'make_loser_updates_when_child_wins'(S1788NumConsecutives, S1787LoserSeats, S1789ParentSeat, S1786GainsQuad, 2); 'error' -> 'Tianjiupai.RoomServer.Callback':'make_loser_updates_when_child_wins'(S1788NumConsecutives, S1787LoserSeats, S1789ParentSeat, S1786GainsQuad, 1) end, begin S1805WinnerDiff = 'Tianjiupai.RoomServer.Callback':'make_winner_diff'(S1804Losers), begin {S1806Scores, S1807Diffs} = 'Tianjiupai.RoomServer.Callback':'update_score'(maps:get(scores, S1783Meta), [{S1784WinnerSeat, S1805WinnerDiff} | S1804Losers]), {{'meta', #{inning_index => (maps:get(inning_index, S1783Meta) + 1), num_consecutives => 1, parent_seat => S1784WinnerSeat, players => maps:get(players, S1783Meta), scores => S1806Scores}}, S1807Diffs} end end end end end end end.
'handle_submit_impl'(S1809UserId, S1810Cards, S1811GameState) -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1811GameState, S1809UserId) of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', {S1812Seat, _}} -> case maps:get(inning, S1811GameState) of {'inning_end', _, _} -> sesterl_internal_prim:'return'('error'); {'during_inning', S1813Inning} -> case 'Tianjiupai.Inning':'submit'(S1812Seat, S1810Cards, S1813Inning) of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', {S1814SubmitResult, S1815IsFront}} -> begin S1816SnapshotId = 'Tianjiupai.SnapshotId':'generate'(), begin S1817WholeGameMeta = maps:get(meta, S1811GameState), begin {S1838GameState, S1839LastOpt} = case S1814SubmitResult of {'continues', S1818Inning} -> {#{inning => {'during_inning', S1818Inning}, meta => S1817WholeGameMeta, snapshot_id => S1816SnapshotId, sync => {'waiting_sync', 'Tianjiupai.RoomServer.Callback':'make_initial_sync'()}}, 'error'}; {'wins_trick', S1819WinnerSeat, S1820LastTable, S1821SubmitterHand, S1822SpecialOpt, S1823Inning} -> begin {S1824WholeGameMeta, S1825DiffsOpt} = 'Tianjiupai.RoomServer.Callback':'deal_with_trick_end'(S1817WholeGameMeta, S1819WinnerSeat, S1822SpecialOpt), begin S1828ChangesOpt = case {S1822SpecialOpt, S1825DiffsOpt} of {{'ok', S1826Special}, {'ok', S1827Diffs}} -> {'ok', #{change_reason => {'special_trick_end', S1826Special}, diffs => S1827Diffs}}; _ -> 'error' end, {#{inning => {'during_inning', S1823Inning}, meta => S1824WholeGameMeta, snapshot_id => S1816SnapshotId, sync => {'waiting_sync', 'Tianjiupai.RoomServer.Callback':'make_initial_sync'()}}, {'ok', #{changes => S1828ChangesOpt, hand => S1821SubmitterHand, table => S1820LastTable}}} end end; {'wins_inning', S1829WinnerSeat, S1830LastTable, S1831GainsQuad, S1832SpecialOpt} -> begin {S1833WholeGameMeta, S1834Diffs} = 'Tianjiupai.RoomServer.Callback':'deal_with_inning_end'(S1817WholeGameMeta, S1829WinnerSeat, S1832SpecialOpt, S1831GainsQuad), begin S1836Reason = case S1832SpecialOpt of 'error' -> 'normal_inning_end'; {'ok', S1835Special} -> {'special_inning_end', S1835Special} end, begin S1837Changes = #{change_reason => S1836Reason, diffs => S1834Diffs}, {#{inning => {'inning_end', S1831GainsQuad, 'Tianjiupai.RoomServer.Callback':'make_initial_sync'()}, meta => S1833WholeGameMeta, snapshot_id => S1816SnapshotId, sync => {'waiting_sync', 'Tianjiupai.RoomServer.Callback':'make_initial_sync'()}}, {'ok', #{changes => {'ok', S1837Changes}, hand => [], table => S1830LastTable}}} end end end end, begin S1841CardOpts = case S1815IsFront of true -> 'SesterlStdlib.List':'map'(fun(S1840Card) -> {'ok', S1840Card} end, S1810Cards); false -> 'SesterlStdlib.List':'map'(fun(_) -> 'error' end, S1810Cards) end, begin _ = 'SesterlStdlib.List':'for_each'(fun(S1842U) -> case 'Tianjiupai.RoomServer.Callback':'make_observable_game_state'(S1838GameState, S1842U) of 'error' -> sesterl_internal_prim:'return'(ok); {'ok', S1843Obs} -> begin S1845TrickLast = 'SesterlStdlib.Option':'map'(fun(S1844Last) -> #{changes => maps:get(changes, S1844Last), table => maps:get(table, S1844Last)} end, S1839LastOpt), begin S1846Submission = #{new_state => S1843Obs, seat => S1812Seat, submitted => S1841CardOpts, trick_last => S1845TrickLast}, 'Tianjiupai.RoomServer.Callback':'notify'(S1842U, [{'notify_submission', S1846Submission} | []]) end end end end, 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids'(S1838GameState, S1812Seat)), begin {'ok', S1847Obs} = 'Tianjiupai.RoomServer.Callback':'make_observable_game_state'(S1838GameState, S1809UserId), sesterl_internal_prim:'return'({'ok', {S1847Obs, S1839LastOpt, S1838GameState}}) end end end end end end end end end.
'handle_submit'(S1849UserId, S1850Cards, S1851State) -> begin S1853Opt = case maps:get(room_state, S1851State) of {'internal_waiting', _} -> sesterl_internal_prim:'return'('error'); {'internal_playing', S1852GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_empty_seat'(S1852GameState) of 'error' -> 'Tianjiupai.RoomServer.Callback':'handle_submit_impl'(S1849UserId, S1850Cards, S1852GameState); {'ok', _} -> sesterl_internal_prim:'return'('error') end end, case S1853Opt of 'error' -> 'Tianjiupai.RoomServer.Callback':'reply'({'submission_done', 'error'}, S1851State); {'ok', {S1854Obs, S1855LastOpt, S1856GameState}} -> begin S1859ReversedLogs = case S1855LastOpt of 'error' -> maps:get(reversed_logs, S1851State); {'ok', S1857Last} -> case maps:get(changes, S1857Last) of 'error' -> maps:get(reversed_logs, S1851State); {'ok', S1858Changes} -> [{'log_changes', S1858Changes} | maps:get(reversed_logs, S1851State)] end end, 'Tianjiupai.RoomServer.Callback':'reply'({'submission_done', {'ok', {S1854Obs, S1855LastOpt}}}, maps:put(reversed_logs, S1859ReversedLogs, maps:put(room_state, {'internal_playing', S1856GameState}, S1851State))) end end end.
'handle_ack'(S1861UserId, S1862SnapshotId, S1863State) -> begin S1871Opt = case maps:get(room_state, S1863State) of {'internal_waiting', _} -> sesterl_internal_prim:'return'('error'); {'internal_playing', S1864GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1864GameState, S1861UserId) of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', {S1865Seat, _}} -> case 'Tianjiupai.SnapshotId':'equal'(S1862SnapshotId, maps:get(snapshot_id, S1864GameState)) of true -> case maps:get(sync, S1864GameState) of {'waiting_sync', S1866SyncQuad} -> begin S1867SyncQuad = 'Tianjiupai.Quad':'update'(S1865Seat, true, S1866SyncQuad), begin _ = begin S2933 = 'Tianjiupai.Logger':'debug'({"update sync (snapshot_id: ~s, user_id: ~s, quad: ~p)", 3}, {S1862SnapshotId, S1861UserId, S1867SyncQuad}), S2933(<<"RoomServer.sest">>, 1057) end, case 'Tianjiupai.Quad':'decompose'(S1867SyncQuad) of {true, true, true, true} -> begin S1868UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids'(S1864GameState, S1865Seat), begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'([S1861UserId | S1868UserIdsForNotification], ['notify_next_step' | []]), begin S1869GameState = maps:put(sync, 'waiting_input', S1864GameState), sesterl_internal_prim:'return'({'ok', S1869GameState}) end end end; _ -> begin S1870GameState = maps:put(sync, {'waiting_sync', S1867SyncQuad}, S1864GameState), sesterl_internal_prim:'return'({'ok', S1870GameState}) end end end end; 'waiting_input' -> begin _ = begin S2934 = 'Tianjiupai.Logger':'warning'({"ack during waiting input (snapshot_id: ~s, user_id: ~s)", 2}, {S1862SnapshotId, S1861UserId}), S2934(<<"RoomServer.sest">>, 1077) end, sesterl_internal_prim:'return'('error') end end; false -> begin _ = begin S2935 = 'Tianjiupai.Logger':'warning'({"snapshot mismatch (got: ~s, expected: ~s, user_id: ~s)", 3}, {S1862SnapshotId, maps:get(snapshot_id, S1864GameState), S1861UserId}), S2935(<<"RoomServer.sest">>, 1086) end, sesterl_internal_prim:'return'('error') end end end end, case S1871Opt of 'error' -> 'Tianjiupai.RoomServer.Callback':'no_reply'(S1863State); {'ok', S1872GameState} -> 'Tianjiupai.RoomServer.Callback':'no_reply'(maps:put(room_state, {'internal_playing', S1872GameState}, S1863State)) end end.
'handle_require_next_inning'(S1874UserId, S1875SnapshotId, S1876State) -> begin S1893Opt = case maps:get(room_state, S1876State) of {'internal_waiting', _} -> sesterl_internal_prim:'return'('error'); {'internal_playing', S1877GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1877GameState, S1874UserId) of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', {S1878Seat, _}} -> case 'Tianjiupai.SnapshotId':'equal'(S1875SnapshotId, maps:get(snapshot_id, S1877GameState)) of true -> case maps:get(inning, S1877GameState) of {'during_inning', _} -> sesterl_internal_prim:'return'('error'); {'inning_end', S1879GainsQuad, S1880InningSyncQuad} -> begin S1881InningSyncQuad = 'Tianjiupai.Quad':'update'(S1878Seat, true, S1880InningSyncQuad), begin _ = begin S2937 = 'Tianjiupai.Logger':'debug'({"update inning sync (snapshot_id: ~s, inning_sync_quad: ~p)", 2}, {S1875SnapshotId, S1881InningSyncQuad}), S2937(<<"RoomServer.sest">>, 1124) end, case 'Tianjiupai.Quad':'decompose'(S1881InningSyncQuad) of {true, true, true, true} -> begin S1882WholeGameMeta = maps:get(meta, S1877GameState), begin {'meta', S1883Meta} = S1882WholeGameMeta, begin S1884InningIndex = maps:get(inning_index, S1883Meta), begin S1885UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids'(S1877GameState, S1878Seat), begin S1886UserIdsForNotification = [S1874UserId | S1885UserIdsForNotification], case (S1884InningIndex >= 'Tianjiupai.Constants':'maximum_num_innings'()) of true -> sesterl_internal_prim:'return'({'ok', 'room_close'}); false -> begin S1887GameState = 'Tianjiupai.RoomServer.Callback':'start_new_inning'(S1882WholeGameMeta), begin _ = 'SesterlStdlib.List':'for_each'(fun(S1888U) -> case 'Tianjiupai.RoomServer.Callback':'make_observable_game_state'(S1887GameState, S1888U) of 'error' -> sesterl_internal_prim:'return'(ok); {'ok', S1889Obs} -> 'Tianjiupai.RoomServer.Callback':'notify'(S1888U, [{'notify_game_start', S1889Obs} | []]) end end, S1886UserIdsForNotification), begin S1891GameIndex = begin {'meta', S1890Meta} = maps:get(meta, S1887GameState), #{inning_index => S1884InningIndex, num_consecutives => maps:get(num_consecutives, S1890Meta)} end, sesterl_internal_prim:'return'({'ok', {'room_transition_to_next_inning', S1887GameState, {'ok', S1891GameIndex}}}) end end end end end end end end end; _ -> begin S1892GameState = maps:put(inning, {'inning_end', S1879GainsQuad, S1881InningSyncQuad}, S1877GameState), sesterl_internal_prim:'return'({'ok', {'room_transition_to_next_inning', S1892GameState, 'error'}}) end end end end end; false -> sesterl_internal_prim:'return'('error') end end end, case S1893Opt of 'error' -> 'Tianjiupai.RoomServer.Callback':'no_reply'(S1876State); {'ok', 'room_close'} -> 'Tianjiupai.RoomServer.Callback':'stop'(S1876State); {'ok', {'room_transition_to_next_inning', S1894GameState, S1895GameIndexOpt}} -> begin S1897State = case S1895GameIndexOpt of 'error' -> S1876State; {'ok', S1896GameIndex} -> maps:put(reversed_logs, [{'log_game_start', S1896GameIndex} | maps:get(reversed_logs, S1876State)], S1876State) end, 'Tianjiupai.RoomServer.Callback':'no_reply'(maps:put(room_state, {'internal_playing', S1894GameState}, S1897State)) end end end.
'handle_set_connection'(S1899UserId, S1900WsProc, S1901State) -> begin S1926Opt = case maps:get(room_state, S1901State) of {'internal_waiting', S1902WaitingState} -> begin S1903Members0 = maps:get(members, S1902WaitingState), case 'SesterlStdlib.List':'filter'(fun(S1904W) -> 'SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1904W)), S1899UserId) end, S1903Members0) of [] -> sesterl_internal_prim:'return'('error'); [S1905W | _] -> begin S1906User = maps:get(user, S1905W), begin S1912Acc = 'SesterlStdlib.List':'foldl_effect'(fun(S1907Acc, S1908W0) -> begin S1911W1 = case 'SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1908W0)), S1899UserId) of true -> begin {'ok', ok} = case maps:get(connection, S1908W0) of {'connected', _, _} -> sesterl_internal_prim:'return'({'ok', ok}); {'disconnected', S1909Timer} -> 'Tianjiupai.RoomServer.Callback':'cancel_disconnection_timer'(S1909Timer, S1899UserId, <<"waiting"/utf8>>) end, begin S1910WsMref = 'Tianjiupai.WebSocketHandler':'monitor'(S1900WsProc), sesterl_internal_prim:'return'(maps:put(connection, {'connected', S1900WsProc, S1910WsMref}, S1908W0)) end end; false -> sesterl_internal_prim:'return'(S1908W0) end, sesterl_internal_prim:'return'([S1911W1 | S1907Acc]) end end, [], S1903Members0), begin S1913Members1 = 'SesterlStdlib.List':'reverse'(S1912Acc), begin S1914UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids_from_list'(S1913Members1, S1899UserId), sesterl_internal_prim:'return'({'ok', {S1906User, S1914UserIdsForNotification, {'internal_waiting', #{members => S1913Members1}}}}) end end end end end end; {'internal_playing', S1915GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1915GameState, S1899UserId) of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', {S1916Seat, S1917P0}} -> begin {'meta', S1918Meta} = maps:get(meta, S1915GameState), begin S1919Players0 = maps:get(players, S1918Meta), begin {'ok', ok} = case maps:get(connection, S1917P0) of {'connected', _, _} -> begin _ = begin S2939 = 'Tianjiupai.Logger':'debug'({"no timer (playing, seat: ~p, user_id: ~s)", 2}, {S1916Seat, S1899UserId}), S2939(<<"RoomServer.sest">>, 1239) end, sesterl_internal_prim:'return'({'ok', ok}) end; {'disconnected', S1920Timer} -> 'Tianjiupai.RoomServer.Callback':'cancel_disconnection_timer'(S1920Timer, S1899UserId, <<"playing"/utf8>>) end, begin S1921WsMref = 'Tianjiupai.WebSocketHandler':'monitor'(S1900WsProc), begin S1922P1 = maps:put(connection, {'connected', S1900WsProc, S1921WsMref}, S1917P0), begin S1923Players1 = 'Tianjiupai.Quad':'update'(S1916Seat, {'ok', S1922P1}, S1919Players0), begin S1924UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids_from_quad'(S1923Players1, S1899UserId), begin S1925GameState = maps:put(meta, {'meta', maps:put(players, S1923Players1, S1918Meta)}, S1915GameState), sesterl_internal_prim:'return'({'ok', {maps:get(user, S1922P1), S1924UserIdsForNotification, {'internal_playing', S1925GameState}}}) end end end end end end end end end end, case S1926Opt of 'error' -> 'Tianjiupai.RoomServer.Callback':'no_reply'(S1901State); {'ok', {S1927User, S1928UserIdsForNotification, S1929RoomState}} -> begin S1930Connection = #{is_connected => true, user => S1927User}, begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1928UserIdsForNotification, [{'notify_connection', S1930Connection} | []]), begin S1931State = maps:put(reversed_logs, [{'log_connection', S1930Connection} | maps:get(reversed_logs, S1901State)], maps:put(room_state, S1929RoomState, S1901State)), 'Tianjiupai.RoomServer.Callback':'no_reply'(S1931State) end end end end end.
      send_room_deletion_to_user_server(UserId) ->
          try
              _ = 'Tianjiupai.User':set_room(UserId, error),
              ok
          catch
              _:_ -> ok
          end.
    
'handle_disconnection_timeout'(S1934UserId, S1935State) -> begin _ = begin S2941 = 'Tianjiupai.Logger':'info'({"disconnection timeout (user_id: ~s)", 1}, {S1934UserId}), S2941(<<"RoomServer.sest">>, 1287) end, begin S1936RoomState0 = maps:get(room_state, S1935State), begin S1954Opt = case S1936RoomState0 of {'internal_waiting', S1937WaitingState} -> begin S1938WaitingMembers0 = maps:get(members, S1937WaitingState), case 'SesterlStdlib.List':'filter'(fun(S1939W) -> 'SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1939W)), S1934UserId) end, S1938WaitingMembers0) of [] -> sesterl_internal_prim:'return'('error'); [S1940W | _] -> begin _ = 'Tianjiupai.RoomServer.Callback':'send_room_deletion_to_user_server'(S1934UserId), begin S1941User = maps:get(user, S1940W), begin S1943WaitingMembers1 = 'SesterlStdlib.List':'filter'(fun(S1942W) -> 'SesterlStdlib.Bool':'not'('SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1942W)), S1934UserId)) end, S1938WaitingMembers0), begin S1944UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids_from_list'(S1938WaitingMembers0, S1934UserId), begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1944UserIdsForNotification, [{'notify_exited', S1941User} | []]), sesterl_internal_prim:'return'({'ok', {S1941User, {'internal_waiting', maps:put(members, S1943WaitingMembers1, S1937WaitingState)}}}) end end end end end end end; {'internal_playing', S1945GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1945GameState, S1934UserId) of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', {S1946Seat, S1947Player}} -> begin _ = 'Tianjiupai.RoomServer.Callback':'send_room_deletion_to_user_server'(S1934UserId), begin {'meta', S1948Meta0} = maps:get(meta, S1945GameState), begin S1949Players0 = maps:get(players, S1948Meta0), begin S1950User = maps:get(user, S1947Player), begin S1951UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids'(S1945GameState, S1946Seat), begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1951UserIdsForNotification, [{'notify_exited', S1950User} | []]), begin S1952Players1 = 'Tianjiupai.Quad':'update'(S1946Seat, 'error', S1949Players0), begin S1953GameState = maps:put(meta, {'meta', maps:put(players, S1952Players1, S1948Meta0)}, S1945GameState), sesterl_internal_prim:'return'({'ok', {S1950User, {'internal_playing', S1953GameState}}}) end end end end end end end end end end, begin S1957State = case S1954Opt of {'ok', {S1955User, S1956RoomState1}} -> maps:put(room_state, S1956RoomState1, maps:put(reversed_logs, [{'log_exited', S1955User} | maps:get(reversed_logs, S1935State)], S1935State)); 'error' -> S1935State end, 'Tianjiupai.RoomServer.Callback':'no_reply'(S1957State) end end end end.
'update_sync'(S1959UserId, S1960State) -> case maps:get(room_state, S1960State) of {'internal_waiting', _} -> sesterl_internal_prim:'return'(S1960State); {'internal_playing', S1961GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1961GameState, S1959UserId) of 'error' -> sesterl_internal_prim:'return'(S1960State); {'ok', {S1962Seat, _}} -> case maps:get(sync, S1961GameState) of 'waiting_input' -> sesterl_internal_prim:'return'(S1960State); {'waiting_sync', S1963SyncQuad} -> begin S1964SyncQuad = 'Tianjiupai.Quad':'update'(S1962Seat, true, S1963SyncQuad), case 'Tianjiupai.Quad':'decompose'(S1964SyncQuad) of {true, true, true, true} -> begin S1965UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids'(S1961GameState, S1962Seat), begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1965UserIdsForNotification, ['notify_next_step' | []]), begin S1966GameState = maps:put(sync, 'waiting_input', S1961GameState), sesterl_internal_prim:'return'(maps:put(room_state, {'internal_playing', S1966GameState}, S1960State)) end end end; _ -> begin S1967GameState = maps:put(sync, {'waiting_sync', S1964SyncQuad}, S1961GameState), sesterl_internal_prim:'return'(maps:put(room_state, {'internal_playing', S1967GameState}, S1960State)) end end end end end end.
'handle_call'(S1969Req, _, S1970State) -> case S1969Req of 'get_whole_state' -> begin S1971WholeState = 'Tianjiupai.RoomServer.Callback':'make_whole_room_state'(S1970State), 'Tianjiupai.RoomServer.Callback':'reply'({'whole_state', S1971WholeState}, S1970State) end; {'get_personal_state', S1972UserId} -> begin S1973State = 'Tianjiupai.RoomServer.Callback':'update_sync'(S1972UserId, S1970State), begin S1974PersonalStateOpt = 'Tianjiupai.RoomServer.Callback':'make_personal_state'(S1973State, S1972UserId), 'Tianjiupai.RoomServer.Callback':'reply'({'personal_state', S1974PersonalStateOpt}, S1973State) end end; {'send_chat', S1975User, S1976Text} -> 'Tianjiupai.RoomServer.Callback':'handle_send_chat'(S1975User, S1976Text, S1970State); {'attend', S1977User, S1978WsProc} -> 'Tianjiupai.RoomServer.Callback':'handle_attend'(S1977User, S1978WsProc, S1970State); {'exit', S1979UserId} -> 'Tianjiupai.RoomServer.Callback':'handle_exit'(S1979UserId, S1970State); {'submit', S1980UserId, S1981Cards} -> 'Tianjiupai.RoomServer.Callback':'handle_submit'(S1980UserId, S1981Cards, S1970State) end.
'handle_cast'(S1983Msg, S1984State) -> case S1983Msg of {'ack', S1985UserId, S1986SnapshotId} -> 'Tianjiupai.RoomServer.Callback':'handle_ack'(S1985UserId, S1986SnapshotId, S1984State); {'require_next_inning', S1987UserId, S1988SnapshotId} -> 'Tianjiupai.RoomServer.Callback':'handle_require_next_inning'(S1987UserId, S1988SnapshotId, S1984State); {'set_connection', S1989UserId, S1990WsProc} -> 'Tianjiupai.RoomServer.Callback':'handle_set_connection'(S1989UserId, S1990WsProc, S1984State) end.
'handle_timeout'(S1992State) -> begin _ = begin S2946 = 'Tianjiupai.Logger':'debug'({"timeout (room_id: ~s)", 1}, {maps:get(room_id, maps:get(settings, S1992State))}), S2946(<<"RoomServer.sest">>, 1416) end, 'Tianjiupai.RoomServer.Callback':'stop'(S1992State) end.
'handle_down'(S1994Mref, _, S1995Reason, S1996State) -> case maps:get(room_state, S1996State) of {'internal_waiting', S1997Waiting} -> begin S1998WaitingMembers0 = maps:get(members, S1997Waiting), begin {S2010PlayerAcc, S2011LogAcc} = 'SesterlStdlib.List':'foldl_effect'(fun({S1999PlayerAcc, S2000LogAcc}, S2001Player) -> case maps:get(connection, S2001Player) of {'connected', _, S2002MrefWs} -> case 'SesterlStdlib.MonitorRef':'equal'(S2002MrefWs, S1994Mref) of true -> begin S2003User = maps:get(user, S2001Player), begin S2004UserId = maps:get(user_id, S2003User), begin _ = begin S2948 = 'Tianjiupai.Logger':'info'({"WebSocket connection closed (user_id: ~s, reason: ~p)", 2}, {S2004UserId, S1995Reason}), S2948(<<"RoomServer.sest">>, 1432) end, begin {'ok', S2005Timer} = 'Tianjiupai.RoomServer.Callback':'set_disconnection_timer'(S2004UserId, <<"waiting"/utf8>>), begin S2006UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids_from_list'(S1998WaitingMembers0, S2004UserId), begin S2007Connection = #{is_connected => false, user => S2003User}, begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S2006UserIdsForNotification, [{'notify_connection', S2007Connection} | []]), begin S2008PlayerAcc = [maps:put(connection, {'disconnected', S2005Timer}, S2001Player) | S1999PlayerAcc], begin S2009LogAcc = [{'log_connection', S2007Connection} | S2000LogAcc], sesterl_internal_prim:'return'({S2008PlayerAcc, S2009LogAcc}) end end end end end end end end end; false -> sesterl_internal_prim:'return'({[S2001Player | S1999PlayerAcc], S2000LogAcc}) end; {'disconnected', _} -> sesterl_internal_prim:'return'({[S2001Player | S1999PlayerAcc], S2000LogAcc}) end end, {[], maps:get(reversed_logs, S1996State)}, S1998WaitingMembers0), begin S2012Players = 'SesterlStdlib.List':'reverse'(S2010PlayerAcc), 'Tianjiupai.RoomServer.Callback':'no_reply'(maps:put(room_state, {'internal_waiting', #{members => S2012Players}}, maps:put(reversed_logs, S2011LogAcc, S1996State))) end end end; {'internal_playing', S2013GameState} -> begin {'meta', S2014Meta} = maps:get(meta, S2013GameState), begin S2015Players0 = maps:get(players, S2014Meta), begin {S2027LogAcc, S2028Players} = 'Tianjiupai.Quad':'map_fold_effect'(fun(S2016LogAcc, S2017PlayerOpt) -> case S2017PlayerOpt of 'error' -> sesterl_internal_prim:'return'({S2016LogAcc, 'error'}); {'ok', S2018Player} -> case maps:get(connection, S2018Player) of {'connected', _, S2019MrefWs} -> case 'SesterlStdlib.MonitorRef':'equal'(S2019MrefWs, S1994Mref) of true -> begin S2020User = maps:get(user, S2018Player), begin S2021UserId = maps:get(user_id, S2020User), begin _ = begin S2949 = 'Tianjiupai.Logger':'info'({"WebSocket connection closed (user_id: ~s, reason: ~p)", 2}, {S2021UserId, S1995Reason}), S2949(<<"RoomServer.sest">>, 1478) end, begin {'ok', S2022Timer} = 'Tianjiupai.RoomServer.Callback':'set_disconnection_timer'(maps:get(user_id, maps:get(user, S2018Player)), <<"playing"/utf8>>), begin S2023UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids_from_quad'(S2015Players0, S2021UserId), begin S2024Connection = #{is_connected => false, user => S2020User}, begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S2023UserIdsForNotification, [{'notify_connection', S2024Connection} | []]), begin S2025Player = maps:put(connection, {'disconnected', S2022Timer}, S2018Player), begin S2026LogAcc = [{'log_connection', S2024Connection} | S2016LogAcc], sesterl_internal_prim:'return'({S2026LogAcc, {'ok', S2025Player}}) end end end end end end end end end; false -> sesterl_internal_prim:'return'({S2016LogAcc, S2017PlayerOpt}) end; {'disconnected', _} -> sesterl_internal_prim:'return'({S2016LogAcc, S2017PlayerOpt}) end end end, maps:get(reversed_logs, S1996State), S2015Players0), begin S2029GameState = maps:put(meta, {'meta', maps:put(players, S2028Players, S2014Meta)}, S2013GameState), 'Tianjiupai.RoomServer.Callback':'no_reply'(maps:put(room_state, {'internal_playing', S2029GameState}, maps:put(reversed_logs, S2027LogAcc, S1996State))) end end end end end.
'handle_info'(S2031Info, S2032State) -> case S2031Info of {'disconnection_timeout', S2033UserId} -> 'Tianjiupai.RoomServer.Callback':'handle_disconnection_timeout'(S2033UserId, S2032State); _ -> begin _ = begin S2951 = 'Tianjiupai.Logger':'warning'({"unexpected info (info: ~p, state: ~p)", 2}, {S2031Info, S2032State}), S2951(<<"RoomServer.sest">>, 1515) end, 'Tianjiupai.RoomServer.Callback':'no_reply'(S2032State) end end.
'terminate'(S2035Reason, S2036State) -> begin _ = begin S2953 = 'Tianjiupai.Logger':'debug'({"terminate (reason: ~p, room_id: ~s)", 2}, {S2035Reason, maps:get(room_id, maps:get(settings, S2036State))}), S2953(<<"RoomServer.sest">>, 1520) end, sesterl_internal_prim:'return'(ok) end.
