-module('Tianjiupai.RoomServer.Callback').
-export(['set_disconnection_timer'/2, 'cancel_disconnection_timer'/3, 'get_members_from_state'/1, 'make_whole_room_state'/1, 'update_plaza'/1, 'init'/1, 'reply'/2, 'no_reply'/1, 'find_user_seat'/2, 'get_connected_user_ids'/2, 'get_connected_user_ids_from_list'/2, 'get_connected_user_ids_from_quad'/2, 'get_all_connected_user_ids'/1, 'make_game_player'/1, 'make_game_meta'/1, 'make_observable_game_state'/2, 'make_observable'/2, 'make_personal_state'/2, 'make_initial_sync'/0, 'start_new_inning'/1, 'notify'/2, 'notify_for_each'/2, 'stop'/1, 'find_empty_seat'/1, 'handle_send_chat'/3, 'is_none'/1, 'handle_attend'/3, 'handle_exit'/2, 'make_winner_diff'/1, 'update_score'/2, 'deal_with_trick_end'/3, 'make_loser_updates_when_parent_wins'/4, 'make_loser_updates_when_child_wins'/5, 'deal_with_inning_end'/4, 'handle_submit_impl'/3, 'handle_submit'/3, 'handle_ack'/3, 'handle_require_next_inning'/3, 'handle_set_connection'/3, 'send_room_deletion_to_user_server'/1, 'handle_disconnection_timeout'/2, 'update_sync'/2, 'handle_call'/3, 'handle_cast'/2, 'handle_timeout'/1, 'handle_down'/4, 'handle_info'/2, 'terminate'/2]).
'set_disconnection_timer'(S1531UserId, S1532Message) -> begin S1533Res = 'SesterlStdlib.Timer':'send_after_self'('Tianjiupai.Constants':'disconnection_timeout'(), {'disconnection_timeout', S1531UserId}), begin _ = begin S3219 = 'Tianjiupai.Logger':'debug'({"sets timer (~s, user_id: ~s, result: ~p)", 3}, {S1532Message, S1531UserId, S1533Res}), S3219(<<"RoomServer.sest">>, 164) end, sesterl_internal_prim:'return'(S1533Res) end end.
'cancel_disconnection_timer'(S1535Timer, S1536UserId, S1537Message) -> begin S1538Res = 'SesterlStdlib.Timer':'cancel'(S1535Timer), begin _ = begin S3221 = 'Tianjiupai.Logger':'debug'({"cancels timer (~s, user_id: ~s, timer: ~p, result: ~p)", 4}, {S1537Message, S1536UserId, S1535Timer, S1538Res}), S3221(<<"RoomServer.sest">>, 174) end, sesterl_internal_prim:'return'(S1538Res) end end.
'get_members_from_state'(S1540RoomState) -> case S1540RoomState of {'internal_waiting', S1541WaitingState} -> {false, 'SesterlStdlib.List':'map'(fun(S1542W) -> maps:get(user, S1542W) end, maps:get(members, S1541WaitingState))}; {'internal_playing', S1543WholeGameState} -> begin {'meta', S1544Meta} = maps:get(meta, S1543WholeGameState), begin S1545PlayerOpts = 'Tianjiupai.Quad':'to_list'(maps:get(players, S1544Meta)), begin S1548Members = 'SesterlStdlib.List':'filter_map'(fun(S1546PlayerOpt) -> case S1546PlayerOpt of 'error' -> 'error'; {'ok', S1547Player} -> {'ok', maps:get(user, S1547Player)} end end, S1545PlayerOpts), {true, S1548Members} end end end end.
'make_whole_room_state'(S1550State) -> begin S1551Settings = maps:get(settings, S1550State), begin {S1552IsPlaying, S1553Members} = 'Tianjiupai.RoomServer.Callback':'get_members_from_state'(maps:get(room_state, S1550State)), #{is_playing => S1552IsPlaying, members => S1553Members, room => #{room_id => maps:get(room_id, S1551Settings), room_name => maps:get(room_name, S1551Settings)}} end end.
'update_plaza'(S1555State) -> begin S1556RoomSummary = 'Tianjiupai.RoomServer.Callback':'make_whole_room_state'(S1555State), 'Tianjiupai.PlazaServer':'update_room'(S1556RoomSummary) end.
'init'(S1558InitArg) -> begin {S1559RoomId, S1560RoomName} = S1558InitArg, begin S1561Settings = #{room_id => S1559RoomId, room_name => S1560RoomName}, begin S1562State = #{reversed_logs => [], room_state => {'internal_waiting', #{members => []}}, settings => S1561Settings}, begin _ = 'Tianjiupai.RoomServer.Callback':'update_plaza'(S1562State), 'SesterlStdlib.GenServer':'init_ok'(S1562State, #{timeout => 'Tianjiupai.Constants':'room_expiration_timeout'()}) end end end end.
'reply'(S1564Response, S1565State) -> 'SesterlStdlib.GenServer':'reply'(S1564Response, S1565State, #{timeout => 'Tianjiupai.Constants':'room_expiration_timeout'()}).
'no_reply'(S1567State) -> 'SesterlStdlib.GenServer':'no_reply'(S1567State, #{timeout => 'Tianjiupai.Constants':'room_expiration_timeout'()}).
'find_user_seat'(S1569GameState, S1570UserId) -> begin {'meta', S1571Meta} = maps:get(meta, S1569GameState), begin S1574Opt = 'Tianjiupai.Quad':'find'(fun(S1572PlayerOpt) -> case S1572PlayerOpt of 'error' -> false; {'ok', S1573Player} -> 'SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1573Player)), S1570UserId) end end, maps:get(players, S1571Meta)), 'SesterlStdlib.Option':'map'(fun({S1575Seat, {'ok', S1576Player}}) -> {S1575Seat, S1576Player} end, S1574Opt) end end.
'get_connected_user_ids'(S1578GameState, S1579Seat0) -> begin {'meta', S1580Meta} = maps:get(meta, S1578GameState), begin {S1581PA, S1582PB, S1583PC, S1584PD} = 'Tianjiupai.Quad':'decompose'(maps:get(players, S1580Meta)), begin S1585Players = [{'seat_a', S1581PA} | [{'seat_b', S1582PB} | [{'seat_c', S1583PC} | [{'seat_d', S1584PD} | []]]]], 'SesterlStdlib.List':'filter_map'(fun({S1586Seat, S1587PlayerOpt}) -> case 'Tianjiupai.Quad':'seat_equal'(S1586Seat, S1579Seat0) of true -> 'error'; false -> 'SesterlStdlib.Option':'bind'(S1587PlayerOpt, fun(S1588Player) -> case maps:get(connection, S1588Player) of {'connected', _, _} -> {'ok', maps:get(user_id, maps:get(user, S1588Player))}; {'disconnected', _} -> 'error' end end) end end, S1585Players) end end end.
'get_connected_user_ids_from_list'(S1590Players, S1591UserId) -> 'SesterlStdlib.List':'filter_map'(fun(S1592P) -> case maps:get(connection, S1592P) of {'connected', _, _} -> begin S1593U = maps:get(user_id, maps:get(user, S1592P)), case 'SesterlStdlib.Binary':'equal'(S1593U, S1591UserId) of true -> 'error'; false -> {'ok', S1593U} end end; {'disconnected', _} -> 'error' end end, S1590Players).
'get_connected_user_ids_from_quad'(S1595Players, S1596UserId) -> 'SesterlStdlib.List':'filter_map'(fun(S1597GOpt) -> case S1597GOpt of 'error' -> 'error'; {'ok', S1598G} -> case maps:get(connection, S1598G) of {'connected', _, _} -> begin S1599U = maps:get(user_id, maps:get(user, S1598G)), case 'SesterlStdlib.Binary':'equal'(S1599U, S1596UserId) of true -> 'error'; false -> {'ok', S1599U} end end; {'disconnected', _} -> 'error' end end end, 'Tianjiupai.Quad':'to_list'(S1595Players)).
'get_all_connected_user_ids'(S1601State) -> case maps:get(room_state, S1601State) of {'internal_waiting', S1602WaitingState} -> 'SesterlStdlib.List':'filter_map'(fun(S1603Player) -> case maps:get(connection, S1603Player) of {'connected', _, _} -> {'ok', maps:get(user_id, maps:get(user, S1603Player))}; {'disconnected', _} -> 'error' end end, maps:get(members, S1602WaitingState)); {'internal_playing', S1604WholeGameState} -> begin {'meta', S1605Meta} = maps:get(meta, S1604WholeGameState), 'SesterlStdlib.List':'filter_map'(fun(S1606PlayerOpt) -> case S1606PlayerOpt of 'error' -> 'error'; {'ok', S1607Player} -> case maps:get(connection, S1607Player) of {'connected', _, _} -> {'ok', maps:get(user_id, maps:get(user, S1607Player))}; {'disconnected', _} -> 'error' end end end, 'Tianjiupai.Quad':'to_list'(maps:get(players, S1605Meta))) end end.
'make_game_player'(S1609Iplayer) -> begin S1610IsConnected = case maps:get(connection, S1609Iplayer) of {'connected', _, _} -> true; {'disconnected', _} -> false end, #{is_connected => S1610IsConnected, user => maps:get(user, S1609Iplayer)} end.
'make_game_meta'({'meta', S1612Meta}) -> #{inning_index => maps:get(inning_index, S1612Meta), num_consecutives => maps:get(num_consecutives, S1612Meta), parent_seat => maps:get(parent_seat, S1612Meta), players => 'Tianjiupai.Quad':'map'(fun(S1613Opt) -> 'SesterlStdlib.Option':'map'((fun 'Tianjiupai.RoomServer.Callback':'make_game_player'/1), S1613Opt) end, maps:get(players, S1612Meta)), scores => maps:get(scores, S1612Meta)}.
'make_observable_game_state'(S1615GameState, S1616UserId) -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1615GameState, S1616UserId) of 'error' -> 'error'; {'ok', {S1617Seat, _}} -> begin S1618Synchronizing = case maps:get(sync, S1615GameState) of 'waiting_input' -> false; {'waiting_sync', _} -> true end, begin S1621ObservableInning = case maps:get(inning, S1615GameState) of {'during_inning', S1619Inning} -> {'observable_during_inning', 'Tianjiupai.Inning':'observe'(S1617Seat, S1619Inning)}; {'inning_end', S1620GainsQuad, _} -> {'observable_inning_end', S1620GainsQuad} end, {'ok', #{meta => 'Tianjiupai.RoomServer.Callback':'make_game_meta'(maps:get(meta, S1615GameState)), observable_inning => S1621ObservableInning, snapshot_id => maps:get(snapshot_id, S1615GameState), synchronizing => S1618Synchronizing}} end end end.
'make_observable'(S1623RoomState, S1624UserId) -> case S1623RoomState of {'internal_waiting', S1625WaitingState} -> begin S1627Members = 'SesterlStdlib.List':'map'(fun(S1626W) -> maps:get(user, S1626W) end, maps:get(members, S1625WaitingState)), {'ok', {'waiting_start', S1627Members}} end; {'internal_playing', S1628GameState} -> 'SesterlStdlib.Option':'map'(fun(S1629Obs) -> {'playing_game', S1629Obs} end, 'Tianjiupai.RoomServer.Callback':'make_observable_game_state'(S1628GameState, S1624UserId)) end.
'make_personal_state'(S1631State, S1632UserId) -> begin S1633Settings = maps:get(settings, S1631State), case 'Tianjiupai.RoomServer.Callback':'make_observable'(maps:get(room_state, S1631State), S1632UserId) of 'error' -> 'error'; {'ok', S1634Observable} -> {'ok', #{game => S1634Observable, logs => 'SesterlStdlib.List':'reverse'(maps:get(reversed_logs, S1631State)), room => #{room_id => maps:get(room_id, S1633Settings), room_name => maps:get(room_name, S1633Settings)}}} end end.
'make_initial_sync'() -> 'Tianjiupai.Quad':'make'({false, false, false, false}).
'start_new_inning'({'meta', S1637Meta}) -> begin S1638NextParentSeat = maps:get(parent_seat, S1637Meta), begin S1639Inning = 'Tianjiupai.Inning':'start'(S1638NextParentSeat), begin S1640SnapshotId = 'Tianjiupai.SnapshotId':'generate'(), sesterl_internal_prim:'return'(#{inning => {'during_inning', S1639Inning}, meta => {'meta', S1637Meta}, snapshot_id => S1640SnapshotId, sync => {'waiting_sync', 'Tianjiupai.RoomServer.Callback':'make_initial_sync'()}}) end end end.
'notify'(S1642UserId, S1643Notifications) -> 'Tianjiupai.WebSocketHandler':'notify'(S1642UserId, S1643Notifications).
'notify_for_each'(S1645UserIds, S1646Notifications) -> 'SesterlStdlib.List':'for_each'(fun(S1647UserId) -> 'Tianjiupai.RoomServer.Callback':'notify'(S1647UserId, S1646Notifications) end, S1645UserIds).
'stop'(S1649State) -> begin S1650UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_all_connected_user_ids'(S1649State), begin _ = begin S3243 = 'Tianjiupai.Logger':'debug'({"delete room sync (room_id: ~p)", 1}, {maps:get(room_id, maps:get(settings, S1649State))}), S3243(<<"RoomServer.sest">>, 425) end, begin ok = 'Tianjiupai.PlazaServer':'delete_room_sync'(maps:get(room_id, maps:get(settings, S1649State))), begin _ = begin S3244 = 'Tianjiupai.Logger':'debug'({"deleted from plaza (room_id: ~p)", 1}, {maps:get(room_id, maps:get(settings, S1649State))}), S3244(<<"RoomServer.sest">>, 427) end, begin ok = 'SesterlStdlib.List':'foldl_effect'(fun(ok, S1651UserId) -> begin _ = 'Tianjiupai.WebSocketHandler':'notify_room_close'(S1651UserId), sesterl_internal_prim:'return'(ok) end end, ok, S1650UserIdsForNotification), 'SesterlStdlib.GenServer':'no_reply_and_stop'('SesterlStdlib.StopReason':'normal'(), S1649State) end end end end end.
'find_empty_seat'(S1653GameState) -> begin {'meta', S1654Meta} = maps:get(meta, S1653GameState), 'SesterlStdlib.Option':'map'(fun(S1655Pair) -> begin {S1656Seat, _} = S1655Pair, S1656Seat end end, 'Tianjiupai.Quad':'find'(fun(S1657PlayerOpt) -> case S1657PlayerOpt of {'ok', _} -> false; 'error' -> true end end, maps:get(players, S1654Meta))) end.
'handle_send_chat'(S1659User, S1660Text, S1661State) -> begin {_, S1662Members} = 'Tianjiupai.RoomServer.Callback':'get_members_from_state'(maps:get(room_state, S1661State)), begin S1663Comment = #{from => S1659User, text => S1660Text}, begin _ = begin S1665UserIds = 'SesterlStdlib.List':'map'(fun(S1664U) -> maps:get(user_id, S1664U) end, S1662Members), 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1665UserIds, [{'notify_comment', S1663Comment} | []]) end, 'Tianjiupai.RoomServer.Callback':'reply'('chat_sent', maps:put(reversed_logs, [{'log_comment', S1663Comment} | maps:get(reversed_logs, S1661State)], S1661State)) end end end.
'is_none'(S1667X) -> case S1667X of 'error' -> true; {'ok', _} -> false end.
'handle_attend'(S1669User, S1670WsProc, S1671State) -> begin S1672UserId = maps:get(user_id, S1669User), case maps:get(room_state, S1671State) of {'internal_playing', S1673GameState0} -> case 'Tianjiupai.RoomServer.Callback':'find_empty_seat'(S1673GameState0) of 'error' -> 'Tianjiupai.RoomServer.Callback':'reply'({'attended', 'error'}, S1671State); {'ok', S1674Seat} -> begin {'meta', S1675Meta0} = maps:get(meta, S1673GameState0), begin S1676WsMref = 'Tianjiupai.WebSocketHandler':'monitor'(S1670WsProc), begin S1677Player = #{connection => {'connected', S1670WsProc, S1676WsMref}, user => S1669User}, begin S1678Players1 = 'Tianjiupai.Quad':'update'(S1674Seat, {'ok', S1677Player}, maps:get(players, S1675Meta0)), begin S1679GameState1 = maps:put(meta, {'meta', maps:put(players, S1678Players1, S1675Meta0)}, S1673GameState0), begin S1680UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids'(S1679GameState1, S1674Seat), begin S1685GameState2 = case maps:get(sync, S1679GameState1) of 'waiting_input' -> begin _ = begin S3249 = 'Tianjiupai.Logger':'debug'({"attend -> waiting input (seat: ~p, user_id: ~s)", 2}, {S1674Seat, S1672UserId}), S3249(<<"RoomServer.sest">>, 486) end, begin S1681Notif = {'notify_entered_midway', #{seat => S1674Seat, user => S1669User}}, begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1680UserIdsForNotification, [S1681Notif | []]), sesterl_internal_prim:'return'(S1679GameState1) end end end; {'waiting_sync', S1682SyncQuad0} -> case 'Tianjiupai.Quad':'access'(S1674Seat, S1682SyncQuad0) of true -> begin _ = begin S3250 = 'Tianjiupai.Logger':'debug'({"attend -> no need to sync (seat: ~p, user_id: ~s, sync_quad: ~p)", 3}, {S1674Seat, S1672UserId, S1682SyncQuad0}), S3250(<<"RoomServer.sest">>, 498) end, begin S1683Notif = {'notify_entered_midway', #{seat => S1674Seat, user => S1669User}}, begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1680UserIdsForNotification, [S1683Notif | []]), sesterl_internal_prim:'return'(S1679GameState1) end end end; false -> begin S1684SyncQuad1 = 'Tianjiupai.Quad':'update'(S1674Seat, true, S1682SyncQuad0), begin _ = begin S3251 = 'Tianjiupai.Logger':'debug'({"attend -> sync update (seat: ~p, user_id: ~s, sync_quad: ~p)", 3}, {S1674Seat, S1672UserId, S1684SyncQuad1}), S3251(<<"RoomServer.sest">>, 509) end, case 'Tianjiupai.Quad':'decompose'(S1684SyncQuad1) of {true, true, true, true} -> begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1680UserIdsForNotification, [{'notify_entered_midway', #{seat => S1674Seat, user => S1669User}} | ['notify_next_step' | []]]), sesterl_internal_prim:'return'(maps:put(sync, 'waiting_input', S1679GameState1)) end; _ -> begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1680UserIdsForNotification, [{'notify_entered_midway', #{seat => S1674Seat, user => S1669User}} | []]), sesterl_internal_prim:'return'(maps:put(sync, {'waiting_sync', S1684SyncQuad1}, S1679GameState1)) end end end end end end, begin S1686State = maps:put(reversed_logs, [{'log_entered', S1669User} | maps:get(reversed_logs, S1671State)], maps:put(room_state, {'internal_playing', S1685GameState2}, S1671State)), begin ok = 'Tianjiupai.RoomServer.Callback':'update_plaza'(S1686State), begin {'ok', S1687PersonalState} = 'Tianjiupai.RoomServer.Callback':'make_personal_state'(S1686State, S1672UserId), 'Tianjiupai.RoomServer.Callback':'reply'({'attended', {'ok', S1687PersonalState}}, S1686State) end end end end end end end end end end end; {'internal_waiting', S1688WaitingState} -> begin S1689Members = maps:get(members, S1688WaitingState), case 'SesterlStdlib.List':'any'(fun(S1690W) -> 'SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1690W)), S1672UserId) end, S1689Members) of true -> begin {'ok', S1691PersonalState} = 'Tianjiupai.RoomServer.Callback':'make_personal_state'(S1671State, S1672UserId), 'Tianjiupai.RoomServer.Callback':'reply'({'attended', {'ok', S1691PersonalState}}, S1671State) end; false -> begin S1692WsMref = 'Tianjiupai.WebSocketHandler':'monitor'(S1670WsProc), begin S1693LogEnter = {'log_entered', S1669User}, begin S1694NotifEnter = {'notify_entered', S1669User}, case S1689Members of [S1695W0 | [S1696W1 | [S1697W2 | _]]] -> begin S1698U0 = maps:get(user, S1695W0), begin S1699U1 = maps:get(user, S1696W1), begin S1700U2 = maps:get(user, S1697W2), begin S1705PlayerQuad = begin S1701Player0 = #{connection => maps:get(connection, S1695W0), user => S1698U0}, begin S1702Player1 = #{connection => maps:get(connection, S1696W1), user => S1699U1}, begin S1703Player2 = #{connection => maps:get(connection, S1697W2), user => S1700U2}, begin S1704Player3 = #{connection => {'connected', S1670WsProc, S1692WsMref}, user => S1669User}, 'Tianjiupai.Quad':'make'({{'ok', S1701Player0}, {'ok', S1702Player1}, {'ok', S1703Player2}, {'ok', S1704Player3}}) end end end end, begin S1706ParentSeat = 'seat_a', begin S1707WholeGameMeta = {'meta', #{inning_index => 0, num_consecutives => 0, parent_seat => S1706ParentSeat, players => S1705PlayerQuad, scores => 'Tianjiupai.Quad':'make'({0, 0, 0, 0})}}, begin S1708GameIndex = #{inning_index => 0, num_consecutives => 0}, begin S1709GameState = 'Tianjiupai.RoomServer.Callback':'start_new_inning'(S1707WholeGameMeta), begin _ = 'SesterlStdlib.List':'for_each'(fun(S1710U) -> case 'Tianjiupai.RoomServer.Callback':'make_observable_game_state'(S1709GameState, S1710U) of 'error' -> sesterl_internal_prim:'return'(ok); {'ok', S1711Obs} -> 'Tianjiupai.RoomServer.Callback':'notify'(S1710U, [S1694NotifEnter | [{'notify_game_start', S1711Obs} | []]]) end end, [maps:get(user_id, S1698U0) | [maps:get(user_id, S1699U1) | [maps:get(user_id, S1700U2) | []]]]), begin S1712State = maps:put(reversed_logs, [{'log_game_start', S1708GameIndex} | [S1693LogEnter | maps:get(reversed_logs, S1671State)]], maps:put(room_state, {'internal_playing', S1709GameState}, S1671State)), begin ok = 'Tianjiupai.RoomServer.Callback':'update_plaza'(S1712State), begin {'ok', S1713PersonalState} = 'Tianjiupai.RoomServer.Callback':'make_personal_state'(S1712State, S1672UserId), 'Tianjiupai.RoomServer.Callback':'reply'({'attended', {'ok', S1713PersonalState}}, S1712State) end end end end end end end end end end end end; _ -> begin S1714W = #{connection => {'connected', S1670WsProc, S1692WsMref}, user => S1669User}, begin S1715WaitingState = maps:put(members, 'SesterlStdlib.List':'append'(S1689Members, [S1714W | []]), S1688WaitingState), begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'('SesterlStdlib.List':'map'(fun(S1716W) -> maps:get(user_id, maps:get(user, S1716W)) end, S1689Members), [S1694NotifEnter | []]), begin S1717State = maps:put(reversed_logs, [S1693LogEnter | maps:get(reversed_logs, S1671State)], maps:put(room_state, {'internal_waiting', S1715WaitingState}, S1671State)), begin ok = 'Tianjiupai.RoomServer.Callback':'update_plaza'(S1717State), begin {'ok', S1718PersonalState} = 'Tianjiupai.RoomServer.Callback':'make_personal_state'(S1717State, S1672UserId), 'Tianjiupai.RoomServer.Callback':'reply'({'attended', {'ok', S1718PersonalState}}, S1717State) end end end end end end end end end end end end end end.
'handle_exit'(S1720UserId, S1721State) -> begin S1737Opt = case maps:get(room_state, S1721State) of {'internal_playing', S1722GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1722GameState, S1720UserId) of 'error' -> 'error'; {'ok', {S1723Seat, S1724Player}} -> begin {'meta', S1725Meta0} = maps:get(meta, S1722GameState), begin S1726Players0 = maps:get(players, S1725Meta0), begin S1727Players1 = 'Tianjiupai.Quad':'update'(S1723Seat, 'error', S1726Players0), begin S1728UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids'(S1722GameState, S1723Seat), {'ok', {maps:get(user, S1724Player), S1728UserIdsForNotification, {'internal_playing', maps:put(meta, {'meta', maps:put(players, S1727Players1, S1725Meta0)}, S1722GameState)}}} end end end end end; {'internal_waiting', S1729WaitingState} -> begin S1730Members0 = maps:get(members, S1729WaitingState), case 'SesterlStdlib.List':'filter'(fun(S1731W0) -> 'SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1731W0)), S1720UserId) end, S1730Members0) of [] -> 'error'; [S1732W | _] -> begin S1734Members1 = 'SesterlStdlib.List':'filter'(fun(S1733W0) -> 'SesterlStdlib.Bool':'not'('SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1733W0)), S1720UserId)) end, S1730Members0), begin S1736UserIdsForNotification = 'SesterlStdlib.List':'map'(fun(S1735W) -> maps:get(user_id, maps:get(user, S1735W)) end, S1734Members1), {'ok', {maps:get(user, S1732W), S1736UserIdsForNotification, {'internal_waiting', maps:put(members, S1734Members1, S1729WaitingState)}}} end end end end end, case S1737Opt of 'error' -> 'Tianjiupai.RoomServer.Callback':'reply'({'exited', false}, S1721State); {'ok', {S1738User, S1739UserIdsForNotification, S1740RoomState}} -> begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1739UserIdsForNotification, [{'notify_exited', S1738User} | []]), begin S1741State = maps:put(reversed_logs, [{'log_exited', S1738User} | maps:get(reversed_logs, S1721State)], maps:put(room_state, S1740RoomState, S1721State)), begin ok = 'Tianjiupai.RoomServer.Callback':'update_plaza'(S1741State), 'Tianjiupai.RoomServer.Callback':'reply'({'exited', true}, S1741State) end end end end end.
'make_winner_diff'(S1743Losers) -> begin S1747LoserDiffSum = 'SesterlStdlib.List':'foldl'(fun(S1744Acc, S1745Loser) -> begin {_, S1746LoserDiff} = S1745Loser, (S1744Acc + S1746LoserDiff) end end, 0, S1743Losers), (0 - S1747LoserDiffSum) end.
'update_score'(S1749Scores, S1750Updates) -> 'SesterlStdlib.List':'foldl'(fun(S1751Acc, S1752Update) -> begin {S1753Scores, S1754Diffs} = S1751Acc, begin {S1755Seat, S1756Diff} = S1752Update, begin S1757Score = 'Tianjiupai.Quad':'access'(S1755Seat, S1753Scores), {'Tianjiupai.Quad':'update'(S1755Seat, (S1757Score + S1756Diff), S1753Scores), 'Tianjiupai.Quad':'update'(S1755Seat, S1756Diff, S1754Diffs)} end end end end, {S1749Scores, 'Tianjiupai.Quad':'make'({0, 0, 0, 0})}, S1750Updates).
'deal_with_trick_end'({'meta', S1759Meta}, S1760WinnerSeat, S1761SpecialOpt) -> case S1761SpecialOpt of 'error' -> {{'meta', S1759Meta}, 'error'}; {'ok', _} -> begin S1762LoserSeats = 'Tianjiupai.Quad':'the_other_seats'(S1760WinnerSeat), begin S1763NumConsecutives = maps:get(num_consecutives, S1759Meta), begin S1764ParentSeat = maps:get(parent_seat, S1759Meta), begin S1769Losers = case 'Tianjiupai.Quad':'seat_equal'(S1760WinnerSeat, S1764ParentSeat) of true -> 'SesterlStdlib.List':'map'(fun(S1765LoserSeat) -> begin S1766LoserDiff = (0 - (2 * (S1763NumConsecutives + 1))), {S1765LoserSeat, S1766LoserDiff} end end, S1762LoserSeats); false -> 'SesterlStdlib.List':'map'(fun(S1767LoserSeat) -> begin S1768LoserDiff = case 'Tianjiupai.Quad':'seat_equal'(S1767LoserSeat, S1764ParentSeat) of true -> (0 - (2 * (S1763NumConsecutives + 1))); false -> (0 - 2) end, {S1767LoserSeat, S1768LoserDiff} end end, S1762LoserSeats) end, begin S1770WinnerDiff = 'Tianjiupai.RoomServer.Callback':'make_winner_diff'(S1769Losers), begin {S1771Scores, S1772Diffs} = 'Tianjiupai.RoomServer.Callback':'update_score'(maps:get(scores, S1759Meta), [{S1760WinnerSeat, S1770WinnerDiff} | S1769Losers]), {{'meta', maps:put(scores, S1771Scores, S1759Meta)}, {'ok', S1772Diffs}} end end end end end end end.
'make_loser_updates_when_parent_wins'(S1774NumConsecutives, S1775LoserSeats, S1776GainsQuad, S1777Coeff) -> 'SesterlStdlib.List':'map'(fun(S1778LoserSeat) -> begin S1779NumGains = 'SesterlStdlib.List':'length'('Tianjiupai.Quad':'access'(S1778LoserSeat, S1776GainsQuad)), begin S1780LoserDiff = case (S1779NumGains == 0) of true -> (0 - (5 * ((S1774NumConsecutives + 1) * S1777Coeff))); false -> ((S1779NumGains - 4) * ((S1774NumConsecutives + 1) * S1777Coeff)) end, {S1778LoserSeat, S1780LoserDiff} end end end, S1775LoserSeats).
'make_loser_updates_when_child_wins'(S1782NumConsecutives, S1783LoserSeats, S1784ParentSeat, S1785GainsQuad, S1786CoeffOriginal) -> 'SesterlStdlib.List':'map'(fun(S1787LoserSeat) -> begin S1788NumGains = 'SesterlStdlib.List':'length'('Tianjiupai.Quad':'access'(S1787LoserSeat, S1785GainsQuad)), begin S1790LoserDiff = begin S1789Coeff = case 'Tianjiupai.Quad':'seat_equal'(S1787LoserSeat, S1784ParentSeat) of true -> ((S1782NumConsecutives + 1) * S1786CoeffOriginal); false -> S1786CoeffOriginal end, case (S1788NumGains == 0) of true -> (0 - (5 * S1789Coeff)); false -> ((S1788NumGains - 4) * S1789Coeff) end end, {S1787LoserSeat, S1790LoserDiff} end end end, S1783LoserSeats).
'deal_with_inning_end'({'meta', S1792Meta}, S1793WinnerSeat, S1794SpecialOpt, S1795GainsQuad) -> begin S1796LoserSeats = 'Tianjiupai.Quad':'the_other_seats'(S1793WinnerSeat), begin S1797NumConsecutives = maps:get(num_consecutives, S1792Meta), begin S1798ParentSeat = maps:get(parent_seat, S1792Meta), case 'Tianjiupai.Quad':'seat_equal'(S1793WinnerSeat, S1798ParentSeat) of true -> begin S1803Losers = case S1794SpecialOpt of {'ok', 'inning_end_with_bazhijie'} -> 'SesterlStdlib.List':'map'(fun(S1799LoserSeat) -> begin S1800LoserDiff = ((0 - 20) * (S1797NumConsecutives + 1)), {S1799LoserSeat, S1800LoserDiff} end end, S1796LoserSeats); {'ok', 'inning_end_with_qizhijie'} -> 'SesterlStdlib.List':'map'(fun(S1801LoserSeat) -> begin S1802LoserDiff = ((0 - 10) * (S1797NumConsecutives + 1)), {S1801LoserSeat, S1802LoserDiff} end end, S1796LoserSeats); {'ok', _} -> 'Tianjiupai.RoomServer.Callback':'make_loser_updates_when_parent_wins'(S1797NumConsecutives, S1796LoserSeats, S1795GainsQuad, 2); 'error' -> 'Tianjiupai.RoomServer.Callback':'make_loser_updates_when_parent_wins'(S1797NumConsecutives, S1796LoserSeats, S1795GainsQuad, 1) end, begin S1804WinnerDiff = 'Tianjiupai.RoomServer.Callback':'make_winner_diff'(S1803Losers), begin {S1805Scores, S1806Diffs} = 'Tianjiupai.RoomServer.Callback':'update_score'(maps:get(scores, S1792Meta), [{S1793WinnerSeat, S1804WinnerDiff} | S1803Losers]), {{'meta', #{inning_index => maps:get(inning_index, S1792Meta), num_consecutives => (S1797NumConsecutives + 1), parent_seat => S1798ParentSeat, players => maps:get(players, S1792Meta), scores => S1805Scores}}, S1806Diffs} end end end; false -> begin S1813Losers = case S1794SpecialOpt of {'ok', 'inning_end_with_bazhijie'} -> 'SesterlStdlib.List':'map'(fun(S1807LoserSeat) -> begin S1808Coeff = case 'Tianjiupai.Quad':'seat_equal'(S1807LoserSeat, S1798ParentSeat) of true -> (S1797NumConsecutives + 1); false -> 1 end, begin S1809LoserDiff = (0 - (20 * S1808Coeff)), {S1807LoserSeat, S1809LoserDiff} end end end, S1796LoserSeats); {'ok', 'inning_end_with_qizhijie'} -> 'SesterlStdlib.List':'map'(fun(S1810LoserSeat) -> begin S1811Coeff = case 'Tianjiupai.Quad':'seat_equal'(S1810LoserSeat, S1798ParentSeat) of true -> (S1797NumConsecutives + 1); false -> 1 end, begin S1812LoserDiff = (0 - (10 * S1811Coeff)), {S1810LoserSeat, S1812LoserDiff} end end end, S1796LoserSeats); {'ok', _} -> 'Tianjiupai.RoomServer.Callback':'make_loser_updates_when_child_wins'(S1797NumConsecutives, S1796LoserSeats, S1798ParentSeat, S1795GainsQuad, 2); 'error' -> 'Tianjiupai.RoomServer.Callback':'make_loser_updates_when_child_wins'(S1797NumConsecutives, S1796LoserSeats, S1798ParentSeat, S1795GainsQuad, 1) end, begin S1814WinnerDiff = 'Tianjiupai.RoomServer.Callback':'make_winner_diff'(S1813Losers), begin {S1815Scores, S1816Diffs} = 'Tianjiupai.RoomServer.Callback':'update_score'(maps:get(scores, S1792Meta), [{S1793WinnerSeat, S1814WinnerDiff} | S1813Losers]), {{'meta', #{inning_index => (maps:get(inning_index, S1792Meta) + 1), num_consecutives => 1, parent_seat => S1793WinnerSeat, players => maps:get(players, S1792Meta), scores => S1815Scores}}, S1816Diffs} end end end end end end end.
'handle_submit_impl'(S1818UserId, S1819Cards, S1820GameState) -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1820GameState, S1818UserId) of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', {S1821Seat, _}} -> case maps:get(inning, S1820GameState) of {'inning_end', _, _} -> sesterl_internal_prim:'return'('error'); {'during_inning', S1822Inning} -> case 'Tianjiupai.Inning':'submit'(S1821Seat, S1819Cards, S1822Inning) of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', {S1823SubmitResult, S1824IsFront}} -> begin S1825SnapshotId = 'Tianjiupai.SnapshotId':'generate'(), begin S1826WholeGameMeta = maps:get(meta, S1820GameState), begin {S1847GameState, S1848LastOpt} = case S1823SubmitResult of {'continues', S1827Inning} -> {#{inning => {'during_inning', S1827Inning}, meta => S1826WholeGameMeta, snapshot_id => S1825SnapshotId, sync => {'waiting_sync', 'Tianjiupai.RoomServer.Callback':'make_initial_sync'()}}, 'error'}; {'wins_trick', S1828WinnerSeat, S1829LastTable, S1830SubmitterHand, S1831SpecialOpt, S1832Inning} -> begin {S1833WholeGameMeta, S1834DiffsOpt} = 'Tianjiupai.RoomServer.Callback':'deal_with_trick_end'(S1826WholeGameMeta, S1828WinnerSeat, S1831SpecialOpt), begin S1837ChangesOpt = case {S1831SpecialOpt, S1834DiffsOpt} of {{'ok', S1835Special}, {'ok', S1836Diffs}} -> {'ok', #{change_reason => {'special_trick_end', S1835Special}, diffs => S1836Diffs}}; _ -> 'error' end, {#{inning => {'during_inning', S1832Inning}, meta => S1833WholeGameMeta, snapshot_id => S1825SnapshotId, sync => {'waiting_sync', 'Tianjiupai.RoomServer.Callback':'make_initial_sync'()}}, {'ok', #{changes => S1837ChangesOpt, hand => S1830SubmitterHand, table => S1829LastTable}}} end end; {'wins_inning', S1838WinnerSeat, S1839LastTable, S1840GainsQuad, S1841SpecialOpt} -> begin {S1842WholeGameMeta, S1843Diffs} = 'Tianjiupai.RoomServer.Callback':'deal_with_inning_end'(S1826WholeGameMeta, S1838WinnerSeat, S1841SpecialOpt, S1840GainsQuad), begin S1845Reason = case S1841SpecialOpt of 'error' -> 'normal_inning_end'; {'ok', S1844Special} -> {'special_inning_end', S1844Special} end, begin S1846Changes = #{change_reason => S1845Reason, diffs => S1843Diffs}, {#{inning => {'inning_end', S1840GainsQuad, 'Tianjiupai.RoomServer.Callback':'make_initial_sync'()}, meta => S1842WholeGameMeta, snapshot_id => S1825SnapshotId, sync => {'waiting_sync', 'Tianjiupai.RoomServer.Callback':'make_initial_sync'()}}, {'ok', #{changes => {'ok', S1846Changes}, hand => [], table => S1839LastTable}}} end end end end, begin S1850CardOpts = case S1824IsFront of true -> 'SesterlStdlib.List':'map'(fun(S1849Card) -> {'ok', S1849Card} end, S1819Cards); false -> 'SesterlStdlib.List':'map'(fun(_) -> 'error' end, S1819Cards) end, begin _ = 'SesterlStdlib.List':'for_each'(fun(S1851U) -> case 'Tianjiupai.RoomServer.Callback':'make_observable_game_state'(S1847GameState, S1851U) of 'error' -> sesterl_internal_prim:'return'(ok); {'ok', S1852Obs} -> begin S1854TrickLast = 'SesterlStdlib.Option':'map'(fun(S1853Last) -> #{changes => maps:get(changes, S1853Last), table => maps:get(table, S1853Last)} end, S1848LastOpt), begin S1855Submission = #{new_state => S1852Obs, seat => S1821Seat, submitted => S1850CardOpts, trick_last => S1854TrickLast}, 'Tianjiupai.RoomServer.Callback':'notify'(S1851U, [{'notify_submission', S1855Submission} | []]) end end end end, 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids'(S1847GameState, S1821Seat)), begin {'ok', S1856Obs} = 'Tianjiupai.RoomServer.Callback':'make_observable_game_state'(S1847GameState, S1818UserId), sesterl_internal_prim:'return'({'ok', {S1856Obs, S1848LastOpt, S1847GameState}}) end end end end end end end end end.
'handle_submit'(S1858UserId, S1859Cards, S1860State) -> begin S1862Opt = case maps:get(room_state, S1860State) of {'internal_waiting', _} -> sesterl_internal_prim:'return'('error'); {'internal_playing', S1861GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_empty_seat'(S1861GameState) of 'error' -> 'Tianjiupai.RoomServer.Callback':'handle_submit_impl'(S1858UserId, S1859Cards, S1861GameState); {'ok', _} -> sesterl_internal_prim:'return'('error') end end, case S1862Opt of 'error' -> 'Tianjiupai.RoomServer.Callback':'reply'({'submission_done', 'error'}, S1860State); {'ok', {S1863Obs, S1864LastOpt, S1865GameState}} -> begin S1868ReversedLogs = case S1864LastOpt of 'error' -> maps:get(reversed_logs, S1860State); {'ok', S1866Last} -> case maps:get(changes, S1866Last) of 'error' -> maps:get(reversed_logs, S1860State); {'ok', S1867Changes} -> [{'log_changes', S1867Changes} | maps:get(reversed_logs, S1860State)] end end, 'Tianjiupai.RoomServer.Callback':'reply'({'submission_done', {'ok', {S1863Obs, S1864LastOpt}}}, maps:put(reversed_logs, S1868ReversedLogs, maps:put(room_state, {'internal_playing', S1865GameState}, S1860State))) end end end.
'handle_ack'(S1870UserId, S1871SnapshotId, S1872State) -> begin S1880Opt = case maps:get(room_state, S1872State) of {'internal_waiting', _} -> sesterl_internal_prim:'return'('error'); {'internal_playing', S1873GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1873GameState, S1870UserId) of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', {S1874Seat, _}} -> case 'Tianjiupai.SnapshotId':'equal'(S1871SnapshotId, maps:get(snapshot_id, S1873GameState)) of true -> case maps:get(sync, S1873GameState) of {'waiting_sync', S1875SyncQuad} -> begin S1876SyncQuad = 'Tianjiupai.Quad':'update'(S1874Seat, true, S1875SyncQuad), begin _ = begin S3262 = 'Tianjiupai.Logger':'debug'({"update sync (snapshot_id: ~s, user_id: ~s, quad: ~p)", 3}, {S1871SnapshotId, S1870UserId, S1876SyncQuad}), S3262(<<"RoomServer.sest">>, 1057) end, case 'Tianjiupai.Quad':'decompose'(S1876SyncQuad) of {true, true, true, true} -> begin S1877UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids'(S1873GameState, S1874Seat), begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'([S1870UserId | S1877UserIdsForNotification], ['notify_next_step' | []]), begin S1878GameState = maps:put(sync, 'waiting_input', S1873GameState), sesterl_internal_prim:'return'({'ok', S1878GameState}) end end end; _ -> begin S1879GameState = maps:put(sync, {'waiting_sync', S1876SyncQuad}, S1873GameState), sesterl_internal_prim:'return'({'ok', S1879GameState}) end end end end; 'waiting_input' -> begin _ = begin S3263 = 'Tianjiupai.Logger':'warning'({"ack during waiting input (snapshot_id: ~s, user_id: ~s)", 2}, {S1871SnapshotId, S1870UserId}), S3263(<<"RoomServer.sest">>, 1077) end, sesterl_internal_prim:'return'('error') end end; false -> begin _ = begin S3264 = 'Tianjiupai.Logger':'warning'({"snapshot mismatch (got: ~s, expected: ~s, user_id: ~s)", 3}, {S1871SnapshotId, maps:get(snapshot_id, S1873GameState), S1870UserId}), S3264(<<"RoomServer.sest">>, 1086) end, sesterl_internal_prim:'return'('error') end end end end, case S1880Opt of 'error' -> 'Tianjiupai.RoomServer.Callback':'no_reply'(S1872State); {'ok', S1881GameState} -> 'Tianjiupai.RoomServer.Callback':'no_reply'(maps:put(room_state, {'internal_playing', S1881GameState}, S1872State)) end end.
'handle_require_next_inning'(S1883UserId, S1884SnapshotId, S1885State) -> begin S1902Opt = case maps:get(room_state, S1885State) of {'internal_waiting', _} -> sesterl_internal_prim:'return'('error'); {'internal_playing', S1886GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1886GameState, S1883UserId) of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', {S1887Seat, _}} -> case 'Tianjiupai.SnapshotId':'equal'(S1884SnapshotId, maps:get(snapshot_id, S1886GameState)) of true -> case maps:get(inning, S1886GameState) of {'during_inning', _} -> sesterl_internal_prim:'return'('error'); {'inning_end', S1888GainsQuad, S1889InningSyncQuad} -> begin S1890InningSyncQuad = 'Tianjiupai.Quad':'update'(S1887Seat, true, S1889InningSyncQuad), begin _ = begin S3266 = 'Tianjiupai.Logger':'debug'({"update inning sync (snapshot_id: ~s, inning_sync_quad: ~p)", 2}, {S1884SnapshotId, S1890InningSyncQuad}), S3266(<<"RoomServer.sest">>, 1124) end, case 'Tianjiupai.Quad':'decompose'(S1890InningSyncQuad) of {true, true, true, true} -> begin S1891WholeGameMeta = maps:get(meta, S1886GameState), begin {'meta', S1892Meta} = S1891WholeGameMeta, begin S1893InningIndex = maps:get(inning_index, S1892Meta), begin S1894UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids'(S1886GameState, S1887Seat), begin S1895UserIdsForNotification = [S1883UserId | S1894UserIdsForNotification], case (S1893InningIndex >= 'Tianjiupai.Constants':'maximum_num_innings'()) of true -> sesterl_internal_prim:'return'({'ok', 'room_close'}); false -> begin S1896GameState = 'Tianjiupai.RoomServer.Callback':'start_new_inning'(S1891WholeGameMeta), begin _ = 'SesterlStdlib.List':'for_each'(fun(S1897U) -> case 'Tianjiupai.RoomServer.Callback':'make_observable_game_state'(S1896GameState, S1897U) of 'error' -> sesterl_internal_prim:'return'(ok); {'ok', S1898Obs} -> 'Tianjiupai.RoomServer.Callback':'notify'(S1897U, [{'notify_game_start', S1898Obs} | []]) end end, S1895UserIdsForNotification), begin S1900GameIndex = begin {'meta', S1899Meta} = maps:get(meta, S1896GameState), #{inning_index => S1893InningIndex, num_consecutives => maps:get(num_consecutives, S1899Meta)} end, sesterl_internal_prim:'return'({'ok', {'room_transition_to_next_inning', S1896GameState, {'ok', S1900GameIndex}}}) end end end end end end end end end; _ -> begin S1901GameState = maps:put(inning, {'inning_end', S1888GainsQuad, S1890InningSyncQuad}, S1886GameState), sesterl_internal_prim:'return'({'ok', {'room_transition_to_next_inning', S1901GameState, 'error'}}) end end end end end; false -> sesterl_internal_prim:'return'('error') end end end, case S1902Opt of 'error' -> 'Tianjiupai.RoomServer.Callback':'no_reply'(S1885State); {'ok', 'room_close'} -> 'Tianjiupai.RoomServer.Callback':'stop'(S1885State); {'ok', {'room_transition_to_next_inning', S1903GameState, S1904GameIndexOpt}} -> begin S1906State = case S1904GameIndexOpt of 'error' -> S1885State; {'ok', S1905GameIndex} -> maps:put(reversed_logs, [{'log_game_start', S1905GameIndex} | maps:get(reversed_logs, S1885State)], S1885State) end, 'Tianjiupai.RoomServer.Callback':'no_reply'(maps:put(room_state, {'internal_playing', S1903GameState}, S1906State)) end end end.
'handle_set_connection'(S1908UserId, S1909WsProc, S1910State) -> begin S1935Opt = case maps:get(room_state, S1910State) of {'internal_waiting', S1911WaitingState} -> begin S1912Members0 = maps:get(members, S1911WaitingState), case 'SesterlStdlib.List':'filter'(fun(S1913W) -> 'SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1913W)), S1908UserId) end, S1912Members0) of [] -> sesterl_internal_prim:'return'('error'); [S1914W | _] -> begin S1915User = maps:get(user, S1914W), begin S1921Acc = 'SesterlStdlib.List':'foldl_effect'(fun(S1916Acc, S1917W0) -> begin S1920W1 = case 'SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1917W0)), S1908UserId) of true -> begin {'ok', ok} = case maps:get(connection, S1917W0) of {'connected', _, _} -> sesterl_internal_prim:'return'({'ok', ok}); {'disconnected', S1918Timer} -> 'Tianjiupai.RoomServer.Callback':'cancel_disconnection_timer'(S1918Timer, S1908UserId, <<"waiting"/utf8>>) end, begin S1919WsMref = 'Tianjiupai.WebSocketHandler':'monitor'(S1909WsProc), sesterl_internal_prim:'return'(maps:put(connection, {'connected', S1909WsProc, S1919WsMref}, S1917W0)) end end; false -> sesterl_internal_prim:'return'(S1917W0) end, sesterl_internal_prim:'return'([S1920W1 | S1916Acc]) end end, [], S1912Members0), begin S1922Members1 = 'SesterlStdlib.List':'reverse'(S1921Acc), begin S1923UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids_from_list'(S1922Members1, S1908UserId), sesterl_internal_prim:'return'({'ok', {S1915User, S1923UserIdsForNotification, {'internal_waiting', #{members => S1922Members1}}}}) end end end end end end; {'internal_playing', S1924GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1924GameState, S1908UserId) of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', {S1925Seat, S1926P0}} -> begin {'meta', S1927Meta} = maps:get(meta, S1924GameState), begin S1928Players0 = maps:get(players, S1927Meta), begin {'ok', ok} = case maps:get(connection, S1926P0) of {'connected', _, _} -> begin _ = begin S3268 = 'Tianjiupai.Logger':'debug'({"no timer (playing, seat: ~p, user_id: ~s)", 2}, {S1925Seat, S1908UserId}), S3268(<<"RoomServer.sest">>, 1239) end, sesterl_internal_prim:'return'({'ok', ok}) end; {'disconnected', S1929Timer} -> 'Tianjiupai.RoomServer.Callback':'cancel_disconnection_timer'(S1929Timer, S1908UserId, <<"playing"/utf8>>) end, begin S1930WsMref = 'Tianjiupai.WebSocketHandler':'monitor'(S1909WsProc), begin S1931P1 = maps:put(connection, {'connected', S1909WsProc, S1930WsMref}, S1926P0), begin S1932Players1 = 'Tianjiupai.Quad':'update'(S1925Seat, {'ok', S1931P1}, S1928Players0), begin S1933UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids_from_quad'(S1932Players1, S1908UserId), begin S1934GameState = maps:put(meta, {'meta', maps:put(players, S1932Players1, S1927Meta)}, S1924GameState), sesterl_internal_prim:'return'({'ok', {maps:get(user, S1931P1), S1933UserIdsForNotification, {'internal_playing', S1934GameState}}}) end end end end end end end end end end, case S1935Opt of 'error' -> 'Tianjiupai.RoomServer.Callback':'no_reply'(S1910State); {'ok', {S1936User, S1937UserIdsForNotification, S1938RoomState}} -> begin S1939Connection = #{is_connected => true, user => S1936User}, begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1937UserIdsForNotification, [{'notify_connection', S1939Connection} | []]), begin S1940State = maps:put(reversed_logs, [{'log_connection', S1939Connection} | maps:get(reversed_logs, S1910State)], maps:put(room_state, S1938RoomState, S1910State)), 'Tianjiupai.RoomServer.Callback':'no_reply'(S1940State) end end end end end.
      send_room_deletion_to_user_server(UserId) ->
          try
              _ = 'Tianjiupai.User':set_room(UserId, error),
              ok
          catch
              _:_ -> ok
          end.
    
'handle_disconnection_timeout'(S1943UserId, S1944State) -> begin _ = begin S3270 = 'Tianjiupai.Logger':'info'({"disconnection timeout (user_id: ~s)", 1}, {S1943UserId}), S3270(<<"RoomServer.sest">>, 1287) end, begin S1945RoomState0 = maps:get(room_state, S1944State), begin S1963Opt = case S1945RoomState0 of {'internal_waiting', S1946WaitingState} -> begin S1947WaitingMembers0 = maps:get(members, S1946WaitingState), case 'SesterlStdlib.List':'filter'(fun(S1948W) -> 'SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1948W)), S1943UserId) end, S1947WaitingMembers0) of [] -> sesterl_internal_prim:'return'('error'); [S1949W | _] -> begin _ = 'Tianjiupai.RoomServer.Callback':'send_room_deletion_to_user_server'(S1943UserId), begin S1950User = maps:get(user, S1949W), begin S1952WaitingMembers1 = 'SesterlStdlib.List':'filter'(fun(S1951W) -> 'SesterlStdlib.Bool':'not'('SesterlStdlib.Binary':'equal'(maps:get(user_id, maps:get(user, S1951W)), S1943UserId)) end, S1947WaitingMembers0), begin S1953UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids_from_list'(S1947WaitingMembers0, S1943UserId), begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1953UserIdsForNotification, [{'notify_exited', S1950User} | []]), sesterl_internal_prim:'return'({'ok', {S1950User, {'internal_waiting', maps:put(members, S1952WaitingMembers1, S1946WaitingState)}}}) end end end end end end end; {'internal_playing', S1954GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1954GameState, S1943UserId) of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', {S1955Seat, S1956Player}} -> begin _ = 'Tianjiupai.RoomServer.Callback':'send_room_deletion_to_user_server'(S1943UserId), begin {'meta', S1957Meta0} = maps:get(meta, S1954GameState), begin S1958Players0 = maps:get(players, S1957Meta0), begin S1959User = maps:get(user, S1956Player), begin S1960UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids'(S1954GameState, S1955Seat), begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1960UserIdsForNotification, [{'notify_exited', S1959User} | []]), begin S1961Players1 = 'Tianjiupai.Quad':'update'(S1955Seat, 'error', S1958Players0), begin S1962GameState = maps:put(meta, {'meta', maps:put(players, S1961Players1, S1957Meta0)}, S1954GameState), sesterl_internal_prim:'return'({'ok', {S1959User, {'internal_playing', S1962GameState}}}) end end end end end end end end end end, begin S1966State = case S1963Opt of {'ok', {S1964User, S1965RoomState1}} -> maps:put(room_state, S1965RoomState1, maps:put(reversed_logs, [{'log_exited', S1964User} | maps:get(reversed_logs, S1944State)], S1944State)); 'error' -> S1944State end, 'Tianjiupai.RoomServer.Callback':'no_reply'(S1966State) end end end end.
'update_sync'(S1968UserId, S1969State) -> case maps:get(room_state, S1969State) of {'internal_waiting', _} -> sesterl_internal_prim:'return'(S1969State); {'internal_playing', S1970GameState} -> case 'Tianjiupai.RoomServer.Callback':'find_user_seat'(S1970GameState, S1968UserId) of 'error' -> sesterl_internal_prim:'return'(S1969State); {'ok', {S1971Seat, _}} -> case maps:get(sync, S1970GameState) of 'waiting_input' -> sesterl_internal_prim:'return'(S1969State); {'waiting_sync', S1972SyncQuad} -> begin S1973SyncQuad = 'Tianjiupai.Quad':'update'(S1971Seat, true, S1972SyncQuad), case 'Tianjiupai.Quad':'decompose'(S1973SyncQuad) of {true, true, true, true} -> begin S1974UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids'(S1970GameState, S1971Seat), begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S1974UserIdsForNotification, ['notify_next_step' | []]), begin S1975GameState = maps:put(sync, 'waiting_input', S1970GameState), sesterl_internal_prim:'return'(maps:put(room_state, {'internal_playing', S1975GameState}, S1969State)) end end end; _ -> begin S1976GameState = maps:put(sync, {'waiting_sync', S1973SyncQuad}, S1970GameState), sesterl_internal_prim:'return'(maps:put(room_state, {'internal_playing', S1976GameState}, S1969State)) end end end end end end.
'handle_call'(S1978Req, _, S1979State) -> case S1978Req of 'get_whole_state' -> begin S1980WholeState = 'Tianjiupai.RoomServer.Callback':'make_whole_room_state'(S1979State), 'Tianjiupai.RoomServer.Callback':'reply'({'whole_state', S1980WholeState}, S1979State) end; {'get_personal_state', S1981UserId} -> begin S1982State = 'Tianjiupai.RoomServer.Callback':'update_sync'(S1981UserId, S1979State), begin S1983PersonalStateOpt = 'Tianjiupai.RoomServer.Callback':'make_personal_state'(S1982State, S1981UserId), 'Tianjiupai.RoomServer.Callback':'reply'({'personal_state', S1983PersonalStateOpt}, S1982State) end end; {'send_chat', S1984User, S1985Text} -> 'Tianjiupai.RoomServer.Callback':'handle_send_chat'(S1984User, S1985Text, S1979State); {'attend', S1986User, S1987WsProc} -> 'Tianjiupai.RoomServer.Callback':'handle_attend'(S1986User, S1987WsProc, S1979State); {'exit', S1988UserId} -> 'Tianjiupai.RoomServer.Callback':'handle_exit'(S1988UserId, S1979State); {'submit', S1989UserId, S1990Cards} -> 'Tianjiupai.RoomServer.Callback':'handle_submit'(S1989UserId, S1990Cards, S1979State) end.
'handle_cast'(S1992Msg, S1993State) -> case S1992Msg of {'ack', S1994UserId, S1995SnapshotId} -> 'Tianjiupai.RoomServer.Callback':'handle_ack'(S1994UserId, S1995SnapshotId, S1993State); {'require_next_inning', S1996UserId, S1997SnapshotId} -> 'Tianjiupai.RoomServer.Callback':'handle_require_next_inning'(S1996UserId, S1997SnapshotId, S1993State); {'set_connection', S1998UserId, S1999WsProc} -> 'Tianjiupai.RoomServer.Callback':'handle_set_connection'(S1998UserId, S1999WsProc, S1993State) end.
'handle_timeout'(S2001State) -> begin _ = begin S3275 = 'Tianjiupai.Logger':'debug'({"timeout (room_id: ~s)", 1}, {maps:get(room_id, maps:get(settings, S2001State))}), S3275(<<"RoomServer.sest">>, 1416) end, 'Tianjiupai.RoomServer.Callback':'stop'(S2001State) end.
'handle_down'(S2003Mref, _, S2004Reason, S2005State) -> case maps:get(room_state, S2005State) of {'internal_waiting', S2006Waiting} -> begin S2007WaitingMembers0 = maps:get(members, S2006Waiting), begin {S2019PlayerAcc, S2020LogAcc} = 'SesterlStdlib.List':'foldl_effect'(fun({S2008PlayerAcc, S2009LogAcc}, S2010Player) -> case maps:get(connection, S2010Player) of {'connected', _, S2011MrefWs} -> case 'SesterlStdlib.MonitorRef':'equal'(S2011MrefWs, S2003Mref) of true -> begin S2012User = maps:get(user, S2010Player), begin S2013UserId = maps:get(user_id, S2012User), begin _ = begin S3277 = 'Tianjiupai.Logger':'info'({"WebSocket connection closed (user_id: ~s, reason: ~p)", 2}, {S2013UserId, S2004Reason}), S3277(<<"RoomServer.sest">>, 1432) end, begin {'ok', S2014Timer} = 'Tianjiupai.RoomServer.Callback':'set_disconnection_timer'(S2013UserId, <<"waiting"/utf8>>), begin S2015UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids_from_list'(S2007WaitingMembers0, S2013UserId), begin S2016Connection = #{is_connected => false, user => S2012User}, begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S2015UserIdsForNotification, [{'notify_connection', S2016Connection} | []]), begin S2017PlayerAcc = [maps:put(connection, {'disconnected', S2014Timer}, S2010Player) | S2008PlayerAcc], begin S2018LogAcc = [{'log_connection', S2016Connection} | S2009LogAcc], sesterl_internal_prim:'return'({S2017PlayerAcc, S2018LogAcc}) end end end end end end end end end; false -> sesterl_internal_prim:'return'({[S2010Player | S2008PlayerAcc], S2009LogAcc}) end; {'disconnected', _} -> sesterl_internal_prim:'return'({[S2010Player | S2008PlayerAcc], S2009LogAcc}) end end, {[], maps:get(reversed_logs, S2005State)}, S2007WaitingMembers0), begin S2021Players = 'SesterlStdlib.List':'reverse'(S2019PlayerAcc), 'Tianjiupai.RoomServer.Callback':'no_reply'(maps:put(room_state, {'internal_waiting', #{members => S2021Players}}, maps:put(reversed_logs, S2020LogAcc, S2005State))) end end end; {'internal_playing', S2022GameState} -> begin {'meta', S2023Meta} = maps:get(meta, S2022GameState), begin S2024Players0 = maps:get(players, S2023Meta), begin {S2036LogAcc, S2037Players} = 'Tianjiupai.Quad':'map_fold_effect'(fun(S2025LogAcc, S2026PlayerOpt) -> case S2026PlayerOpt of 'error' -> sesterl_internal_prim:'return'({S2025LogAcc, 'error'}); {'ok', S2027Player} -> case maps:get(connection, S2027Player) of {'connected', _, S2028MrefWs} -> case 'SesterlStdlib.MonitorRef':'equal'(S2028MrefWs, S2003Mref) of true -> begin S2029User = maps:get(user, S2027Player), begin S2030UserId = maps:get(user_id, S2029User), begin _ = begin S3278 = 'Tianjiupai.Logger':'info'({"WebSocket connection closed (user_id: ~s, reason: ~p)", 2}, {S2030UserId, S2004Reason}), S3278(<<"RoomServer.sest">>, 1478) end, begin {'ok', S2031Timer} = 'Tianjiupai.RoomServer.Callback':'set_disconnection_timer'(maps:get(user_id, maps:get(user, S2027Player)), <<"playing"/utf8>>), begin S2032UserIdsForNotification = 'Tianjiupai.RoomServer.Callback':'get_connected_user_ids_from_quad'(S2024Players0, S2030UserId), begin S2033Connection = #{is_connected => false, user => S2029User}, begin _ = 'Tianjiupai.RoomServer.Callback':'notify_for_each'(S2032UserIdsForNotification, [{'notify_connection', S2033Connection} | []]), begin S2034Player = maps:put(connection, {'disconnected', S2031Timer}, S2027Player), begin S2035LogAcc = [{'log_connection', S2033Connection} | S2025LogAcc], sesterl_internal_prim:'return'({S2035LogAcc, {'ok', S2034Player}}) end end end end end end end end end; false -> sesterl_internal_prim:'return'({S2025LogAcc, S2026PlayerOpt}) end; {'disconnected', _} -> sesterl_internal_prim:'return'({S2025LogAcc, S2026PlayerOpt}) end end end, maps:get(reversed_logs, S2005State), S2024Players0), begin S2038GameState = maps:put(meta, {'meta', maps:put(players, S2037Players, S2023Meta)}, S2022GameState), 'Tianjiupai.RoomServer.Callback':'no_reply'(maps:put(room_state, {'internal_playing', S2038GameState}, maps:put(reversed_logs, S2036LogAcc, S2005State))) end end end end end.
'handle_info'(S2040Info, S2041State) -> case S2040Info of {'disconnection_timeout', S2042UserId} -> 'Tianjiupai.RoomServer.Callback':'handle_disconnection_timeout'(S2042UserId, S2041State); _ -> begin _ = begin S3280 = 'Tianjiupai.Logger':'warning'({"unexpected info (info: ~p, state: ~p)", 2}, {S2040Info, S2041State}), S3280(<<"RoomServer.sest">>, 1515) end, 'Tianjiupai.RoomServer.Callback':'no_reply'(S2041State) end end.
'terminate'(S2044Reason, S2045State) -> begin _ = begin S3282 = 'Tianjiupai.Logger':'debug'({"terminate (reason: ~p, room_id: ~s)", 2}, {S2044Reason, maps:get(room_id, maps:get(settings, S2045State))}), S3282(<<"RoomServer.sest">>, 1520) end, sesterl_internal_prim:'return'(ok) end.
