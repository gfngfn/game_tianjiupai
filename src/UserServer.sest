import Types

module UserServer :> sig

  val start_link<$a> : fun(Types.user_id, binary) -> [$a]Stdlib.RawValue.t
    /* For external use; return values are of the form `{ok, pid()} | error` */

  val get_user_state<$a> : fun(Types.user_id) -> [$a]option<Types.user_state>

  val get_name<$a> : fun(Types.user_id) -> [$a]option<binary>

  val exists<$a> : fun(Types.user_id) -> [$a]bool

  val get_room<$a> : fun(Types.user_id) -> [$a]option<Types.room_id>

  val set_room<$a> : fun(Types.user_id, Types.room_id) -> [$a]option<unit>

  type websocket_proc = Stdlib.RawValue.t
    /* For external use; corresponds to `pid()` */

  val set_websocket_connection<$a> : fun(Types.user_id, websocket_proc) -> [$a]option<unit>

end = struct

  include Types

  type websocket_proc = Stdlib.RawValue.t

  module Callback = struct

    type init_arg = {user_id, binary}

    type monitor_ref = Stdlib.RawValue.t

    type settings = {
      user_id   : user_id,
      user_name : binary,
    }

    type state = {
      settings             : settings,
      belongs_to           : option<{room_id, monitor_ref}>,
      websocket_connection : option<monitor_ref>,
    }

    type request =
      | SetRoom(room_id)
      | SetWebsocketConnection(websocket_proc)
      | GetUserState

    type response =
      | RoomSet(bool)
      | WebsocketConnectionSet
      | UserStateGot(user_state)

    type cast_message =
      | DummyCastMessage

    type info =
      Stdlib.RawValue.t

    val init(init_arg) = act
      let {user_id, user_name} = init_arg in
      let settings = { user_id = user_id, user_name = user_name } in
      let state =
        {
          settings             = settings,
          belongs_to           = None,
          websocket_connection = None,
        }
      in
      Stdlib.GenServer.init_ok(state)

    val monitor_room<$a> : fun(room_id) -> [$a]option<monitor_ref> = external 1 ```
      monitor_room(RoomId) ->
          case tianjiupai_room:monitor(RoomId) of
              {error, _}       -> error;
              {ok, MonitorRef} -> {ok, MonitorRef}
          end.
    ```

    val monitor<$a> : fun(websocket_proc) -> [$a]monitor_ref = external 1 ```
      monitor(WsProc) ->
          erlang:monitor(process, WsProc).
    ```

    val demonitor<$a> : fun(monitor_ref) -> [$a]unit = external 1 ```
      demonitor(MonitorRef) ->
          erlang:demonitor(MonitorRef).
    ```

    val handle_call(req, from, state) = act
      case req of
      | GetUserState ->
          let belongs_to =
            Stdlib.Option.map(fun(pair) -> let {room_id, _} = pair in room_id end, state.belongs_to)
          in
          let user_state =
            {
              user_name  = state.settings.user_name,
              belongs_to = belongs_to,
            }
          in
          Stdlib.GenServer.reply(UserStateGot(user_state), state)
      | SetRoom(room_id) ->
          do monitor_ref_opt <- monitor_room(room_id) in
          case monitor_ref_opt of
          | None ->
              Stdlib.GenServer.reply(RoomSet(false), state)
          | Some(monitor_ref_new) ->
              do dummy <-
                case state.belongs_to of
                | None                   -> return({})
                | Some({_, monitor_ref}) -> demonitor(monitor_ref)
                end
              in
              let state = { state | belongs_to = Some({room_id, monitor_ref_new}) } in
              Stdlib.GenServer.reply(RoomSet(true), state)
          end
      | SetWebsocketConnection(ws_proc) ->
          do dummy <-
            case state.websocket_connection of
            | None              -> return({})
            | Some(monitor_ref) -> demonitor(monitor_ref)
            end
          in
          do monitor_ref_new <- monitor(ws_proc) in
          let state = { state | websocket_connection = Some(monitor_ref_new) } in
          Stdlib.GenServer.reply(WebsocketConnectionSet, state)
      end

    val handle_cast(msg, state) = act
      let _ = print_debug({"unexpected cast message", msg}) in
      Stdlib.GenServer.no_reply(state)

    val check_down_message : fun(info, monitor_ref) -> option<Stdlib.RawValue.t> = external 2 ```
      check_down_message(Info, MonitorRef) ->
        case Info of
            {'DOWN', MonitorRef, process, _Pid, Reason} -> {ok, Reason};
            _                                           -> error
        end.
    ```

    val check_room_down(info, state) =
      case state.belongs_to of
      | None                   -> None
      | Some({_, monitor_ref}) -> check_down_message(info, monitor_ref)
      end

    val check_websocket_down(info, state) =
      case state.websocket_connection of
      | None              -> None
      | Some(monitor_ref) -> check_down_message(info, monitor_ref)
      end

    val handle_info(info : Stdlib.RawValue.t, state : state) = act
      let user_id = state.settings.user_id in
      let state =
        case check_room_down(info, state) of
        | Some(reason) ->
            let _ =
              print_debug(
                format(
                  f'Room closed (user_id: ~p, reason: ~p)~n',
                  {user_id, reason}))
            in
            { state | belongs_to = None }
        | None ->
            case check_websocket_down(info, state) of
            | Some(reason) ->
                let _ =
                  print_debug(
                    format(
                      f'WebSocket connection closed (user_id: ~p, reason: ~p)~n',
                      {user_id, reason}))
                in
                { state | websocket_connection = None }
            | None ->
                let _ =
                  print_debug(
                    format(
                      f'Unexpected info (user_id: ~p, message: ~p)',
                      {user_id, info}))
                in
                state
            end
        end
      in
      Stdlib.GenServer.no_reply(state)

    val terminate(state) = act
      let _ =
        print_debug(
          format(
            f'terminate (user_id: ~p)',
            {state.settings.user_id}))
      in
      return({})
  end

  module Impl = Stdlib.GenServer.Make(Callback)

  val name : fun(room_id) -> Stdlib.RawValue.t = external 1 ```
    name(RoomId) ->
        {?MODULE, RoomId}.
  ```

  type proc = Impl.proc

  val get_proc<$a> : fun(room_id) -> [$a]option<proc> = external 1 ```
    get_proc(RoomId) ->
        case global:whereis_name(name(RoomId)) of
            undefined -> error;
            Pid       -> {ok, Pid}
        end.
  ```

  val exists(user_id) = act
    do opt <- get_proc(user_id) in
    case opt of
    | None    -> return(false)
    | Some(_) -> return(true)
    end

  val start_link_impl<$a, $start> : fun($start, Stdlib.RawValue.t, Callback.init_arg) -> [$a]Stdlib.RawValue.t = external 3 ```
    start_link_impl(Mfargs, Name, InitArg) ->
        {M, start_link, []} = Mfargs,
        gen_server:start_link({global, Name}, M, InitArg, []).
  ```

  val start_link<$a>(room_id : room_id, room_name : binary) : [$a]Stdlib.RawValue.t = act
    start_link_impl(freeze Impl.start_link(_), name(room_id), {room_id, room_name})

  val call<$a, $ret>(
    user_id : user_id,
    req     : Callback.request,
    f       : fun(Callback.response) -> [$a]option<$ret>
  ) : [$a]option<$ret> = act
    do proc_opt <- get_proc(user_id) in
    case proc_opt of
    | None ->
        return(None)
    | Some(proc) ->
        do resp <- Impl.call(proc, req) in
        f(resp)
    end

  val get_user_state(user_id) = act
    call(user_id, Callback.GetUserState, fun(resp) -> act
      case resp of
      | Callback.UserStateGot(user_state) -> return(Some(user_state))
      end
    end)

  val get_name(user_id) = act
    do opt <- get_user_state(user_id) in
    return(Stdlib.Option.map(fun(u) -> u.user_name end, opt))

  val get_room(user_id) = act
    do opt <- get_user_state(user_id) in
    return(Stdlib.Option.bind(opt, fun(u) -> u.belongs_to end))

  val set_room(user_id, room_id) = act
    call(user_id, Callback.SetRoom(room_id), fun(resp) -> act
      case resp of
      | Callback.RoomSet(true)  -> return(Some({}))
      | Callback.RoomSet(false) -> return(None)
      end
    end)

  val set_websocket_connection(user_id, ws_proc) = act
    call(user_id, Callback.SetWebsocketConnection(ws_proc), fun(resp) -> act
      case resp of
      | Callback.WebsocketConnectionSet -> return(Some({}))
      end
    end)

end
