import Logger
import Models
import Constants
import Room
import RoomServer
import RoomServerSup
import WebSocketHandler

module UserServer :> sig
  open Stdlib
  open Models

  type info :: o
  type proc :: o

  type user_state = {
    user_name  : user_name,
    belongs_to : option<room_id>,
  }

  val start_link<$a> : fun(user_id, binary) -> [$a]result<proc, GenServer.start_link_error>
  val get_user_state<$a> : fun(user_id) -> [$a]result<user_state, RawValue.t>
  val get_name<$a> : fun(user_id) -> [$a]result<binary, RawValue.t>
  val exists<$a> : fun(user_id) -> [$a]bool
  val delete<$a> : fun(user_id) -> [$a]bool
  val get_room<$a> : fun(user_id) -> [$a]result<option<room_id>, RawValue.t>
  val set_room<$a> : fun(user_id, option<room_id>) -> [$a]result<unit, RawValue.t>
  val create_room<$a> :
    fun(user_id, -room_id room_id, -room_name binary) -> [$a]result<RoomServer.proc, RawValue.t>
  val as_pid : fun(proc) -> pid<info>
  val from_pid : fun(pid<info>) -> proc
  val get_proc<$a> : fun(user_id) -> [$a]option<proc>
end = struct
  open Stdlib
  open Models

  type user_state = {
    user_name  : user_name,
    belongs_to : option<room_id>,
  }

  module Callback = struct

    type init_arg = {user_id, binary}

    type settings = {
      user_id   : user_id,
      user_name : binary,
    }

    type state = {
      settings   : settings,
      belongs_to : option<{room_id, MonitorRef.t}>,
      creates    : list<{room_id, MonitorRef.t}>,
    }

    type request =
      | SetRoom(option<room_id>)
      | GetUserState
      | CreateRoom(room_id, room_name)

    type response =
      | RoomSet(bool)
      | UserStateGot(user_state)
      | RoomCreated(result<RoomServer.proc, RawValue.t>)

    type cast_message =
      | DeleteUser

    type info = RawValue.t

    type global = user_id

    val init(init_arg) = act
      let {user_id, user_name} = init_arg in
      let settings = { user_id = user_id, user_name = user_name } in
      let state =
        {
          settings   = settings,
          belongs_to = None,
          creates    = [],
        }
      in
      GenServer.init_ok(state, ?timeout Constants.user_expiration_timeout())

    val monitor_room<$a>(room_id) : [$a]option<MonitorRef.t> = act
      Room.monitor(room_id)

    val reply(response, state) = act
      GenServer.reply(response, state, ?timeout Constants.user_expiration_timeout())

    val no_reply(state) = act
      GenServer.no_reply(state, ?timeout Constants.user_expiration_timeout())

    val handle_call(req, _, state) = act
      case req of
      | GetUserState ->
          let belongs_to =
            Option.map(fun(pair) -> let {room_id, _} = pair in room_id end, state.belongs_to)
          in
          let user_state =
            {
              user_name  = state.settings.user_name,
              belongs_to = belongs_to,
            }
          in
          reply(UserStateGot(user_state), state)

      | SetRoom(room_id_opt) ->
          case room_id_opt of
          | None ->
              do _ <-
                case state.belongs_to of
                | None                 -> return({})
                | Some({_, mref_room}) -> MonitorRef.demonitor(mref_room)
                end
              in
              let state = { state | belongs_to = None } in
              reply(RoomSet(true), state)

          | Some(room_id) ->
              do mref_opt <- monitor_room(room_id) in
              case mref_opt of
              | None ->
                /* If the room does not exist: */
                  reply(RoomSet(false), state)

              | Some(mref_room_new) ->
                  do _ <-
                    case state.belongs_to of
                    | None                 -> return({})
                    | Some({_, mref_room}) -> MonitorRef.demonitor(mref_room)
                    end
                  in
                  let state = { state | belongs_to = Some({room_id, mref_room_new}) } in
                  reply(RoomSet(true), state)
              end
          end

      | CreateRoom(room_id, room_name) ->
          let creates = state.creates in
          if List.length(creates) >= Constants.maximum_num_rooms_per_user() then
            reply(RoomCreated(Error(RawValue.forget("capacity per user exceeded"))), state)
          else
            do res <- RoomServerSup.start_child(-room_id room_id, -room_name room_name) in
            case res of
            | Ok(proc) ->
                do mref <- MonitorRef.monitor(RoomServer.as_pid(proc)) in
                let _ =
                  let settings = state.settings in
                  assert Logger.debug(
                    f'create room (room_id: ~s, user_id: ~s, user_name: ~s)',
                    {room_id, settings.user_id, settings.user_name})
                in
                reply(RoomCreated(Ok(proc)), { state | creates = {room_id, mref} :: creates })
            | Error(err) ->
                reply(RoomCreated(Error(err)), state)
            end
      end

    val handle_cast(msg, state) = act
      case msg of
      | DeleteUser ->
          let _ = assert Logger.info(f'stop (user_id: ~s)', {state.settings.user_id}) in
          GenServer.no_reply_and_stop(StopReason.normal(), state)
      end

    val is_room_down(mref : MonitorRef.t, state : state) : bool =
      case state.belongs_to of
      | None                 -> false
      | Some({_, mref_room}) -> MonitorRef.equal(mref, mref_room)
      end

    val handle_timeout(state : state) = act
      let _ = assert Logger.info(f'timeout (user_id: ~s)', {state.settings.user_id}) in
      GenServer.no_reply_and_stop(StopReason.normal(), state)

    val handle_down(mref, pid, reason, state : state) = act
      let user_id = state.settings.user_id in
      do state <-
        if is_room_down(mref, state) then
          let _ = assert Logger.debug(f'room closed (user_id: ~s, reason: ~p)', {user_id, reason}) in
          return({ state | belongs_to = None })
        else
          let {deleted_room_opt, acc} =
            List.foldl(
              fun({deleted_room_opt, acc}, {room_id, mref0}) ->
                if MonitorRef.equal(mref0, mref) then
                  {Some(room_id), acc}
                else
                  {deleted_room_opt, {room_id, mref0} :: acc}
              end,
              {None, []},
              state.creates)
          in
          case deleted_room_opt of
          | None ->
              let _ =
                assert Logger.warning(
                  f'unexpected down (user_id: ~s, mref: ~p, pid: ~p, reason: ~p, state: ~p)',
                  {user_id, mref, pid, reason, state}
                )
              in
              return(state)
          | Some(room_id) ->
              let _ =
                assert Logger.debug(
                  f'room deleted (user_id: ~s, room_id: ~s, mref: ~p, pid: ~p, reason: ~p, state: ~p)',
                  {user_id, room_id, mref, pid, reason, state}
                )
              in
              return({ state | creates = List.reverse(acc) })
          end
      in
      no_reply(state)

    val handle_info(info : RawValue.t, state : state) = act
      let _ = assert Logger.warning(f'unexpected info (info: ~p, state: ~p)', {info, state}) in
      no_reply(state)

    val terminate(reason, state) = act
      let _ = assert Logger.debug(f'terminate (reason: ~p, user_id: ~s)', {reason, state.settings.user_id}) in
      return({})
  end

  module Impl = GenServer.Make(Callback)

  type info = Callback.info

  type proc = Impl.proc

  val get_proc<$a>(user_id) : [$a]option<proc> = act
    Impl.where_is_global(user_id)

  val exists(user_id) = act
    do opt <- get_proc(user_id) in
    case opt of
    | None    -> return(false)
    | Some(_) -> return(true)
    end

  val delete(user_id) = act
    do opt <- get_proc(user_id) in
    case opt of
    | None ->
        return(false)
    | Some(proc) ->
        do {} <- Impl.cast(proc, Callback.DeleteUser) in
        return(true)
    end

  val start_link<$a>(user_id : user_id, user_name : binary) : [$a]result<proc, GenServer.start_link_error> = act
    Impl.start_link_name({user_id, user_name}, -name Global(user_id))

  val as_pid(proc) =
    Impl.as_pid(proc)

  val from_pid(pid) =
    Impl.from_pid(pid)

  val call<$a, $ret>(
    user_id : user_id,
    req     : Callback.request,
    f       : fun(Callback.response) -> [$a]result<$ret, RawValue.t>
  ) : [$a]result<$ret, RawValue.t> = act
    do proc_opt <- get_proc(user_id) in
    case proc_opt of
    | None ->
        return(Error(RawValue.forget({"no proc", user_id})))
    | Some(proc) ->
        do resp_result <- Impl.call(proc, req) in
        case resp_result of
        | Ok(resp) ->
            f(resp)
        | Error(err) ->
            let _ =
              assert Logger.warning(
                f'call failed (user_id: ~s, req: ~p, proc: ~p, error: ~p)',
                {user_id, req, proc, err},
              )
            in
            return(Error(err))
        end
    end

  val get_user_state(user_id) = act
    call(user_id, Callback.GetUserState,
      fun(Callback.UserStateGot(user_state)) -> act return(Ok(user_state)) end)

  val get_name(user_id) = act
    do res <- get_user_state(user_id) in
    return(Result.map(fun(u) -> u.user_name end, res))

  val get_room(user_id) = act
    do res <- get_user_state(user_id) in
    return(Result.map(fun(u) -> u.belongs_to end, res))

  val set_room(user_id, room_id_opt) = act
    call(user_id, Callback.SetRoom(room_id_opt), fun(Callback.RoomSet(success)) -> act
      if success then return(Ok({})) else return(Error(RawValue.forget("set room failed")))
    end)

  val create_room(user_id, -room_id room_id, -room_name room_name) = act
    call(user_id, Callback.CreateRoom(room_id, room_name), fun(Callback.RoomCreated(res)) -> act
      return(res)
    end)

end
