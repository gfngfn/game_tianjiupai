-module('Tianjiupai.Api').
-export(['create_user'/1, 'is_existent_user'/1, 'delete_user'/1, 'get_all_rooms'/0, 'get_personal_state'/3, 'submit'/3, 'create_room'/2, 'enter_room'/2, 'exit_room'/2, 'update_room'/3, 'perform_command'/2, 'set_websocket_connection'/2, 'encode_notification'/1, 'make_flag_user'/1]).
'create_user'(S2281ReqBody) -> case 'SesterlJson.Decode':'run'('Tianjiupai.Models':'decode_create_user_request'(), S2281ReqBody) of {'ok', S2282CreateUserRequest} -> begin S2283UserName = maps:get(user_name, S2282CreateUserRequest), begin S2284Res = 'Tianjiupai.User':'create'(S2283UserName), case S2284Res of {'ok', S2285UserId} -> begin _ = begin S2751 = 'Tianjiupai.Logger':'info'({"user created (user_name: ~p, user_id: ~p)", 2}, {S2283UserName, S2285UserId}), S2751(<<"Api.sest">>, 17) end, begin S2286Enc = 'Tianjiupai.Models':'encode_create_user_response'(), begin S2287RespBody = 'SesterlJson.Encode':'run'(S2286Enc(#{user_id => S2285UserId})), sesterl_internal_prim:'return'({'ok', {S2285UserId, S2287RespBody}}) end end end; {'error', _} -> sesterl_internal_prim:'return'('error') end end end; {'error', _} -> sesterl_internal_prim:'return'('error') end.
'is_existent_user'(S2289UserId) -> 'Tianjiupai.User':'exists'(S2289UserId).
'delete_user'(S2291UserId) -> 'Tianjiupai.User':'delete'(S2291UserId).
'get_all_rooms'() -> begin S2293RoomSummaries = 'Tianjiupai.Room':'get_all_rooms'(), begin S2294Enc = 'Tianjiupai.Models':'encode_get_all_rooms_response'(), sesterl_internal_prim:'return'('SesterlJson.Encode':'run'(S2294Enc(#{rooms => S2293RoomSummaries}))) end end.
'get_personal_state'(S2296RoomId, S2297UserId, S2298Validator) -> case S2298Validator(S2297UserId) of true -> begin S2299Res = 'Tianjiupai.Room':'get_personal_state'(S2296RoomId, S2297UserId), case S2299Res of {'ok', S2300PersonalState} -> begin S2301Enc = 'Tianjiupai.Models':'encode_personal_state'(), sesterl_internal_prim:'return'({'ok', 'SesterlJson.Encode':'run'(S2301Enc(S2300PersonalState))}) end; 'error' -> sesterl_internal_prim:'return'('error') end end; false -> sesterl_internal_prim:'return'('error') end.
'submit'(S2303RoomId, S2304UserId, S2305Cards) -> begin S2306Res = 'Tianjiupai.Room':'submit'(S2303RoomId, S2304UserId, S2305Cards), begin S2307IsSuccess = case S2306Res of {'ok', _} -> true; 'error' -> false end, begin _ = begin S2757 = 'Tianjiupai.Logger':'info'({"submit (room_id: ~p, user_id: ~p, cards: ~p, success: ~p)", 4}, {S2304UserId, S2303RoomId, S2305Cards, S2307IsSuccess}), S2757(<<"Api.sest">>, 65) end, case S2306Res of {'ok', {S2308Obs, S2309TrickLastOpt}} -> begin S2310Enc = 'Tianjiupai.Models':'encode_submit_cards_response'(), sesterl_internal_prim:'return'({'ok', 'SesterlJson.Encode':'run'(S2310Enc(#{new_state => S2308Obs, trick_last => S2309TrickLastOpt}))}) end; 'error' -> sesterl_internal_prim:'return'('error') end end end end.
'create_room'(S2312ReqBody, S2313Validator) -> case 'SesterlJson.Decode':'run'('Tianjiupai.Models':'decode_create_room_request'(), S2312ReqBody) of {'ok', S2314CreateRoomRequest} -> begin S2315UserId = maps:get(user_id, S2314CreateRoomRequest), begin S2316RoomName = maps:get(room_name, S2314CreateRoomRequest), case S2313Validator(S2315UserId) of true -> begin S2317Res = 'Tianjiupai.Room':'create'(S2316RoomName), case S2317Res of {'ok', S2318RoomId} -> begin _ = begin S2759 = 'Tianjiupai.Logger':'info'({"room created (room_name: ~p, room_id: ~p, created_by: ~p)", 3}, {S2316RoomName, S2318RoomId, S2315UserId}), S2759(<<"Api.sest">>, 88) end, begin S2319Enc = 'Tianjiupai.Models':'encode_create_room_response'(), begin S2320RespBody = 'SesterlJson.Encode':'run'(S2319Enc(#{room_id => S2318RoomId})), sesterl_internal_prim:'return'({'ok', {S2318RoomId, S2320RespBody}}) end end end; {'error', _} -> sesterl_internal_prim:'return'('error') end end; false -> sesterl_internal_prim:'return'('error') end end end; {'error', _} -> sesterl_internal_prim:'return'('error') end.
'enter_room'(S2322UserId, S2323RoomId) -> begin S2324Res = 'Tianjiupai.User':'set_room'(S2322UserId, {'ok', S2323RoomId}), case S2324Res of {'ok', ok} -> begin S2325Res = 'Tianjiupai.User':'get_name'(S2322UserId), begin {'ok', S2326UserName} = S2325Res, begin S2327User = #{user_id => S2322UserId, user_name => S2326UserName}, begin S2328Res = 'Tianjiupai.Room':'attend'(S2323RoomId, S2327User), begin S2329IsSuccess = case S2328Res of {'ok', _} -> true; 'error' -> false end, begin _ = begin S2761 = 'Tianjiupai.Logger':'info'({"attend (user_id: ~p, room_id: ~p, success: ~p)", 3}, {S2322UserId, S2323RoomId, S2329IsSuccess}), S2761(<<"Api.sest">>, 120) end, case S2328Res of {'ok', S2330PersonalState} -> begin S2331Enc = 'Tianjiupai.Models':'encode_enter_room_response'(), sesterl_internal_prim:'return'({'ok', 'SesterlJson.Encode':'run'(S2331Enc(S2330PersonalState))}) end; 'error' -> sesterl_internal_prim:'return'('error') end end end end end end end; 'error' -> sesterl_internal_prim:'return'('error') end end.
'exit_room'(S2333UserId, S2334RoomId) -> begin S2335Res = 'Tianjiupai.User':'set_room'(S2333UserId, 'error'), case S2335Res of {'ok', ok} -> begin S2336Res = 'Tianjiupai.Room':'exit'(S2334RoomId, S2333UserId), begin S2337IsSuccess = case S2336Res of {'ok', _} -> true; 'error' -> false end, begin _ = begin S2763 = 'Tianjiupai.Logger':'info'({"exit (user_id: ~p, room_id: ~p, success: ~p)", 3}, {S2333UserId, S2334RoomId, S2337IsSuccess}), S2763(<<"Api.sest">>, 148) end, case S2336Res of {'ok', ok} -> begin S2338Enc = 'Tianjiupai.Models':'encode_exit_room_response'(), sesterl_internal_prim:'return'({'ok', 'SesterlJson.Encode':'run'(S2338Enc(ok))}) end; 'error' -> sesterl_internal_prim:'return'('error') end end end end; 'error' -> sesterl_internal_prim:'return'('error') end end.
'update_room'(S2340RoomId, S2341ReqBody, S2342Validator) -> case 'SesterlJson.Decode':'run'('Tianjiupai.Models':'decode_room_request'(), S2341ReqBody) of {'ok', S2343RoomRequest} -> case S2343RoomRequest of {'room_request_to_enter_room', S2344EnterRoomRequest} -> begin S2345UserId = maps:get(user_id, S2344EnterRoomRequest), case S2342Validator(S2345UserId) of true -> 'Tianjiupai.Api':'enter_room'(S2345UserId, S2340RoomId); false -> sesterl_internal_prim:'return'('error') end end; {'room_request_to_exit_room', S2346ExitRoomRequest} -> begin S2347UserId = maps:get(user_id, S2346ExitRoomRequest), case S2342Validator(S2347UserId) of true -> 'Tianjiupai.Api':'exit_room'(S2347UserId, S2340RoomId); false -> sesterl_internal_prim:'return'('error') end end; {'room_request_to_submit_cards', S2348SubmitCardsRequest} -> begin S2349UserId = maps:get(user_id, S2348SubmitCardsRequest), begin S2350Cards = maps:get(cards, S2348SubmitCardsRequest), case S2342Validator(S2349UserId) of true -> 'Tianjiupai.Api':'submit'(S2340RoomId, S2349UserId, S2350Cards); false -> sesterl_internal_prim:'return'('error') end end end end; {'error', _} -> sesterl_internal_prim:'return'('error') end.
'perform_command'(S2352UserId, S2353Data) -> case 'SesterlJson.Decode':'run'('Tianjiupai.Models':'decode_command'(), S2353Data) of {'ok', S2354Command} -> case S2354Command of {'command_comment', S2355Text} -> begin S2356Res = 'Tianjiupai.User':'send_chat'(S2352UserId, S2355Text), begin _ = case S2356Res of {'ok', ok} -> ok; 'error' -> begin S2766 = 'Tianjiupai.Logger':'warning'({"failed to send a chat comment (user_id: ~p, text: ~p)", 2}, {S2352UserId, S2355Text}), S2766(<<"Api.sest">>, 203) end end, sesterl_internal_prim:'return'(ok) end end; {'command_ack', S2357SnapshotId} -> begin S2358Res = 'Tianjiupai.User':'ack'(S2352UserId, S2357SnapshotId), begin _ = begin S2767 = 'Tianjiupai.Logger':'info'({"ack (user_id: ~p, snapshot_id: ~p)", 2}, {S2352UserId, S2357SnapshotId}), S2767(<<"Api.sest">>, 213) end, sesterl_internal_prim:'return'(ok) end end; 'command_heartbeat' -> sesterl_internal_prim:'return'(ok); {'command_next_inning', S2359SnapshotId} -> begin S2360Res = 'Tianjiupai.User':'require_next_inning'(S2352UserId, S2359SnapshotId), begin _ = begin S2768 = 'Tianjiupai.Logger':'info'({"next inning (user_id: ~p, snapshot_id: ~p)", 2}, {S2352UserId, S2359SnapshotId}), S2768(<<"Api.sest">>, 224) end, sesterl_internal_prim:'return'(ok) end end end; {'error', _} -> sesterl_internal_prim:'return'(ok) end.
'set_websocket_connection'(S2362UserId, S2363WsPid) -> 'Tianjiupai.User':'set_websocket_connection'(S2362UserId, S2363WsPid).
'encode_notification'(S2365Notification) -> begin S2366Enc = 'Tianjiupai.Models':'encode_notification'(), 'SesterlJson.Encode':'run'(S2366Enc(S2365Notification)) end.
'make_flag_user'(S2368UserIdOpt) -> begin S2369Enc = 'Tianjiupai.Models':'encode_flag_user_option'(), begin S2373Opt = case S2368UserIdOpt of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', S2370UserId} -> begin S2371Res = 'Tianjiupai.User':'get_info'(S2370UserId), case S2371Res of {'ok', S2372Info} -> sesterl_internal_prim:'return'({'ok', #{belongs_to => maps:get(belongs_to, S2372Info), id => S2370UserId, name => maps:get(user_name, S2372Info)}}); 'error' -> sesterl_internal_prim:'return'('error') end end end, sesterl_internal_prim:'return'('SesterlJson.Encode':'run'(S2369Enc(S2373Opt))) end end.
