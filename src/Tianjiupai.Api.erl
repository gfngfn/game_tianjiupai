-module('Tianjiupai.Api').
-export(['create_user'/1, 'is_existent_user'/1, 'delete_user'/1, 'subscribe_plaza'/2, 'get_all_rooms'/0, 'get_personal_state'/3, 'submit'/3, 'create_room'/2, 'enter_room'/3, 'exit_room'/3, 'update_room'/3, 'send_chat'/2, 'ack'/2, 'require_next_inning'/2, 'perform_command'/2, 'set_websocket_connection'/2, 'encode_notification'/1, 'make_flag_user'/1]).
'create_user'(S2684ReqBody) -> case 'SesterlJson.Decode':'run'('Tianjiupai.Models':'decode_create_user_request'(), S2684ReqBody) of {'ok', S2685CreateUserRequest} -> begin S2686UserName = maps:get(user_name, S2685CreateUserRequest), begin S2687Res = 'Tianjiupai.User':'create'(S2686UserName), case S2687Res of {'ok', S2688UserId} -> begin _ = begin S3334 = 'Tianjiupai.Logger':'info'({"user created (user_name: ~s, user_id: ~s)", 2}, {S2686UserName, S2688UserId}), S3334(<<"Api.sest">>, 19) end, begin S2689Enc = 'Tianjiupai.Models':'encode_create_user_response'(), begin S2690RespBody = 'SesterlJson.Encode':'run'(S2689Enc(#{user_id => S2688UserId})), sesterl_internal_prim:'return'({'ok', {S2688UserId, S2690RespBody}}) end end end; {'error', _} -> sesterl_internal_prim:'return'('error') end end end; {'error', _} -> sesterl_internal_prim:'return'('error') end.
'is_existent_user'(S2692UserId) -> 'Tianjiupai.User':'exists'(S2692UserId).
'delete_user'(S2694UserId) -> begin S2695Deleted = 'Tianjiupai.User':'delete'(S2694UserId), case S2695Deleted of true -> begin _ = begin S3337 = 'Tianjiupai.Logger':'info'({"user deleted (user_id: ~s)", 1}, {S2694UserId}), S3337(<<"Api.sest">>, 40) end, sesterl_internal_prim:'return'(ok) end; false -> sesterl_internal_prim:'return'(ok) end end.
'subscribe_plaza'(S2697UserId, S2698WsProc) -> 'Tianjiupai.PlazaServer':'subscribe'(S2697UserId, S2698WsProc).
'get_all_rooms'() -> begin S2700RoomSummaries = 'Tianjiupai.Room':'get_all_rooms'(), begin S2701Enc = 'Tianjiupai.Models':'encode_get_all_rooms_response'(), sesterl_internal_prim:'return'('SesterlJson.Encode':'run'(S2701Enc(#{rooms => S2700RoomSummaries}))) end end.
'get_personal_state'(S2703RoomId, S2704UserId, S2705Validator) -> case S2705Validator(S2704UserId) of true -> begin S2706Res = 'Tianjiupai.Room':'get_personal_state'(S2703RoomId, S2704UserId), case S2706Res of {'ok', S2707PersonalState} -> begin S2708Enc = 'Tianjiupai.Models':'encode_personal_state'(), sesterl_internal_prim:'return'({'ok', 'SesterlJson.Encode':'run'(S2708Enc(S2707PersonalState))}) end; 'error' -> sesterl_internal_prim:'return'('error') end end; false -> sesterl_internal_prim:'return'('error') end.
'submit'(S2710RoomId, S2711UserId, S2712Cards) -> begin S2713Res = 'Tianjiupai.Room':'submit'(S2710RoomId, S2711UserId, S2712Cards), begin S2714IsSuccess = case S2713Res of {'ok', _} -> true; 'error' -> false end, begin _ = begin S3342 = 'Tianjiupai.Logger':'info'({"submit (room_id: ~s, user_id: ~s, cards: ~p, success: ~p)", 4}, {S2711UserId, S2710RoomId, S2712Cards, S2714IsSuccess}), S3342(<<"Api.sest">>, 75) end, case S2713Res of {'ok', {S2715Obs, S2716TrickLastOpt}} -> begin S2717Enc = 'Tianjiupai.Models':'encode_submit_cards_response'(), sesterl_internal_prim:'return'({'ok', 'SesterlJson.Encode':'run'(S2717Enc(#{new_state => S2715Obs, trick_last => S2716TrickLastOpt}))}) end; 'error' -> sesterl_internal_prim:'return'('error') end end end end.
'create_room'(S2719ReqBody, S2720Validator) -> case 'SesterlJson.Decode':'run'('Tianjiupai.Models':'decode_create_room_request'(), S2719ReqBody) of {'ok', S2721CreateRoomRequest} -> begin S2722UserId = maps:get(user_id, S2721CreateRoomRequest), begin S2723RoomName = maps:get(room_name, S2721CreateRoomRequest), case S2720Validator(S2722UserId) of true -> begin S2724Res = 'Tianjiupai.Room':'create'(S2722UserId, S2723RoomName), case S2724Res of {'ok', S2725RoomId} -> begin _ = begin S3344 = 'Tianjiupai.Logger':'info'({"room created (room_name: ~s, room_id: ~s, created_by: ~s)", 3}, {S2723RoomName, S2725RoomId, S2722UserId}), S3344(<<"Api.sest">>, 98) end, begin S2726Enc = 'Tianjiupai.Models':'encode_create_room_response'(), begin S2727RespBody = 'SesterlJson.Encode':'run'(S2726Enc(#{room_id => S2725RoomId})), sesterl_internal_prim:'return'({'ok', {S2725RoomId, S2727RespBody}}) end end end; {'error', S2728Reason} -> begin _ = begin S3345 = 'Tianjiupai.Logger':'info'({"failed to create room (room_name: ~s, created_by: ~s, reason: ~p)", 3}, {S2723RoomName, S2722UserId, S2728Reason}), S3345(<<"Api.sest">>, 108) end, sesterl_internal_prim:'return'('error') end end end; false -> sesterl_internal_prim:'return'('error') end end end; {'error', _} -> sesterl_internal_prim:'return'('error') end.
'enter_room'(S2730UserId, S2731RoomId, S2732WsProc) -> begin S2733Res = 'Tianjiupai.User':'set_room'(S2730UserId, {'ok', S2731RoomId}), case S2733Res of {'ok', ok} -> begin {'ok', S2734UserName} = 'Tianjiupai.User':'get_name'(S2730UserId), begin S2735User = #{user_id => S2730UserId, user_name => S2734UserName}, begin S2736Res = 'Tianjiupai.Room':'attend'(S2731RoomId, S2735User, S2732WsProc), begin ok = 'Tianjiupai.PlazaServer':'unsubscribe'(S2730UserId), begin S2737IsSuccess = case S2736Res of {'ok', _} -> true; 'error' -> false end, begin _ = begin S3347 = 'Tianjiupai.Logger':'info'({"attend (user_id: ~s, room_id: ~s, success: ~p)", 3}, {S2730UserId, S2731RoomId, S2737IsSuccess}), S3347(<<"Api.sest">>, 136) end, case S2736Res of {'ok', S2738PersonalState} -> begin S2739Enc = 'Tianjiupai.Models':'encode_enter_room_response'(), sesterl_internal_prim:'return'({'ok', 'SesterlJson.Encode':'run'(S2739Enc(S2738PersonalState))}) end; 'error' -> sesterl_internal_prim:'return'('error') end end end end end end end; {'error', S2740Reason} -> begin _ = begin S3348 = 'Tianjiupai.Logger':'info'({"failed to attend (user_id: ~s, room_id: ~s, reason: ~p)", 3}, {S2730UserId, S2731RoomId, S2740Reason}), S3348(<<"Api.sest">>, 151) end, sesterl_internal_prim:'return'('error') end end end.
'exit_room'(S2742UserId, S2743RoomId, S2744WsProc) -> begin S2745Res = 'Tianjiupai.User':'set_room'(S2742UserId, 'error'), case S2745Res of {'ok', ok} -> begin S2746Res = 'Tianjiupai.Room':'exit'(S2743RoomId, S2742UserId), begin ok = 'Tianjiupai.PlazaServer':'subscribe'(S2742UserId, S2744WsProc), begin S2747IsSuccess = case S2746Res of {'ok', _} -> true; 'error' -> false end, begin _ = begin S3350 = 'Tianjiupai.Logger':'info'({"exit (user_id: ~s, room_id: ~s, success: ~p)", 3}, {S2742UserId, S2743RoomId, S2747IsSuccess}), S3350(<<"Api.sest">>, 172) end, case S2746Res of {'ok', ok} -> begin S2748Enc = 'Tianjiupai.Models':'encode_exit_room_response'(), sesterl_internal_prim:'return'({'ok', 'SesterlJson.Encode':'run'(S2748Enc(ok))}) end; 'error' -> sesterl_internal_prim:'return'('error') end end end end end; {'error', S2749Reason} -> begin _ = begin S3351 = 'Tianjiupai.Logger':'info'({"failed to exit (user_id: ~s, room_id: ~s, reason: ~p)", 3}, {S2742UserId, S2743RoomId, S2749Reason}), S3351(<<"Api.sest">>, 186) end, sesterl_internal_prim:'return'('error') end end end.
'update_room'(S2751RoomId, S2752ReqBody, S2753Validator) -> case 'SesterlJson.Decode':'run'('Tianjiupai.Models':'decode_room_request'(), S2752ReqBody) of {'ok', S2754RoomRequest} -> case S2754RoomRequest of {'room_request_to_enter_room', S2755EnterRoomRequest} -> begin S2756UserId = maps:get(user_id, S2755EnterRoomRequest), case S2753Validator(S2756UserId) of true -> begin S2757Opt = 'Tianjiupai.WebSocketHandler':'where_is'(S2756UserId), case S2757Opt of {'ok', S2758WsProc} -> 'Tianjiupai.Api':'enter_room'(S2756UserId, S2751RoomId, S2758WsProc); 'error' -> sesterl_internal_prim:'return'('error') end end; false -> sesterl_internal_prim:'return'('error') end end; {'room_request_to_exit_room', S2759ExitRoomRequest} -> begin S2760UserId = maps:get(user_id, S2759ExitRoomRequest), case S2753Validator(S2760UserId) of true -> begin S2761Opt = 'Tianjiupai.WebSocketHandler':'where_is'(S2760UserId), case S2761Opt of {'ok', S2762WsProc} -> 'Tianjiupai.Api':'exit_room'(S2760UserId, S2751RoomId, S2762WsProc); 'error' -> sesterl_internal_prim:'return'('error') end end; false -> sesterl_internal_prim:'return'('error') end end; {'room_request_to_submit_cards', S2763SubmitCardsRequest} -> begin S2764UserId = maps:get(user_id, S2763SubmitCardsRequest), begin S2765Cards = maps:get(cards, S2763SubmitCardsRequest), case S2753Validator(S2764UserId) of true -> 'Tianjiupai.Api':'submit'(S2751RoomId, S2764UserId, S2765Cards); false -> sesterl_internal_prim:'return'('error') end end end end; {'error', _} -> sesterl_internal_prim:'return'('error') end.
'send_chat'(S2767UserId, S2768Text) -> begin S2769UserStateOpt = 'Tianjiupai.User':'get_info'(S2767UserId), case S2769UserStateOpt of {'error', S2770Reason} -> begin _ = begin S3354 = 'Tianjiupai.Logger':'info'({"failed to send chat (user_id: ~s, reason: ~p)", 2}, {S2767UserId, S2770Reason}), S3354(<<"Api.sest">>, 236) end, sesterl_internal_prim:'return'('error') end; {'ok', S2771UserState} -> case maps:get(belongs_to, S2771UserState) of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', S2772RoomId} -> begin S2773User = #{user_id => S2767UserId, user_name => maps:get(user_name, S2771UserState)}, 'Tianjiupai.Room':'send_chat'(S2772RoomId, S2773User, S2768Text) end end end end.
'ack'(S2775UserId, S2776SnapshotId) -> begin S2777RoomIdOptRes = 'Tianjiupai.User':'get_room'(S2775UserId), case S2777RoomIdOptRes of {'error', S2778Reason} -> begin _ = begin S3356 = 'Tianjiupai.Logger':'warning'({"ack failed (user_id: ~s, snapshot_id: ~s, reason: ~p)", 3}, {S2775UserId, S2776SnapshotId, S2778Reason}), S3356(<<"Api.sest">>, 255) end, sesterl_internal_prim:'return'(ok) end; {'ok', 'error'} -> begin _ = begin S3357 = 'Tianjiupai.Logger':'warning'({"ack failed (user_id: ~s, snapshot_id: ~s)", 2}, {S2775UserId, S2776SnapshotId}), S3357(<<"Api.sest">>, 262) end, sesterl_internal_prim:'return'(ok) end; {'ok', {'ok', S2779RoomId}} -> begin ok = 'Tianjiupai.Room':'ack'(S2779RoomId, S2775UserId, S2776SnapshotId), begin _ = begin S3358 = 'Tianjiupai.Logger':'debug'({"ack (user_id: ~s, snapshot_id: ~s)", 2}, {S2775UserId, S2776SnapshotId}), S3358(<<"Api.sest">>, 267) end, sesterl_internal_prim:'return'(ok) end end end end.
'require_next_inning'(S2781UserId, S2782SnapshotId) -> begin S2783RoomIdOptRes = 'Tianjiupai.User':'get_room'(S2781UserId), case S2783RoomIdOptRes of {'error', S2784Reason} -> begin _ = begin S3360 = 'Tianjiupai.Logger':'warning'({"failed to require next inning (user_id: ~s, snapshot_id: ~s, reason: ~p)", 3}, {S2781UserId, S2782SnapshotId, S2784Reason}), S3360(<<"Api.sest">>, 276) end, sesterl_internal_prim:'return'(ok) end; {'ok', 'error'} -> begin _ = begin S3361 = 'Tianjiupai.Logger':'warning'({"failed to require next inning (user_id: ~s, snapshot_id: ~s)", 2}, {S2781UserId, S2782SnapshotId}), S3361(<<"Api.sest">>, 284) end, sesterl_internal_prim:'return'(ok) end; {'ok', {'ok', S2785RoomId}} -> 'Tianjiupai.Room':'require_next_inning'(S2785RoomId, S2781UserId, S2782SnapshotId) end end.
'perform_command'(S2787UserId, S2788Data) -> case 'SesterlJson.Decode':'run'('Tianjiupai.Models':'decode_command'(), S2788Data) of {'ok', S2789Command} -> case S2789Command of {'command_comment', S2790Text} -> begin S2791Res = 'Tianjiupai.Api':'send_chat'(S2787UserId, S2790Text), case S2791Res of {'ok', ok} -> sesterl_internal_prim:'return'(ok); 'error' -> begin _ = begin S3363 = 'Tianjiupai.Logger':'warning'({"failed to send a chat comment (user_id: ~s, text: ~s)", 2}, {S2787UserId, S2790Text}), S3363(<<"Api.sest">>, 306) end, sesterl_internal_prim:'return'(ok) end end end; {'command_ack', S2792SnapshotId} -> 'Tianjiupai.Api':'ack'(S2787UserId, S2792SnapshotId); 'command_heartbeat' -> sesterl_internal_prim:'return'(ok); {'command_next_inning', S2793SnapshotId} -> begin S2794Res = 'Tianjiupai.Api':'require_next_inning'(S2787UserId, S2793SnapshotId), begin _ = begin S3364 = 'Tianjiupai.Logger':'debug'({"next inning (user_id: ~s, snapshot_id: ~s, res: ~p)", 3}, {S2787UserId, S2793SnapshotId, S2794Res}), S3364(<<"Api.sest">>, 323) end, sesterl_internal_prim:'return'(ok) end end end; {'error', _} -> sesterl_internal_prim:'return'(ok) end.
'set_websocket_connection'(S2796UserId, S2797WsProc) -> begin S2798RoomOptRes = 'Tianjiupai.User':'get_room'(S2796UserId), case S2798RoomOptRes of {'error', S2799Reason} -> begin _ = begin S3366 = 'Tianjiupai.Logger':'warning'({"failed to set websocket connection (user_id: ~s, reason: ~p)", 2}, {S2796UserId, S2799Reason}), S3366(<<"Api.sest">>, 340) end, sesterl_internal_prim:'return'(ok) end; {'ok', {'ok', S2800RoomId}} -> begin _ = 'Tianjiupai.Room':'set_connection'(S2800RoomId, S2796UserId, S2797WsProc), sesterl_internal_prim:'return'(ok) end; {'ok', 'error'} -> begin _ = 'Tianjiupai.Api':'subscribe_plaza'(S2796UserId, S2797WsProc), sesterl_internal_prim:'return'(ok) end end end.
'encode_notification'(S2802Notification) -> begin S2803Enc = 'Tianjiupai.Models':'encode_notification'(), 'SesterlJson.Encode':'run'(S2803Enc(S2802Notification)) end.
'make_flag_user'(S2805UserIdOpt) -> begin S2806Enc = 'Tianjiupai.Models':'encode_flag_user_option'(), begin S2811Opt = case S2805UserIdOpt of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', S2807UserId} -> begin S2808Res = 'Tianjiupai.User':'get_info'(S2807UserId), case S2808Res of {'ok', S2809Info} -> sesterl_internal_prim:'return'({'ok', #{belongs_to => maps:get(belongs_to, S2809Info), id => S2807UserId, name => maps:get(user_name, S2809Info)}}); {'error', S2810Reason} -> begin _ = begin S3369 = 'Tianjiupai.Logger':'warning'({"failed to make flag_user (user_id: ~s, reason: ~p)", 2}, {S2807UserId, S2810Reason}), S3369(<<"Api.sest">>, 375) end, sesterl_internal_prim:'return'('error') end end end end, sesterl_internal_prim:'return'('SesterlJson.Encode':'run'(S2806Enc(S2811Opt))) end end.
