-module('Tianjiupai.Api').
-export(['create_user'/1, 'is_existent_user'/1, 'delete_user'/1, 'subscribe_plaza'/2, 'get_all_rooms'/0, 'get_personal_state'/3, 'submit'/3, 'create_room'/2, 'enter_room'/3, 'exit_room'/3, 'update_room'/3, 'send_chat'/2, 'ack'/2, 'require_next_inning'/2, 'perform_command'/2, 'set_websocket_connection'/2, 'encode_notification'/1, 'make_flag_user'/1]).
'create_user'(S2762ReqBody) -> case 'SesterlJson.Decode':'run'('Tianjiupai.Models':'decode_create_user_request'(), S2762ReqBody) of {'ok', S2763CreateUserRequest} -> begin S2764UserName = maps:get(user_name, S2763CreateUserRequest), begin S2765Res = 'Tianjiupai.User':'create'(S2764UserName), case S2765Res of {'ok', S2766UserId} -> begin _ = begin S3464 = 'Tianjiupai.Logger':'info'({"user created (user_name: ~s, user_id: ~s)", 2}, {S2764UserName, S2766UserId}), S3464(<<"Api.sest">>, 19) end, begin S2767Enc = 'Tianjiupai.Models':'encode_create_user_response'(), begin S2768RespBody = 'SesterlJson.Encode':'run'(S2767Enc(#{user_id => S2766UserId})), sesterl_internal_prim:'return'({'ok', {S2766UserId, S2768RespBody}}) end end end; {'error', _} -> sesterl_internal_prim:'return'('error') end end end; {'error', _} -> sesterl_internal_prim:'return'('error') end.
'is_existent_user'(S2770UserId) -> 'Tianjiupai.User':'exists'(S2770UserId).
'delete_user'(S2772UserId) -> begin S2773Deleted = 'Tianjiupai.User':'delete'(S2772UserId), case S2773Deleted of true -> begin _ = begin S3467 = 'Tianjiupai.Logger':'info'({"user deleted (user_id: ~s)", 1}, {S2772UserId}), S3467(<<"Api.sest">>, 40) end, sesterl_internal_prim:'return'(ok) end; false -> sesterl_internal_prim:'return'(ok) end end.
'subscribe_plaza'(S2775UserId, S2776WsProc) -> 'Tianjiupai.PlazaServer':'subscribe'(S2775UserId, S2776WsProc).
'get_all_rooms'() -> begin S2778RoomSummaries = 'Tianjiupai.Room':'get_all_rooms'(), begin S2779Enc = 'Tianjiupai.Models':'encode_get_all_rooms_response'(), sesterl_internal_prim:'return'('SesterlJson.Encode':'run'(S2779Enc(#{rooms => S2778RoomSummaries}))) end end.
'get_personal_state'(S2781RoomId, S2782UserId, S2783Validator) -> case S2783Validator(S2782UserId) of true -> begin S2784Res = 'Tianjiupai.Room':'get_personal_state'(S2781RoomId, S2782UserId), case S2784Res of {'ok', S2785PersonalState} -> begin S2786Enc = 'Tianjiupai.Models':'encode_personal_state'(), sesterl_internal_prim:'return'({'ok', 'SesterlJson.Encode':'run'(S2786Enc(S2785PersonalState))}) end; 'error' -> sesterl_internal_prim:'return'('error') end end; false -> sesterl_internal_prim:'return'('error') end.
'submit'(S2788RoomId, S2789UserId, S2790Cards) -> begin S2791Res = 'Tianjiupai.Room':'submit'(S2788RoomId, S2789UserId, S2790Cards), begin S2792IsSuccess = case S2791Res of {'ok', _} -> true; 'error' -> false end, begin _ = begin S3472 = 'Tianjiupai.Logger':'info'({"submit (room_id: ~s, user_id: ~s, cards: ~p, success: ~p)", 4}, {S2789UserId, S2788RoomId, S2790Cards, S2792IsSuccess}), S3472(<<"Api.sest">>, 75) end, case S2791Res of {'ok', {S2793Obs, S2794TrickLastOpt}} -> begin S2795Enc = 'Tianjiupai.Models':'encode_submit_cards_response'(), sesterl_internal_prim:'return'({'ok', 'SesterlJson.Encode':'run'(S2795Enc(#{new_state => S2793Obs, trick_last => S2794TrickLastOpt}))}) end; 'error' -> sesterl_internal_prim:'return'('error') end end end end.
'create_room'(S2797ReqBody, S2798Validator) -> case 'SesterlJson.Decode':'run'('Tianjiupai.Models':'decode_create_room_request'(), S2797ReqBody) of {'ok', S2799CreateRoomRequest} -> begin S2800UserId = maps:get(user_id, S2799CreateRoomRequest), begin S2801RoomName = maps:get(room_name, S2799CreateRoomRequest), case S2798Validator(S2800UserId) of true -> begin S2802Res = 'Tianjiupai.Room':'create'(S2800UserId, S2801RoomName), case S2802Res of {'ok', S2803RoomId} -> begin _ = begin S3474 = 'Tianjiupai.Logger':'info'({"room created (room_name: ~s, room_id: ~s, created_by: ~s)", 3}, {S2801RoomName, S2803RoomId, S2800UserId}), S3474(<<"Api.sest">>, 98) end, begin S2804Enc = 'Tianjiupai.Models':'encode_create_room_response'(), begin S2805RespBody = 'SesterlJson.Encode':'run'(S2804Enc(#{room_id => S2803RoomId})), sesterl_internal_prim:'return'({'ok', {S2803RoomId, S2805RespBody}}) end end end; {'error', S2806Reason} -> begin _ = begin S3475 = 'Tianjiupai.Logger':'info'({"failed to create room (room_name: ~s, created_by: ~s, reason: ~p)", 3}, {S2801RoomName, S2800UserId, S2806Reason}), S3475(<<"Api.sest">>, 108) end, sesterl_internal_prim:'return'('error') end end end; false -> sesterl_internal_prim:'return'('error') end end end; {'error', _} -> sesterl_internal_prim:'return'('error') end.
'enter_room'(S2808UserId, S2809RoomId, S2810WsProc) -> begin S2811Res = 'Tianjiupai.User':'set_room'(S2808UserId, {'ok', S2809RoomId}), case S2811Res of {'ok', ok} -> begin {'ok', S2812UserName} = 'Tianjiupai.User':'get_name'(S2808UserId), begin S2813User = #{user_id => S2808UserId, user_name => S2812UserName}, begin S2814Res = 'Tianjiupai.Room':'attend'(S2809RoomId, S2813User, S2810WsProc), begin ok = 'Tianjiupai.PlazaServer':'unsubscribe'(S2808UserId), begin S2815IsSuccess = case S2814Res of {'ok', _} -> true; 'error' -> false end, begin _ = begin S3477 = 'Tianjiupai.Logger':'info'({"attend (user_id: ~s, room_id: ~s, success: ~p)", 3}, {S2808UserId, S2809RoomId, S2815IsSuccess}), S3477(<<"Api.sest">>, 136) end, case S2814Res of {'ok', S2816PersonalState} -> begin S2817Enc = 'Tianjiupai.Models':'encode_enter_room_response'(), sesterl_internal_prim:'return'({'ok', 'SesterlJson.Encode':'run'(S2817Enc(S2816PersonalState))}) end; 'error' -> sesterl_internal_prim:'return'('error') end end end end end end end; {'error', S2818Reason} -> begin _ = begin S3478 = 'Tianjiupai.Logger':'info'({"failed to attend (user_id: ~s, room_id: ~s, reason: ~p)", 3}, {S2808UserId, S2809RoomId, S2818Reason}), S3478(<<"Api.sest">>, 151) end, sesterl_internal_prim:'return'('error') end end end.
'exit_room'(S2820UserId, S2821RoomId, S2822WsProc) -> begin S2823Res = 'Tianjiupai.User':'set_room'(S2820UserId, 'error'), case S2823Res of {'ok', ok} -> begin S2824Res = 'Tianjiupai.Room':'exit'(S2821RoomId, S2820UserId), begin ok = 'Tianjiupai.PlazaServer':'subscribe'(S2820UserId, S2822WsProc), begin S2825IsSuccess = case S2824Res of {'ok', _} -> true; 'error' -> false end, begin _ = begin S3480 = 'Tianjiupai.Logger':'info'({"exit (user_id: ~s, room_id: ~s, success: ~p)", 3}, {S2820UserId, S2821RoomId, S2825IsSuccess}), S3480(<<"Api.sest">>, 172) end, case S2824Res of {'ok', ok} -> begin S2826Enc = 'Tianjiupai.Models':'encode_exit_room_response'(), sesterl_internal_prim:'return'({'ok', 'SesterlJson.Encode':'run'(S2826Enc(ok))}) end; 'error' -> sesterl_internal_prim:'return'('error') end end end end end; {'error', S2827Reason} -> begin _ = begin S3481 = 'Tianjiupai.Logger':'info'({"failed to exit (user_id: ~s, room_id: ~s, reason: ~p)", 3}, {S2820UserId, S2821RoomId, S2827Reason}), S3481(<<"Api.sest">>, 186) end, sesterl_internal_prim:'return'('error') end end end.
'update_room'(S2829RoomId, S2830ReqBody, S2831Validator) -> case 'SesterlJson.Decode':'run'('Tianjiupai.Models':'decode_room_request'(), S2830ReqBody) of {'ok', S2832RoomRequest} -> case S2832RoomRequest of {'room_request_to_enter_room', S2833EnterRoomRequest} -> begin S2834UserId = maps:get(user_id, S2833EnterRoomRequest), case S2831Validator(S2834UserId) of true -> begin S2835Opt = 'Tianjiupai.WebSocketHandler':'where_is'(S2834UserId), case S2835Opt of {'ok', S2836WsProc} -> 'Tianjiupai.Api':'enter_room'(S2834UserId, S2829RoomId, S2836WsProc); 'error' -> sesterl_internal_prim:'return'('error') end end; false -> sesterl_internal_prim:'return'('error') end end; {'room_request_to_exit_room', S2837ExitRoomRequest} -> begin S2838UserId = maps:get(user_id, S2837ExitRoomRequest), case S2831Validator(S2838UserId) of true -> begin S2839Opt = 'Tianjiupai.WebSocketHandler':'where_is'(S2838UserId), case S2839Opt of {'ok', S2840WsProc} -> 'Tianjiupai.Api':'exit_room'(S2838UserId, S2829RoomId, S2840WsProc); 'error' -> sesterl_internal_prim:'return'('error') end end; false -> sesterl_internal_prim:'return'('error') end end; {'room_request_to_submit_cards', S2841SubmitCardsRequest} -> begin S2842UserId = maps:get(user_id, S2841SubmitCardsRequest), begin S2843Cards = maps:get(cards, S2841SubmitCardsRequest), case S2831Validator(S2842UserId) of true -> 'Tianjiupai.Api':'submit'(S2829RoomId, S2842UserId, S2843Cards); false -> sesterl_internal_prim:'return'('error') end end end end; {'error', _} -> sesterl_internal_prim:'return'('error') end.
'send_chat'(S2845UserId, S2846Text) -> begin S2847UserStateOpt = 'Tianjiupai.User':'get_info'(S2845UserId), case S2847UserStateOpt of {'error', S2848Reason} -> begin _ = begin S3484 = 'Tianjiupai.Logger':'info'({"failed to send chat (user_id: ~s, reason: ~p)", 2}, {S2845UserId, S2848Reason}), S3484(<<"Api.sest">>, 236) end, sesterl_internal_prim:'return'('error') end; {'ok', S2849UserState} -> case maps:get(belongs_to, S2849UserState) of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', S2850RoomId} -> begin S2851User = #{user_id => S2845UserId, user_name => maps:get(user_name, S2849UserState)}, 'Tianjiupai.Room':'send_chat'(S2850RoomId, S2851User, S2846Text) end end end end.
'ack'(S2853UserId, S2854SnapshotId) -> begin S2855RoomIdOptRes = 'Tianjiupai.User':'get_room'(S2853UserId), case S2855RoomIdOptRes of {'error', S2856Reason} -> begin _ = begin S3486 = 'Tianjiupai.Logger':'warning'({"ack failed (user_id: ~s, snapshot_id: ~s, reason: ~p)", 3}, {S2853UserId, S2854SnapshotId, S2856Reason}), S3486(<<"Api.sest">>, 255) end, sesterl_internal_prim:'return'(ok) end; {'ok', 'error'} -> begin _ = begin S3487 = 'Tianjiupai.Logger':'warning'({"ack failed (user_id: ~s, snapshot_id: ~s)", 2}, {S2853UserId, S2854SnapshotId}), S3487(<<"Api.sest">>, 262) end, sesterl_internal_prim:'return'(ok) end; {'ok', {'ok', S2857RoomId}} -> begin ok = 'Tianjiupai.Room':'ack'(S2857RoomId, S2853UserId, S2854SnapshotId), begin _ = begin S3488 = 'Tianjiupai.Logger':'debug'({"ack (user_id: ~s, snapshot_id: ~s)", 2}, {S2853UserId, S2854SnapshotId}), S3488(<<"Api.sest">>, 267) end, sesterl_internal_prim:'return'(ok) end end end end.
'require_next_inning'(S2859UserId, S2860SnapshotId) -> begin S2861RoomIdOptRes = 'Tianjiupai.User':'get_room'(S2859UserId), case S2861RoomIdOptRes of {'error', S2862Reason} -> begin _ = begin S3490 = 'Tianjiupai.Logger':'warning'({"failed to require next inning (user_id: ~s, snapshot_id: ~s, reason: ~p)", 3}, {S2859UserId, S2860SnapshotId, S2862Reason}), S3490(<<"Api.sest">>, 276) end, sesterl_internal_prim:'return'(ok) end; {'ok', 'error'} -> begin _ = begin S3491 = 'Tianjiupai.Logger':'warning'({"failed to require next inning (user_id: ~s, snapshot_id: ~s)", 2}, {S2859UserId, S2860SnapshotId}), S3491(<<"Api.sest">>, 284) end, sesterl_internal_prim:'return'(ok) end; {'ok', {'ok', S2863RoomId}} -> 'Tianjiupai.Room':'require_next_inning'(S2863RoomId, S2859UserId, S2860SnapshotId) end end.
'perform_command'(S2865UserId, S2866Data) -> case 'SesterlJson.Decode':'run'('Tianjiupai.Models':'decode_command'(), S2866Data) of {'ok', S2867Command} -> case S2867Command of {'command_comment', S2868Text} -> begin S2869Res = 'Tianjiupai.Api':'send_chat'(S2865UserId, S2868Text), case S2869Res of {'ok', ok} -> sesterl_internal_prim:'return'(ok); 'error' -> begin _ = begin S3493 = 'Tianjiupai.Logger':'warning'({"failed to send a chat comment (user_id: ~s, text: ~s)", 2}, {S2865UserId, S2868Text}), S3493(<<"Api.sest">>, 306) end, sesterl_internal_prim:'return'(ok) end end end; {'command_ack', S2870SnapshotId} -> 'Tianjiupai.Api':'ack'(S2865UserId, S2870SnapshotId); 'command_heartbeat' -> sesterl_internal_prim:'return'(ok); {'command_next_inning', S2871SnapshotId} -> begin S2872Res = 'Tianjiupai.Api':'require_next_inning'(S2865UserId, S2871SnapshotId), begin _ = begin S3494 = 'Tianjiupai.Logger':'debug'({"next inning (user_id: ~s, snapshot_id: ~s, res: ~p)", 3}, {S2865UserId, S2871SnapshotId, S2872Res}), S3494(<<"Api.sest">>, 323) end, sesterl_internal_prim:'return'(ok) end end end; {'error', _} -> sesterl_internal_prim:'return'(ok) end.
'set_websocket_connection'(S2874UserId, S2875WsProc) -> begin S2876RoomOptRes = 'Tianjiupai.User':'get_room'(S2874UserId), case S2876RoomOptRes of {'error', S2877Reason} -> begin _ = begin S3496 = 'Tianjiupai.Logger':'warning'({"failed to set websocket connection (user_id: ~s, reason: ~p)", 2}, {S2874UserId, S2877Reason}), S3496(<<"Api.sest">>, 340) end, sesterl_internal_prim:'return'(ok) end; {'ok', {'ok', S2878RoomId}} -> begin _ = 'Tianjiupai.Room':'set_connection'(S2878RoomId, S2874UserId, S2875WsProc), sesterl_internal_prim:'return'(ok) end; {'ok', 'error'} -> begin _ = 'Tianjiupai.Api':'subscribe_plaza'(S2874UserId, S2875WsProc), sesterl_internal_prim:'return'(ok) end end end.
'encode_notification'(S2880Notification) -> begin S2881Enc = 'Tianjiupai.Models':'encode_notification'(), 'SesterlJson.Encode':'run'(S2881Enc(S2880Notification)) end.
'make_flag_user'(S2883UserIdOpt) -> begin S2884Enc = 'Tianjiupai.Models':'encode_flag_user_option'(), begin S2889Opt = case S2883UserIdOpt of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', S2885UserId} -> begin S2886Res = 'Tianjiupai.User':'get_info'(S2885UserId), case S2886Res of {'ok', S2887Info} -> sesterl_internal_prim:'return'({'ok', #{belongs_to => maps:get(belongs_to, S2887Info), id => S2885UserId, name => maps:get(user_name, S2887Info)}}); {'error', S2888Reason} -> begin _ = begin S3499 = 'Tianjiupai.Logger':'warning'({"failed to make flag_user (user_id: ~s, reason: ~p)", 2}, {S2885UserId, S2888Reason}), S3499(<<"Api.sest">>, 375) end, sesterl_internal_prim:'return'('error') end end end end, sesterl_internal_prim:'return'('SesterlJson.Encode':'run'(S2884Enc(S2889Opt))) end end.
