-module('Tianjiupai.Api').
-export(['create_user'/1, 'is_existent_user'/1, 'delete_user'/1, 'subscribe_plaza'/2, 'get_all_rooms'/0, 'get_personal_state'/3, 'submit'/3, 'create_room'/2, 'enter_room'/3, 'exit_room'/3, 'update_room'/3, 'send_chat'/2, 'ack'/2, 'require_next_inning'/2, 'perform_command'/2, 'set_websocket_connection'/2, 'encode_notification'/1, 'make_flag_user'/1]).
'create_user'(S2758ReqBody) -> case 'SesterlJson.Decode':'run'('Tianjiupai.Models':'decode_create_user_request'(), S2758ReqBody) of {'ok', S2759CreateUserRequest} -> begin S2760UserName = maps:get(user_name, S2759CreateUserRequest), begin S2761Res = 'Tianjiupai.User':'create'(S2760UserName), case S2761Res of {'ok', S2762UserId} -> begin _ = begin S3457 = 'Tianjiupai.Logger':'info'({"user created (user_name: ~s, user_id: ~s)", 2}, {S2760UserName, S2762UserId}), S3457(<<"Api.sest">>, 19) end, begin S2763Enc = 'Tianjiupai.Models':'encode_create_user_response'(), begin S2764RespBody = 'SesterlJson.Encode':'run'(S2763Enc(#{user_id => S2762UserId})), sesterl_internal_prim:'return'({'ok', {S2762UserId, S2764RespBody}}) end end end; {'error', _} -> sesterl_internal_prim:'return'('error') end end end; {'error', _} -> sesterl_internal_prim:'return'('error') end.
'is_existent_user'(S2766UserId) -> 'Tianjiupai.User':'exists'(S2766UserId).
'delete_user'(S2768UserId) -> begin S2769Deleted = 'Tianjiupai.User':'delete'(S2768UserId), case S2769Deleted of true -> begin _ = begin S3460 = 'Tianjiupai.Logger':'info'({"user deleted (user_id: ~s)", 1}, {S2768UserId}), S3460(<<"Api.sest">>, 40) end, sesterl_internal_prim:'return'(ok) end; false -> sesterl_internal_prim:'return'(ok) end end.
'subscribe_plaza'(S2771UserId, S2772WsProc) -> 'Tianjiupai.PlazaServer':'subscribe'(S2771UserId, S2772WsProc).
'get_all_rooms'() -> begin S2774RoomSummaries = 'Tianjiupai.Room':'get_all_rooms'(), begin S2775Enc = 'Tianjiupai.Models':'encode_get_all_rooms_response'(), sesterl_internal_prim:'return'('SesterlJson.Encode':'run'(S2775Enc(#{rooms => S2774RoomSummaries}))) end end.
'get_personal_state'(S2777RoomId, S2778UserId, S2779Validator) -> case S2779Validator(S2778UserId) of true -> begin S2780Res = 'Tianjiupai.Room':'get_personal_state'(S2777RoomId, S2778UserId), case S2780Res of {'ok', S2781PersonalState} -> begin S2782Enc = 'Tianjiupai.Models':'encode_personal_state'(), sesterl_internal_prim:'return'({'ok', 'SesterlJson.Encode':'run'(S2782Enc(S2781PersonalState))}) end; 'error' -> sesterl_internal_prim:'return'('error') end end; false -> sesterl_internal_prim:'return'('error') end.
'submit'(S2784RoomId, S2785UserId, S2786Cards) -> begin S2787Res = 'Tianjiupai.Room':'submit'(S2784RoomId, S2785UserId, S2786Cards), begin S2788IsSuccess = case S2787Res of {'ok', _} -> true; 'error' -> false end, begin _ = begin S3465 = 'Tianjiupai.Logger':'info'({"submit (room_id: ~s, user_id: ~s, cards: ~p, success: ~p)", 4}, {S2785UserId, S2784RoomId, S2786Cards, S2788IsSuccess}), S3465(<<"Api.sest">>, 75) end, case S2787Res of {'ok', {S2789Obs, S2790TrickLastOpt}} -> begin S2791Enc = 'Tianjiupai.Models':'encode_submit_cards_response'(), sesterl_internal_prim:'return'({'ok', 'SesterlJson.Encode':'run'(S2791Enc(#{new_state => S2789Obs, trick_last => S2790TrickLastOpt}))}) end; 'error' -> sesterl_internal_prim:'return'('error') end end end end.
'create_room'(S2793ReqBody, S2794Validator) -> case 'SesterlJson.Decode':'run'('Tianjiupai.Models':'decode_create_room_request'(), S2793ReqBody) of {'ok', S2795CreateRoomRequest} -> begin S2796UserId = maps:get(user_id, S2795CreateRoomRequest), begin S2797RoomName = maps:get(room_name, S2795CreateRoomRequest), case S2794Validator(S2796UserId) of true -> begin S2798Res = 'Tianjiupai.Room':'create'(S2796UserId, S2797RoomName), case S2798Res of {'ok', S2799RoomId} -> begin _ = begin S3467 = 'Tianjiupai.Logger':'info'({"room created (room_name: ~s, room_id: ~s, created_by: ~s)", 3}, {S2797RoomName, S2799RoomId, S2796UserId}), S3467(<<"Api.sest">>, 98) end, begin S2800Enc = 'Tianjiupai.Models':'encode_create_room_response'(), begin S2801RespBody = 'SesterlJson.Encode':'run'(S2800Enc(#{room_id => S2799RoomId})), sesterl_internal_prim:'return'({'ok', {S2799RoomId, S2801RespBody}}) end end end; {'error', S2802Reason} -> begin _ = begin S3468 = 'Tianjiupai.Logger':'info'({"failed to create room (room_name: ~s, created_by: ~s, reason: ~p)", 3}, {S2797RoomName, S2796UserId, S2802Reason}), S3468(<<"Api.sest">>, 108) end, sesterl_internal_prim:'return'('error') end end end; false -> sesterl_internal_prim:'return'('error') end end end; {'error', _} -> sesterl_internal_prim:'return'('error') end.
'enter_room'(S2804UserId, S2805RoomId, S2806WsProc) -> begin S2807Res = 'Tianjiupai.User':'set_room'(S2804UserId, {'ok', S2805RoomId}), case S2807Res of {'ok', ok} -> begin {'ok', S2808UserName} = 'Tianjiupai.User':'get_name'(S2804UserId), begin S2809User = #{user_id => S2804UserId, user_name => S2808UserName}, begin S2810Res = 'Tianjiupai.Room':'attend'(S2805RoomId, S2809User, S2806WsProc), begin ok = 'Tianjiupai.PlazaServer':'unsubscribe'(S2804UserId), begin S2811IsSuccess = case S2810Res of {'ok', _} -> true; 'error' -> false end, begin _ = begin S3470 = 'Tianjiupai.Logger':'info'({"attend (user_id: ~s, room_id: ~s, success: ~p)", 3}, {S2804UserId, S2805RoomId, S2811IsSuccess}), S3470(<<"Api.sest">>, 136) end, case S2810Res of {'ok', S2812PersonalState} -> begin S2813Enc = 'Tianjiupai.Models':'encode_enter_room_response'(), sesterl_internal_prim:'return'({'ok', 'SesterlJson.Encode':'run'(S2813Enc(S2812PersonalState))}) end; 'error' -> sesterl_internal_prim:'return'('error') end end end end end end end; {'error', S2814Reason} -> begin _ = begin S3471 = 'Tianjiupai.Logger':'info'({"failed to attend (user_id: ~s, room_id: ~s, reason: ~p)", 3}, {S2804UserId, S2805RoomId, S2814Reason}), S3471(<<"Api.sest">>, 151) end, sesterl_internal_prim:'return'('error') end end end.
'exit_room'(S2816UserId, S2817RoomId, S2818WsProc) -> begin S2819Res = 'Tianjiupai.User':'set_room'(S2816UserId, 'error'), case S2819Res of {'ok', ok} -> begin S2820Res = 'Tianjiupai.Room':'exit'(S2817RoomId, S2816UserId), begin ok = 'Tianjiupai.PlazaServer':'subscribe'(S2816UserId, S2818WsProc), begin S2821IsSuccess = case S2820Res of {'ok', _} -> true; 'error' -> false end, begin _ = begin S3473 = 'Tianjiupai.Logger':'info'({"exit (user_id: ~s, room_id: ~s, success: ~p)", 3}, {S2816UserId, S2817RoomId, S2821IsSuccess}), S3473(<<"Api.sest">>, 172) end, case S2820Res of {'ok', ok} -> begin S2822Enc = 'Tianjiupai.Models':'encode_exit_room_response'(), sesterl_internal_prim:'return'({'ok', 'SesterlJson.Encode':'run'(S2822Enc(ok))}) end; 'error' -> sesterl_internal_prim:'return'('error') end end end end end; {'error', S2823Reason} -> begin _ = begin S3474 = 'Tianjiupai.Logger':'info'({"failed to exit (user_id: ~s, room_id: ~s, reason: ~p)", 3}, {S2816UserId, S2817RoomId, S2823Reason}), S3474(<<"Api.sest">>, 186) end, sesterl_internal_prim:'return'('error') end end end.
'update_room'(S2825RoomId, S2826ReqBody, S2827Validator) -> case 'SesterlJson.Decode':'run'('Tianjiupai.Models':'decode_room_request'(), S2826ReqBody) of {'ok', S2828RoomRequest} -> case S2828RoomRequest of {'room_request_to_enter_room', S2829EnterRoomRequest} -> begin S2830UserId = maps:get(user_id, S2829EnterRoomRequest), case S2827Validator(S2830UserId) of true -> begin S2831Opt = 'Tianjiupai.WebSocketHandler':'where_is'(S2830UserId), case S2831Opt of {'ok', S2832WsProc} -> 'Tianjiupai.Api':'enter_room'(S2830UserId, S2825RoomId, S2832WsProc); 'error' -> sesterl_internal_prim:'return'('error') end end; false -> sesterl_internal_prim:'return'('error') end end; {'room_request_to_exit_room', S2833ExitRoomRequest} -> begin S2834UserId = maps:get(user_id, S2833ExitRoomRequest), case S2827Validator(S2834UserId) of true -> begin S2835Opt = 'Tianjiupai.WebSocketHandler':'where_is'(S2834UserId), case S2835Opt of {'ok', S2836WsProc} -> 'Tianjiupai.Api':'exit_room'(S2834UserId, S2825RoomId, S2836WsProc); 'error' -> sesterl_internal_prim:'return'('error') end end; false -> sesterl_internal_prim:'return'('error') end end; {'room_request_to_submit_cards', S2837SubmitCardsRequest} -> begin S2838UserId = maps:get(user_id, S2837SubmitCardsRequest), begin S2839Cards = maps:get(cards, S2837SubmitCardsRequest), case S2827Validator(S2838UserId) of true -> 'Tianjiupai.Api':'submit'(S2825RoomId, S2838UserId, S2839Cards); false -> sesterl_internal_prim:'return'('error') end end end end; {'error', _} -> sesterl_internal_prim:'return'('error') end.
'send_chat'(S2841UserId, S2842Text) -> begin S2843UserStateOpt = 'Tianjiupai.User':'get_info'(S2841UserId), case S2843UserStateOpt of {'error', S2844Reason} -> begin _ = begin S3477 = 'Tianjiupai.Logger':'info'({"failed to send chat (user_id: ~s, reason: ~p)", 2}, {S2841UserId, S2844Reason}), S3477(<<"Api.sest">>, 236) end, sesterl_internal_prim:'return'('error') end; {'ok', S2845UserState} -> case maps:get(belongs_to, S2845UserState) of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', S2846RoomId} -> begin S2847User = #{user_id => S2841UserId, user_name => maps:get(user_name, S2845UserState)}, 'Tianjiupai.Room':'send_chat'(S2846RoomId, S2847User, S2842Text) end end end end.
'ack'(S2849UserId, S2850SnapshotId) -> begin S2851RoomIdOptRes = 'Tianjiupai.User':'get_room'(S2849UserId), case S2851RoomIdOptRes of {'error', S2852Reason} -> begin _ = begin S3479 = 'Tianjiupai.Logger':'warning'({"ack failed (user_id: ~s, snapshot_id: ~s, reason: ~p)", 3}, {S2849UserId, S2850SnapshotId, S2852Reason}), S3479(<<"Api.sest">>, 255) end, sesterl_internal_prim:'return'(ok) end; {'ok', 'error'} -> begin _ = begin S3480 = 'Tianjiupai.Logger':'warning'({"ack failed (user_id: ~s, snapshot_id: ~s)", 2}, {S2849UserId, S2850SnapshotId}), S3480(<<"Api.sest">>, 262) end, sesterl_internal_prim:'return'(ok) end; {'ok', {'ok', S2853RoomId}} -> begin ok = 'Tianjiupai.Room':'ack'(S2853RoomId, S2849UserId, S2850SnapshotId), begin _ = begin S3481 = 'Tianjiupai.Logger':'debug'({"ack (user_id: ~s, snapshot_id: ~s)", 2}, {S2849UserId, S2850SnapshotId}), S3481(<<"Api.sest">>, 267) end, sesterl_internal_prim:'return'(ok) end end end end.
'require_next_inning'(S2855UserId, S2856SnapshotId) -> begin S2857RoomIdOptRes = 'Tianjiupai.User':'get_room'(S2855UserId), case S2857RoomIdOptRes of {'error', S2858Reason} -> begin _ = begin S3483 = 'Tianjiupai.Logger':'warning'({"failed to require next inning (user_id: ~s, snapshot_id: ~s, reason: ~p)", 3}, {S2855UserId, S2856SnapshotId, S2858Reason}), S3483(<<"Api.sest">>, 276) end, sesterl_internal_prim:'return'(ok) end; {'ok', 'error'} -> begin _ = begin S3484 = 'Tianjiupai.Logger':'warning'({"failed to require next inning (user_id: ~s, snapshot_id: ~s)", 2}, {S2855UserId, S2856SnapshotId}), S3484(<<"Api.sest">>, 284) end, sesterl_internal_prim:'return'(ok) end; {'ok', {'ok', S2859RoomId}} -> 'Tianjiupai.Room':'require_next_inning'(S2859RoomId, S2855UserId, S2856SnapshotId) end end.
'perform_command'(S2861UserId, S2862Data) -> case 'SesterlJson.Decode':'run'('Tianjiupai.Models':'decode_command'(), S2862Data) of {'ok', S2863Command} -> case S2863Command of {'command_comment', S2864Text} -> begin S2865Res = 'Tianjiupai.Api':'send_chat'(S2861UserId, S2864Text), case S2865Res of {'ok', ok} -> sesterl_internal_prim:'return'(ok); 'error' -> begin _ = begin S3486 = 'Tianjiupai.Logger':'warning'({"failed to send a chat comment (user_id: ~s, text: ~s)", 2}, {S2861UserId, S2864Text}), S3486(<<"Api.sest">>, 306) end, sesterl_internal_prim:'return'(ok) end end end; {'command_ack', S2866SnapshotId} -> 'Tianjiupai.Api':'ack'(S2861UserId, S2866SnapshotId); 'command_heartbeat' -> sesterl_internal_prim:'return'(ok); {'command_next_inning', S2867SnapshotId} -> begin S2868Res = 'Tianjiupai.Api':'require_next_inning'(S2861UserId, S2867SnapshotId), begin _ = begin S3487 = 'Tianjiupai.Logger':'debug'({"next inning (user_id: ~s, snapshot_id: ~s, res: ~p)", 3}, {S2861UserId, S2867SnapshotId, S2868Res}), S3487(<<"Api.sest">>, 323) end, sesterl_internal_prim:'return'(ok) end end end; {'error', _} -> sesterl_internal_prim:'return'(ok) end.
'set_websocket_connection'(S2870UserId, S2871WsProc) -> begin S2872RoomOptRes = 'Tianjiupai.User':'get_room'(S2870UserId), case S2872RoomOptRes of {'error', S2873Reason} -> begin _ = begin S3489 = 'Tianjiupai.Logger':'warning'({"failed to set websocket connection (user_id: ~s, reason: ~p)", 2}, {S2870UserId, S2873Reason}), S3489(<<"Api.sest">>, 340) end, sesterl_internal_prim:'return'(ok) end; {'ok', {'ok', S2874RoomId}} -> begin _ = 'Tianjiupai.Room':'set_connection'(S2874RoomId, S2870UserId, S2871WsProc), sesterl_internal_prim:'return'(ok) end; {'ok', 'error'} -> begin _ = 'Tianjiupai.Api':'subscribe_plaza'(S2870UserId, S2871WsProc), sesterl_internal_prim:'return'(ok) end end end.
'encode_notification'(S2876Notification) -> begin S2877Enc = 'Tianjiupai.Models':'encode_notification'(), 'SesterlJson.Encode':'run'(S2877Enc(S2876Notification)) end.
'make_flag_user'(S2879UserIdOpt) -> begin S2880Enc = 'Tianjiupai.Models':'encode_flag_user_option'(), begin S2885Opt = case S2879UserIdOpt of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', S2881UserId} -> begin S2882Res = 'Tianjiupai.User':'get_info'(S2881UserId), case S2882Res of {'ok', S2883Info} -> sesterl_internal_prim:'return'({'ok', #{belongs_to => maps:get(belongs_to, S2883Info), id => S2881UserId, name => maps:get(user_name, S2883Info)}}); {'error', S2884Reason} -> begin _ = begin S3492 = 'Tianjiupai.Logger':'warning'({"failed to make flag_user (user_id: ~s, reason: ~p)", 2}, {S2881UserId, S2884Reason}), S3492(<<"Api.sest">>, 375) end, sesterl_internal_prim:'return'('error') end end end end, sesterl_internal_prim:'return'('SesterlJson.Encode':'run'(S2880Enc(S2885Opt))) end end.
