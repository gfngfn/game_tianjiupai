-module('Tianjiupai.Api').
-export(['create_user'/1, 'is_existent_user'/1, 'delete_user'/1, 'get_all_rooms'/0, 'get_personal_state'/3, 'submit'/3, 'create_room'/2, 'enter_room'/2, 'exit_room'/2, 'update_room'/3, 'perform_command'/2, 'set_websocket_connection'/2, 'encode_notification'/1, 'make_flag_user'/1]).
'create_user'(S2280ReqBody) -> case 'SesterlJson.Decode':'run'('Tianjiupai.Models':'decode_create_user_request'(), S2280ReqBody) of {'ok', S2281CreateUserRequest} -> begin S2282UserName = maps:get(user_name, S2281CreateUserRequest), begin S2283Res = 'Tianjiupai.User':'create'(S2282UserName), case S2283Res of {'ok', S2284UserId} -> begin _ = begin S2750 = 'Tianjiupai.Logger':'info'({"user created (user_name: ~p, user_id: ~p)", 2}, {S2282UserName, S2284UserId}), S2750(<<"Api.sest">>, 17) end, begin S2285Enc = 'Tianjiupai.Models':'encode_create_user_response'(), begin S2286RespBody = 'SesterlJson.Encode':'run'(S2285Enc(#{user_id => S2284UserId})), sesterl_internal_prim:'return'({'ok', {S2284UserId, S2286RespBody}}) end end end; {'error', _} -> sesterl_internal_prim:'return'('error') end end end; {'error', _} -> sesterl_internal_prim:'return'('error') end.
'is_existent_user'(S2288UserId) -> 'Tianjiupai.User':'exists'(S2288UserId).
'delete_user'(S2290UserId) -> 'Tianjiupai.User':'delete'(S2290UserId).
'get_all_rooms'() -> begin S2292RoomSummaries = 'Tianjiupai.Room':'get_all_rooms'(), begin S2293Enc = 'Tianjiupai.Models':'encode_get_all_rooms_response'(), sesterl_internal_prim:'return'('SesterlJson.Encode':'run'(S2293Enc(#{rooms => S2292RoomSummaries}))) end end.
'get_personal_state'(S2295RoomId, S2296UserId, S2297Validator) -> case S2297Validator(S2296UserId) of true -> begin S2298Res = 'Tianjiupai.Room':'get_personal_state'(S2295RoomId, S2296UserId), case S2298Res of {'ok', S2299PersonalState} -> begin S2300Enc = 'Tianjiupai.Models':'encode_personal_state'(), sesterl_internal_prim:'return'({'ok', 'SesterlJson.Encode':'run'(S2300Enc(S2299PersonalState))}) end; 'error' -> sesterl_internal_prim:'return'('error') end end; false -> sesterl_internal_prim:'return'('error') end.
'submit'(S2302RoomId, S2303UserId, S2304Cards) -> begin S2305Res = 'Tianjiupai.Room':'submit'(S2302RoomId, S2303UserId, S2304Cards), begin S2306IsSuccess = case S2305Res of {'ok', _} -> true; 'error' -> false end, begin _ = begin S2756 = 'Tianjiupai.Logger':'info'({"submit (room_id: ~p, user_id: ~p, cards: ~p, success: ~p)", 4}, {S2303UserId, S2302RoomId, S2304Cards, S2306IsSuccess}), S2756(<<"Api.sest">>, 65) end, case S2305Res of {'ok', {S2307Obs, S2308TrickLastOpt}} -> begin S2309Enc = 'Tianjiupai.Models':'encode_submit_cards_response'(), sesterl_internal_prim:'return'({'ok', 'SesterlJson.Encode':'run'(S2309Enc(#{new_state => S2307Obs, trick_last => S2308TrickLastOpt}))}) end; 'error' -> sesterl_internal_prim:'return'('error') end end end end.
'create_room'(S2311ReqBody, S2312Validator) -> case 'SesterlJson.Decode':'run'('Tianjiupai.Models':'decode_create_room_request'(), S2311ReqBody) of {'ok', S2313CreateRoomRequest} -> begin S2314UserId = maps:get(user_id, S2313CreateRoomRequest), begin S2315RoomName = maps:get(room_name, S2313CreateRoomRequest), case S2312Validator(S2314UserId) of true -> begin S2316Res = 'Tianjiupai.Room':'create'(S2315RoomName), case S2316Res of {'ok', S2317RoomId} -> begin _ = begin S2758 = 'Tianjiupai.Logger':'info'({"room created (room_name: ~p, room_id: ~p, created_by: ~p)", 3}, {S2315RoomName, S2317RoomId, S2314UserId}), S2758(<<"Api.sest">>, 88) end, begin S2318Enc = 'Tianjiupai.Models':'encode_create_room_response'(), begin S2319RespBody = 'SesterlJson.Encode':'run'(S2318Enc(#{room_id => S2317RoomId})), sesterl_internal_prim:'return'({'ok', {S2317RoomId, S2319RespBody}}) end end end; {'error', _} -> sesterl_internal_prim:'return'('error') end end; false -> sesterl_internal_prim:'return'('error') end end end; {'error', _} -> sesterl_internal_prim:'return'('error') end.
'enter_room'(S2321UserId, S2322RoomId) -> begin S2323Res = 'Tianjiupai.User':'set_room'(S2321UserId, {'ok', S2322RoomId}), case S2323Res of {'ok', ok} -> begin S2324Res = 'Tianjiupai.User':'get_name'(S2321UserId), begin {'ok', S2325UserName} = S2324Res, begin S2326User = #{user_id => S2321UserId, user_name => S2325UserName}, begin S2327Res = 'Tianjiupai.Room':'attend'(S2322RoomId, S2326User), begin S2328IsSuccess = case S2327Res of {'ok', _} -> true; 'error' -> false end, begin _ = begin S2760 = 'Tianjiupai.Logger':'info'({"attend (user_id: ~p, room_id: ~p, success: ~p)", 3}, {S2321UserId, S2322RoomId, S2328IsSuccess}), S2760(<<"Api.sest">>, 120) end, case S2327Res of {'ok', S2329PersonalState} -> begin S2330Enc = 'Tianjiupai.Models':'encode_enter_room_response'(), sesterl_internal_prim:'return'({'ok', 'SesterlJson.Encode':'run'(S2330Enc(S2329PersonalState))}) end; 'error' -> sesterl_internal_prim:'return'('error') end end end end end end end; 'error' -> sesterl_internal_prim:'return'('error') end end.
'exit_room'(S2332UserId, S2333RoomId) -> begin S2334Res = 'Tianjiupai.User':'set_room'(S2332UserId, 'error'), case S2334Res of {'ok', ok} -> begin S2335Res = 'Tianjiupai.Room':'exit'(S2333RoomId, S2332UserId), begin S2336IsSuccess = case S2335Res of {'ok', _} -> true; 'error' -> false end, begin _ = begin S2762 = 'Tianjiupai.Logger':'info'({"exit (user_id: ~p, room_id: ~p, success: ~p)", 3}, {S2332UserId, S2333RoomId, S2336IsSuccess}), S2762(<<"Api.sest">>, 148) end, case S2335Res of {'ok', ok} -> begin S2337Enc = 'Tianjiupai.Models':'encode_exit_room_response'(), sesterl_internal_prim:'return'({'ok', 'SesterlJson.Encode':'run'(S2337Enc(ok))}) end; 'error' -> sesterl_internal_prim:'return'('error') end end end end; 'error' -> sesterl_internal_prim:'return'('error') end end.
'update_room'(S2339RoomId, S2340ReqBody, S2341Validator) -> case 'SesterlJson.Decode':'run'('Tianjiupai.Models':'decode_room_request'(), S2340ReqBody) of {'ok', S2342RoomRequest} -> case S2342RoomRequest of {'room_request_to_enter_room', S2343EnterRoomRequest} -> begin S2344UserId = maps:get(user_id, S2343EnterRoomRequest), case S2341Validator(S2344UserId) of true -> 'Tianjiupai.Api':'enter_room'(S2344UserId, S2339RoomId); false -> sesterl_internal_prim:'return'('error') end end; {'room_request_to_exit_room', S2345ExitRoomRequest} -> begin S2346UserId = maps:get(user_id, S2345ExitRoomRequest), case S2341Validator(S2346UserId) of true -> 'Tianjiupai.Api':'exit_room'(S2346UserId, S2339RoomId); false -> sesterl_internal_prim:'return'('error') end end; {'room_request_to_submit_cards', S2347SubmitCardsRequest} -> begin S2348UserId = maps:get(user_id, S2347SubmitCardsRequest), begin S2349Cards = maps:get(cards, S2347SubmitCardsRequest), case S2341Validator(S2348UserId) of true -> 'Tianjiupai.Api':'submit'(S2339RoomId, S2348UserId, S2349Cards); false -> sesterl_internal_prim:'return'('error') end end end end; {'error', _} -> sesterl_internal_prim:'return'('error') end.
'perform_command'(S2351UserId, S2352Data) -> case 'SesterlJson.Decode':'run'('Tianjiupai.Models':'decode_command'(), S2352Data) of {'ok', S2353Command} -> case S2353Command of {'command_comment', S2354Text} -> begin S2355Res = 'Tianjiupai.User':'send_chat'(S2351UserId, S2354Text), begin _ = case S2355Res of {'ok', ok} -> ok; 'error' -> begin S2765 = 'Tianjiupai.Logger':'warning'({"failed to send a chat comment (user_id: ~p, text: ~p)", 2}, {S2351UserId, S2354Text}), S2765(<<"Api.sest">>, 203) end end, sesterl_internal_prim:'return'(ok) end end; {'command_ack', S2356SnapshotId} -> begin S2357Res = 'Tianjiupai.User':'ack'(S2351UserId, S2356SnapshotId), begin _ = begin S2766 = 'Tianjiupai.Logger':'info'({"ack (user_id: ~p, snapshot_id: ~p)", 2}, {S2351UserId, S2356SnapshotId}), S2766(<<"Api.sest">>, 213) end, sesterl_internal_prim:'return'(ok) end end; 'command_heartbeat' -> sesterl_internal_prim:'return'(ok); {'command_next_inning', S2358SnapshotId} -> begin S2359Res = 'Tianjiupai.User':'require_next_inning'(S2351UserId, S2358SnapshotId), begin _ = begin S2767 = 'Tianjiupai.Logger':'info'({"next inning (user_id: ~p, snapshot_id: ~p)", 2}, {S2351UserId, S2358SnapshotId}), S2767(<<"Api.sest">>, 224) end, sesterl_internal_prim:'return'(ok) end end end; {'error', _} -> sesterl_internal_prim:'return'(ok) end.
'set_websocket_connection'(S2361UserId, S2362WsPid) -> 'Tianjiupai.User':'set_websocket_connection'(S2361UserId, S2362WsPid).
'encode_notification'(S2364Notification) -> begin S2365Enc = 'Tianjiupai.Models':'encode_notification'(), 'SesterlJson.Encode':'run'(S2365Enc(S2364Notification)) end.
'make_flag_user'(S2367UserIdOpt) -> begin S2368Enc = 'Tianjiupai.Models':'encode_flag_user_option'(), begin S2372Opt = case S2367UserIdOpt of 'error' -> sesterl_internal_prim:'return'('error'); {'ok', S2369UserId} -> begin S2370Res = 'Tianjiupai.User':'get_info'(S2369UserId), case S2370Res of {'ok', S2371Info} -> sesterl_internal_prim:'return'({'ok', #{belongs_to => maps:get(belongs_to, S2371Info), id => S2369UserId, name => maps:get(user_name, S2371Info)}}); 'error' -> sesterl_internal_prim:'return'('error') end end end, sesterl_internal_prim:'return'('SesterlJson.Encode':'run'(S2368Enc(S2372Opt))) end end.
