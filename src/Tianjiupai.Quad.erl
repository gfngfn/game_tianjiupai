-module('Tianjiupai.Quad').
-export(['seat_equal'/2, 'the_other_seats'/1, 'advance_seat'/2, 'decompose'/1, 'make'/1, 'to_list'/1, 'access'/2, 'update'/3, 'map'/2, 'map_fold_effect'/3, 'find'/2]).
    seat_equal(S1, S2) ->
        S1 =:= S2.
  
'the_other_seats'(S992Seat) -> case S992Seat of 'seat_a' -> ['seat_b' | ['seat_c' | ['seat_d' | []]]]; 'seat_b' -> ['seat_c' | ['seat_d' | ['seat_a' | []]]]; 'seat_c' -> ['seat_d' | ['seat_a' | ['seat_b' | []]]]; 'seat_d' -> ['seat_a' | ['seat_b' | ['seat_c' | []]]] end.
'advance_seat'(S995S, S996N) -> case (S996N < 0) of true -> 'Tianjiupai.Quad':'advance_seat'(S995S, (S996N + 4)); false -> case (S996N == 0) of true -> S995S; false -> begin S997S = case S995S of 'seat_a' -> 'seat_b'; 'seat_b' -> 'seat_c'; 'seat_c' -> 'seat_d'; 'seat_d' -> 'seat_a' end, 'Tianjiupai.Quad':'advance_seat'(S997S, (S996N - 1)) end end end.
'decompose'(S998Quad) -> {maps:get(east, S998Quad), maps:get(south, S998Quad), maps:get(west, S998Quad), maps:get(north, S998Quad)}.
'make'(S1000X) -> begin {S1001X0, S1002X1, S1003X2, S1004X3} = S1000X, #{east => S1001X0, north => S1004X3, south => S1002X1, west => S1003X2} end.
'to_list'(S1006Quad) -> begin {S1007X0, S1008X1, S1009X2, S1010X3} = 'Tianjiupai.Quad':'decompose'(S1006Quad), [S1007X0 | [S1008X1 | [S1009X2 | [S1010X3 | []]]]] end.
'access'(S1012Seat, S1013Quad) -> begin {S1014X0, S1015X1, S1016X2, S1017X3} = 'Tianjiupai.Quad':'decompose'(S1013Quad), case S1012Seat of 'seat_a' -> S1014X0; 'seat_b' -> S1015X1; 'seat_c' -> S1016X2; 'seat_d' -> S1017X3 end end.
'update'(S1019Seat, S1020XNew, S1021Quad) -> begin {S1022X0, S1023X1, S1024X2, S1025X3} = 'Tianjiupai.Quad':'decompose'(S1021Quad), begin S1026X = case S1019Seat of 'seat_a' -> {S1020XNew, S1023X1, S1024X2, S1025X3}; 'seat_b' -> {S1022X0, S1020XNew, S1024X2, S1025X3}; 'seat_c' -> {S1022X0, S1023X1, S1020XNew, S1025X3}; 'seat_d' -> {S1022X0, S1023X1, S1024X2, S1020XNew} end, 'Tianjiupai.Quad':'make'(S1026X) end end.
'map'(S1028F, S1029Quad) -> begin {S1030X0, S1031X1, S1032X2, S1033X3} = 'Tianjiupai.Quad':'decompose'(S1029Quad), 'Tianjiupai.Quad':'make'({S1028F(S1030X0), S1028F(S1031X1), S1028F(S1032X2), S1028F(S1033X3)}) end.
'map_fold_effect'(S1035F, S1036Acc, S1037Quad) -> begin {S1038X0, S1039X1, S1040X2, S1041X3} = 'Tianjiupai.Quad':'decompose'(S1037Quad), begin {S1042Acc, S1043Y0} = S1035F(S1036Acc, S1038X0), begin {S1044Acc, S1045Y1} = S1035F(S1042Acc, S1039X1), begin {S1046Acc, S1047Y2} = S1035F(S1044Acc, S1040X2), begin {S1048Acc, S1049Y3} = S1035F(S1046Acc, S1041X3), begin S1050Quad = 'Tianjiupai.Quad':'make'({S1043Y0, S1045Y1, S1047Y2, S1049Y3}), sesterl_internal_prim:'return'({S1048Acc, S1050Quad}) end end end end end end.
'find'(S1052F, S1053Quad) -> begin {S1054X0, S1055X1, S1056X2, S1057X3} = 'Tianjiupai.Quad':'decompose'(S1053Quad), case {S1052F(S1054X0), S1052F(S1055X1), S1052F(S1056X2), S1052F(S1057X3)} of {true, _, _, _} -> {'ok', {'seat_a', S1054X0}}; {_, true, _, _} -> {'ok', {'seat_b', S1055X1}}; {_, _, true, _} -> {'ok', {'seat_c', S1056X2}}; {_, _, _, true} -> {'ok', {'seat_d', S1057X3}}; _ -> 'error' end end.
