-module('Tianjiupai.Quad').
-export(['seat_equal'/2, 'the_other_seats'/1, 'advance_seat'/2, 'decompose'/1, 'make'/1, 'to_list'/1, 'access'/2, 'update'/3, 'map'/2, 'map_fold_effect'/3, 'find'/2]).
    seat_equal(S1, S2) ->
        S1 =:= S2.
  
'the_other_seats'(S1009Seat) -> case S1009Seat of 'seat_a' -> ['seat_b' | ['seat_c' | ['seat_d' | []]]]; 'seat_b' -> ['seat_c' | ['seat_d' | ['seat_a' | []]]]; 'seat_c' -> ['seat_d' | ['seat_a' | ['seat_b' | []]]]; 'seat_d' -> ['seat_a' | ['seat_b' | ['seat_c' | []]]] end.
'advance_seat'(S1012S, S1013N) -> case (S1013N < 0) of true -> 'Tianjiupai.Quad':'advance_seat'(S1012S, (S1013N + 4)); false -> case (S1013N == 0) of true -> S1012S; false -> begin S1014S = case S1012S of 'seat_a' -> 'seat_b'; 'seat_b' -> 'seat_c'; 'seat_c' -> 'seat_d'; 'seat_d' -> 'seat_a' end, 'Tianjiupai.Quad':'advance_seat'(S1014S, (S1013N - 1)) end end end.
'decompose'(S1015Quad) -> {maps:get(east, S1015Quad), maps:get(south, S1015Quad), maps:get(west, S1015Quad), maps:get(north, S1015Quad)}.
'make'(S1017X) -> begin {S1018X0, S1019X1, S1020X2, S1021X3} = S1017X, #{east => S1018X0, north => S1021X3, south => S1019X1, west => S1020X2} end.
'to_list'(S1023Quad) -> begin {S1024X0, S1025X1, S1026X2, S1027X3} = 'Tianjiupai.Quad':'decompose'(S1023Quad), [S1024X0 | [S1025X1 | [S1026X2 | [S1027X3 | []]]]] end.
'access'(S1029Seat, S1030Quad) -> begin {S1031X0, S1032X1, S1033X2, S1034X3} = 'Tianjiupai.Quad':'decompose'(S1030Quad), case S1029Seat of 'seat_a' -> S1031X0; 'seat_b' -> S1032X1; 'seat_c' -> S1033X2; 'seat_d' -> S1034X3 end end.
'update'(S1036Seat, S1037XNew, S1038Quad) -> begin {S1039X0, S1040X1, S1041X2, S1042X3} = 'Tianjiupai.Quad':'decompose'(S1038Quad), begin S1043X = case S1036Seat of 'seat_a' -> {S1037XNew, S1040X1, S1041X2, S1042X3}; 'seat_b' -> {S1039X0, S1037XNew, S1041X2, S1042X3}; 'seat_c' -> {S1039X0, S1040X1, S1037XNew, S1042X3}; 'seat_d' -> {S1039X0, S1040X1, S1041X2, S1037XNew} end, 'Tianjiupai.Quad':'make'(S1043X) end end.
'map'(S1045F, S1046Quad) -> begin {S1047X0, S1048X1, S1049X2, S1050X3} = 'Tianjiupai.Quad':'decompose'(S1046Quad), 'Tianjiupai.Quad':'make'({S1045F(S1047X0), S1045F(S1048X1), S1045F(S1049X2), S1045F(S1050X3)}) end.
'map_fold_effect'(S1052F, S1053Acc, S1054Quad) -> begin {S1055X0, S1056X1, S1057X2, S1058X3} = 'Tianjiupai.Quad':'decompose'(S1054Quad), begin {S1059Acc, S1060Y0} = S1052F(S1053Acc, S1055X0), begin {S1061Acc, S1062Y1} = S1052F(S1059Acc, S1056X1), begin {S1063Acc, S1064Y2} = S1052F(S1061Acc, S1057X2), begin {S1065Acc, S1066Y3} = S1052F(S1063Acc, S1058X3), begin S1067Quad = 'Tianjiupai.Quad':'make'({S1060Y0, S1062Y1, S1064Y2, S1066Y3}), sesterl_internal_prim:'return'({S1065Acc, S1067Quad}) end end end end end end.
'find'(S1069F, S1070Quad) -> begin {S1071X0, S1072X1, S1073X2, S1074X3} = 'Tianjiupai.Quad':'decompose'(S1070Quad), case {S1069F(S1071X0), S1069F(S1072X1), S1069F(S1073X2), S1069F(S1074X3)} of {true, _, _, _} -> {'ok', {'seat_a', S1071X0}}; {_, true, _, _} -> {'ok', {'seat_b', S1072X1}}; {_, _, true, _} -> {'ok', {'seat_c', S1073X2}}; {_, _, _, true} -> {'ok', {'seat_d', S1074X3}}; _ -> 'error' end end.
