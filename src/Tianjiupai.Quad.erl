-module('Tianjiupai.Quad').
-export(['seat_equal'/2, 'the_other_seats'/1, 'advance_seat'/2, 'decompose'/1, 'make'/1, 'to_list'/1, 'access'/2, 'update'/3, 'map'/2, 'map_fold_effect'/3, 'find'/2]).
    seat_equal(S1, S2) ->
        S1 =:= S2.
  
'the_other_seats'(S995Seat) -> case S995Seat of 'seat_a' -> ['seat_b' | ['seat_c' | ['seat_d' | []]]]; 'seat_b' -> ['seat_c' | ['seat_d' | ['seat_a' | []]]]; 'seat_c' -> ['seat_d' | ['seat_a' | ['seat_b' | []]]]; 'seat_d' -> ['seat_a' | ['seat_b' | ['seat_c' | []]]] end.
'advance_seat'(S998S, S999N) -> case (S999N < 0) of true -> 'Tianjiupai.Quad':'advance_seat'(S998S, (S999N + 4)); false -> case (S999N == 0) of true -> S998S; false -> begin S1000S = case S998S of 'seat_a' -> 'seat_b'; 'seat_b' -> 'seat_c'; 'seat_c' -> 'seat_d'; 'seat_d' -> 'seat_a' end, 'Tianjiupai.Quad':'advance_seat'(S1000S, (S999N - 1)) end end end.
'decompose'(S1001Quad) -> {maps:get(east, S1001Quad), maps:get(south, S1001Quad), maps:get(west, S1001Quad), maps:get(north, S1001Quad)}.
'make'(S1003X) -> begin {S1004X0, S1005X1, S1006X2, S1007X3} = S1003X, #{east => S1004X0, north => S1007X3, south => S1005X1, west => S1006X2} end.
'to_list'(S1009Quad) -> begin {S1010X0, S1011X1, S1012X2, S1013X3} = 'Tianjiupai.Quad':'decompose'(S1009Quad), [S1010X0 | [S1011X1 | [S1012X2 | [S1013X3 | []]]]] end.
'access'(S1015Seat, S1016Quad) -> begin {S1017X0, S1018X1, S1019X2, S1020X3} = 'Tianjiupai.Quad':'decompose'(S1016Quad), case S1015Seat of 'seat_a' -> S1017X0; 'seat_b' -> S1018X1; 'seat_c' -> S1019X2; 'seat_d' -> S1020X3 end end.
'update'(S1022Seat, S1023XNew, S1024Quad) -> begin {S1025X0, S1026X1, S1027X2, S1028X3} = 'Tianjiupai.Quad':'decompose'(S1024Quad), begin S1029X = case S1022Seat of 'seat_a' -> {S1023XNew, S1026X1, S1027X2, S1028X3}; 'seat_b' -> {S1025X0, S1023XNew, S1027X2, S1028X3}; 'seat_c' -> {S1025X0, S1026X1, S1023XNew, S1028X3}; 'seat_d' -> {S1025X0, S1026X1, S1027X2, S1023XNew} end, 'Tianjiupai.Quad':'make'(S1029X) end end.
'map'(S1031F, S1032Quad) -> begin {S1033X0, S1034X1, S1035X2, S1036X3} = 'Tianjiupai.Quad':'decompose'(S1032Quad), 'Tianjiupai.Quad':'make'({S1031F(S1033X0), S1031F(S1034X1), S1031F(S1035X2), S1031F(S1036X3)}) end.
'map_fold_effect'(S1038F, S1039Acc, S1040Quad) -> begin {S1041X0, S1042X1, S1043X2, S1044X3} = 'Tianjiupai.Quad':'decompose'(S1040Quad), begin {S1045Acc, S1046Y0} = S1038F(S1039Acc, S1041X0), begin {S1047Acc, S1048Y1} = S1038F(S1045Acc, S1042X1), begin {S1049Acc, S1050Y2} = S1038F(S1047Acc, S1043X2), begin {S1051Acc, S1052Y3} = S1038F(S1049Acc, S1044X3), begin S1053Quad = 'Tianjiupai.Quad':'make'({S1046Y0, S1048Y1, S1050Y2, S1052Y3}), sesterl_internal_prim:'return'({S1051Acc, S1053Quad}) end end end end end end.
'find'(S1055F, S1056Quad) -> begin {S1057X0, S1058X1, S1059X2, S1060X3} = 'Tianjiupai.Quad':'decompose'(S1056Quad), case {S1055F(S1057X0), S1055F(S1058X1), S1055F(S1059X2), S1055F(S1060X3)} of {true, _, _, _} -> {'ok', {'seat_a', S1057X0}}; {_, true, _, _} -> {'ok', {'seat_b', S1058X1}}; {_, _, true, _} -> {'ok', {'seat_c', S1059X2}}; {_, _, _, true} -> {'ok', {'seat_d', S1060X3}}; _ -> 'error' end end.
