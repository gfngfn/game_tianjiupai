-module('Tianjiupai.Quad').
-export(['seat_equal'/2, 'the_other_seats'/1, 'advance_seat'/2, 'decompose'/1, 'make'/1, 'to_list'/1, 'access'/2, 'update'/3, 'map'/2, 'map_fold_effect'/3, 'find'/2]).
    seat_equal(S1, S2) ->
        S1 =:= S2.
  
'the_other_seats'(S1001Seat) -> case S1001Seat of 'seat_a' -> ['seat_b' | ['seat_c' | ['seat_d' | []]]]; 'seat_b' -> ['seat_c' | ['seat_d' | ['seat_a' | []]]]; 'seat_c' -> ['seat_d' | ['seat_a' | ['seat_b' | []]]]; 'seat_d' -> ['seat_a' | ['seat_b' | ['seat_c' | []]]] end.
'advance_seat'(S1004S, S1005N) -> case (S1005N < 0) of true -> 'Tianjiupai.Quad':'advance_seat'(S1004S, (S1005N + 4)); false -> case (S1005N == 0) of true -> S1004S; false -> begin S1006S = case S1004S of 'seat_a' -> 'seat_b'; 'seat_b' -> 'seat_c'; 'seat_c' -> 'seat_d'; 'seat_d' -> 'seat_a' end, 'Tianjiupai.Quad':'advance_seat'(S1006S, (S1005N - 1)) end end end.
'decompose'(S1007Quad) -> {maps:get(east, S1007Quad), maps:get(south, S1007Quad), maps:get(west, S1007Quad), maps:get(north, S1007Quad)}.
'make'(S1009X) -> begin {S1010X0, S1011X1, S1012X2, S1013X3} = S1009X, #{east => S1010X0, north => S1013X3, south => S1011X1, west => S1012X2} end.
'to_list'(S1015Quad) -> begin {S1016X0, S1017X1, S1018X2, S1019X3} = 'Tianjiupai.Quad':'decompose'(S1015Quad), [S1016X0 | [S1017X1 | [S1018X2 | [S1019X3 | []]]]] end.
'access'(S1021Seat, S1022Quad) -> begin {S1023X0, S1024X1, S1025X2, S1026X3} = 'Tianjiupai.Quad':'decompose'(S1022Quad), case S1021Seat of 'seat_a' -> S1023X0; 'seat_b' -> S1024X1; 'seat_c' -> S1025X2; 'seat_d' -> S1026X3 end end.
'update'(S1028Seat, S1029XNew, S1030Quad) -> begin {S1031X0, S1032X1, S1033X2, S1034X3} = 'Tianjiupai.Quad':'decompose'(S1030Quad), begin S1035X = case S1028Seat of 'seat_a' -> {S1029XNew, S1032X1, S1033X2, S1034X3}; 'seat_b' -> {S1031X0, S1029XNew, S1033X2, S1034X3}; 'seat_c' -> {S1031X0, S1032X1, S1029XNew, S1034X3}; 'seat_d' -> {S1031X0, S1032X1, S1033X2, S1029XNew} end, 'Tianjiupai.Quad':'make'(S1035X) end end.
'map'(S1037F, S1038Quad) -> begin {S1039X0, S1040X1, S1041X2, S1042X3} = 'Tianjiupai.Quad':'decompose'(S1038Quad), 'Tianjiupai.Quad':'make'({S1037F(S1039X0), S1037F(S1040X1), S1037F(S1041X2), S1037F(S1042X3)}) end.
'map_fold_effect'(S1044F, S1045Acc, S1046Quad) -> begin {S1047X0, S1048X1, S1049X2, S1050X3} = 'Tianjiupai.Quad':'decompose'(S1046Quad), begin {S1051Acc, S1052Y0} = S1044F(S1045Acc, S1047X0), begin {S1053Acc, S1054Y1} = S1044F(S1051Acc, S1048X1), begin {S1055Acc, S1056Y2} = S1044F(S1053Acc, S1049X2), begin {S1057Acc, S1058Y3} = S1044F(S1055Acc, S1050X3), begin S1059Quad = 'Tianjiupai.Quad':'make'({S1052Y0, S1054Y1, S1056Y2, S1058Y3}), sesterl_internal_prim:'return'({S1057Acc, S1059Quad}) end end end end end end.
'find'(S1061F, S1062Quad) -> begin {S1063X0, S1064X1, S1065X2, S1066X3} = 'Tianjiupai.Quad':'decompose'(S1062Quad), case {S1061F(S1063X0), S1061F(S1064X1), S1061F(S1065X2), S1061F(S1066X3)} of {true, _, _, _} -> {'ok', {'seat_a', S1063X0}}; {_, true, _, _} -> {'ok', {'seat_b', S1064X1}}; {_, _, true, _} -> {'ok', {'seat_c', S1065X2}}; {_, _, _, true} -> {'ok', {'seat_d', S1066X3}}; _ -> 'error' end end.
