-module('Tianjiupai.UserServerSup').
-export(['start_child_impl'/1, 'start_link'/0, 'start_child'/2, 'which_children'/0, 'terminate_child'/1, 'as_pid'/1]).
'start_child_impl'(S2502StartArg) -> begin {S2503UserId, S2504UserName} = S2502StartArg, 'SesterlStdlib.SupervisorDynamic':'make_child_proc'(fun() -> begin S2505Res = 'Tianjiupai.UserServer':'start_link'(S2503UserId, S2504UserName), sesterl_internal_prim:'return'('SesterlStdlib.Result':'map'((fun 'Tianjiupai.UserServer':'as_pid'/1), S2505Res)) end end) end.
'start_link'() -> 'Tianjiupai.UserServerSup.Impl':'start_link_name'(ok, {'global', ok}).
'start_child'(S2525UserId, S2526UserName) -> begin S2527Opt = 'Tianjiupai.UserServerSup.Impl':'where_is_global'(ok), case S2527Opt of {'ok', S2528Proc} -> begin S2529Res = 'Tianjiupai.UserServerSup.Impl':'start_child'(S2528Proc, {S2525UserId, S2526UserName}), sesterl_internal_prim:'return'('SesterlStdlib.Result':'map'((fun 'Tianjiupai.UserServer':'from_pid'/1), S2529Res)) end; 'error' -> sesterl_internal_prim:'return'({'error', 'SesterlStdlib.RawValue':'forget'(<<"supervisor not found"/utf8>>)}) end end.
'which_children'() -> begin S2531Opt = 'Tianjiupai.UserServerSup.Impl':'where_is_global'(ok), case S2531Opt of {'ok', S2532Proc} -> begin S2533Pids = 'Tianjiupai.UserServerSup.Impl':'which_children'(S2532Proc), sesterl_internal_prim:'return'('SesterlStdlib.List':'map'((fun 'Tianjiupai.UserServer':'from_pid'/1), S2533Pids)) end; 'error' -> sesterl_internal_prim:'return'([]) end end.
'terminate_child'(S2535ChildProc) -> begin S2536Opt = 'Tianjiupai.UserServerSup.Impl':'where_is_global'(ok), case S2536Opt of {'ok', S2537Proc} -> begin S2538ChildPid = 'Tianjiupai.UserServer':'as_pid'(S2535ChildProc), 'Tianjiupai.UserServerSup.Impl':'terminate_child'(S2537Proc, S2538ChildPid) end; 'error' -> sesterl_internal_prim:'return'({'error', 'SesterlStdlib.RawValue':'forget'(<<"supervisor not found"/utf8>>)}) end end.
'as_pid'(S2540Proc) -> 'Tianjiupai.UserServerSup.Impl':'as_pid'(S2540Proc).
