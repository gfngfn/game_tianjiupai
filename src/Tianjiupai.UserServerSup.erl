-module('Tianjiupai.UserServerSup').
-export(['start_child_impl'/1, 'start_link'/0, 'start_child'/2, 'which_children'/0, 'terminate_child'/1, 'as_pid'/1]).
'start_child_impl'(S2523StartArg) -> begin {S2524UserId, S2525UserName} = S2523StartArg, 'SesterlStdlib.SupervisorDynamic':'make_child_proc'(fun() -> begin S2526Res = 'Tianjiupai.UserServer':'start_link'(S2524UserId, S2525UserName), sesterl_internal_prim:'return'('SesterlStdlib.Result':'map'((fun 'Tianjiupai.UserServer':'as_pid'/1), S2526Res)) end end) end.
'start_link'() -> 'Tianjiupai.UserServerSup.Impl':'start_link_name'(ok, {'global', ok}).
'start_child'(S2546UserId, S2547UserName) -> begin S2548Opt = 'Tianjiupai.UserServerSup.Impl':'where_is_global'(ok), case S2548Opt of {'ok', S2549Proc} -> begin S2550Res = 'Tianjiupai.UserServerSup.Impl':'start_child'(S2549Proc, {S2546UserId, S2547UserName}), sesterl_internal_prim:'return'('SesterlStdlib.Result':'map'((fun 'Tianjiupai.UserServer':'from_pid'/1), S2550Res)) end; 'error' -> sesterl_internal_prim:'return'({'error', 'SesterlStdlib.RawValue':'forget'(<<"supervisor not found"/utf8>>)}) end end.
'which_children'() -> begin S2552Opt = 'Tianjiupai.UserServerSup.Impl':'where_is_global'(ok), case S2552Opt of {'ok', S2553Proc} -> begin S2554Pids = 'Tianjiupai.UserServerSup.Impl':'which_children'(S2553Proc), sesterl_internal_prim:'return'('SesterlStdlib.List':'map'((fun 'Tianjiupai.UserServer':'from_pid'/1), S2554Pids)) end; 'error' -> sesterl_internal_prim:'return'([]) end end.
'terminate_child'(S2556ChildProc) -> begin S2557Opt = 'Tianjiupai.UserServerSup.Impl':'where_is_global'(ok), case S2557Opt of {'ok', S2558Proc} -> begin S2559ChildPid = 'Tianjiupai.UserServer':'as_pid'(S2556ChildProc), 'Tianjiupai.UserServerSup.Impl':'terminate_child'(S2558Proc, S2559ChildPid) end; 'error' -> sesterl_internal_prim:'return'({'error', 'SesterlStdlib.RawValue':'forget'(<<"supervisor not found"/utf8>>)}) end end.
'as_pid'(S2561Proc) -> 'Tianjiupai.UserServerSup.Impl':'as_pid'(S2561Proc).
