-module('Tianjiupai.UserServerSup').
-export(['start_child_impl'/1, 'start_link'/0, 'start_child'/2, 'which_children'/0, 'terminate_child'/1, 'as_pid'/1]).
'start_child_impl'(S2515StartArg) -> begin {S2516UserId, S2517UserName} = S2515StartArg, 'SesterlStdlib.SupervisorDynamic':'make_child_proc'(fun() -> begin S2518Res = 'Tianjiupai.UserServer':'start_link'(S2516UserId, S2517UserName), sesterl_internal_prim:'return'('SesterlStdlib.Result':'map'((fun 'Tianjiupai.UserServer':'as_pid'/1), S2518Res)) end end) end.
'start_link'() -> 'Tianjiupai.UserServerSup.Impl':'start_link_name'(ok, {'global', ok}).
'start_child'(S2538UserId, S2539UserName) -> begin S2540Opt = 'Tianjiupai.UserServerSup.Impl':'where_is_global'(ok), case S2540Opt of {'ok', S2541Proc} -> begin S2542Res = 'Tianjiupai.UserServerSup.Impl':'start_child'(S2541Proc, {S2538UserId, S2539UserName}), sesterl_internal_prim:'return'('SesterlStdlib.Result':'map'((fun 'Tianjiupai.UserServer':'from_pid'/1), S2542Res)) end; 'error' -> sesterl_internal_prim:'return'({'error', 'SesterlStdlib.RawValue':'forget'(<<"supervisor not found"/utf8>>)}) end end.
'which_children'() -> begin S2544Opt = 'Tianjiupai.UserServerSup.Impl':'where_is_global'(ok), case S2544Opt of {'ok', S2545Proc} -> begin S2546Pids = 'Tianjiupai.UserServerSup.Impl':'which_children'(S2545Proc), sesterl_internal_prim:'return'('SesterlStdlib.List':'map'((fun 'Tianjiupai.UserServer':'from_pid'/1), S2546Pids)) end; 'error' -> sesterl_internal_prim:'return'([]) end end.
'terminate_child'(S2548ChildProc) -> begin S2549Opt = 'Tianjiupai.UserServerSup.Impl':'where_is_global'(ok), case S2549Opt of {'ok', S2550Proc} -> begin S2551ChildPid = 'Tianjiupai.UserServer':'as_pid'(S2548ChildProc), 'Tianjiupai.UserServerSup.Impl':'terminate_child'(S2550Proc, S2551ChildPid) end; 'error' -> sesterl_internal_prim:'return'({'error', 'SesterlStdlib.RawValue':'forget'(<<"supervisor not found"/utf8>>)}) end end.
'as_pid'(S2553Proc) -> 'Tianjiupai.UserServerSup.Impl':'as_pid'(S2553Proc).
