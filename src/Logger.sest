module Logger :> sig
  val info<$a> : fun(format<$a>, $a) -> fun(binary, int) -> unit
  val warning<$a> : fun(format<$a>, $a) -> fun(binary, int) -> unit
end = struct

/*
  val log_impl<$a> : fun(binary, int, list<char>, format<$a>, $a) -> unit = external 5 ```
    log_impl(Filename, Line, LogLevel, FormatAndArity, Args) ->
        {Format, _} = FormatAndArity,
        TimestampMs = erlang:system_time(millisecond),
        TimestampString = calendar:system_time_to_rfc3339(TimestampMs, [{unit, millisecond}]),
        Self = self(),
        io:format(
            "~s:~p ~s ~p [~s] " ++ Format ++ "~n",
            [Filename, Line, TimestampString, Self, LogLevel] ++ erlang:tuple_to_list(Args)).
  ```

  val info<$a>(fmt : format<$a>, args : $a) =
    fun(filename, line) -> log_impl(filename, line, 'info', fmt, args) end

  val warning<$a>(fmt : format<$a>, args : $a) =
    fun(filename, line) -> log_impl(filename, line, 'warning', fmt, args) end
*/

  val info_impl<$a> : fun(binary, int, format<$a>, $a) -> unit = external 4 ```
    info_impl(Filename, Line, FormatAndArity, Args) ->
        {Format, _} = FormatAndArity,
        FilenameStr = erlang:binary_to_list(Filename),
        logger:info(Format, erlang:tuple_to_list(Args), #{ file => FilenameStr, line => Line }).
  ```

  val info<$a>(fmt : format<$a>, args : $a) =
    fun(filename, line) -> info_impl(filename, line, fmt, args) end

  val warning_impl<$a> : fun(binary, int, format<$a>, $a) -> unit = external 4 ```
    warning_impl(Filename, Line, FormatAndArity, Args) ->
        {Format, _} = FormatAndArity,
        FilenameStr = erlang:binary_to_list(Filename),
        logger:warning(Format, erlang:tuple_to_list(Args), #{ file => FilenameStr, line => Line }).
  ```

  val warning<$a>(fmt : format<$a>, args : $a) =
    fun(filename, line) -> warning_impl(filename, line, fmt, args) end

end
