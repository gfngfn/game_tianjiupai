module Logger :> sig
  val info<$a> : fun(format<$a>, $a) -> fun(binary, int) -> unit
  val warning<$a> : fun(format<$a>, $a) -> fun(binary, int) -> unit
end = struct

  type level =
    | Info
    | Warning

  val log_impl<$a> : fun(level, binary, int, format<$a>, $a) -> unit = external 5 ```
    log_impl(Level, Filename, Line, FormatAndArity, Args) ->
        {Format, _} = FormatAndArity,
        FilenameStr = erlang:binary_to_list(Filename),
        logger:log(Level, Format, erlang:tuple_to_list(Args), #{ file => FilenameStr, line => Line }).
  ```

  val info<$a>(fmt : format<$a>, args : $a) =
    fun(filename, line) -> log_impl(Info, filename, line, fmt, args) end

  val warning<$a>(fmt : format<$a>, args : $a) =
    fun(filename, line) -> log_impl(Warning, filename, line, fmt, args) end

end
