module Logger :> sig
  val info<$a> : fun(format<$a>, $a) -> fun(binary, int) -> unit
  val warning<$a> : fun(format<$a>, $a) -> fun(binary, int) -> unit
end = struct

  val log_impl<$a> : fun(binary, int, list<char>, format<$a>, $a) -> unit = external 5 ```
    log_impl(Filename, Line, LogLevel, Format, Args) ->
        TimestampMs = erlang:system_time(millisecond),
        TimestampString = calendar:system_time_to_rfc3339(TimestampMs, [{unit, millisecond}]),
        Self = self(),
        io:format(
            "~s:~p ~s ~p [~s]" ++ Format ++ "~n",
            [Filename, Line, TimestampString, Self, LogLevel] ++ erlang:tuple_to_list(Args)).
  ```

  val info<$a>(fmt : format<$a>, args : $a) =
    fun(filename, line) -> log_impl(filename, line, 'info', fmt, args) end

  val warning<$a>(fmt : format<$a>, args : $a) =
    fun(filename, line) -> log_impl(filename, line, 'warning', fmt, args) end

end
