import Models
import Card
import RoomServerSup
import RoomServer
import WebSocketHandler

module Room :> sig
  open Stdlib
  open Models

  val create<$a> : fun(room_name) -> [$a]result<room_id, GenServer.start_link_error>
  val get_all_rooms<$a> : fun() -> [$a]list<room_summary>
  val get_whole_state<$a> : fun(room_id) -> [$a]option<room_summary>
  val get_personal_state<$a> : fun(room_id, user_id) -> [$a]option<personal_state>
  val send_chat<$a> : fun(room_id, user, binary) -> [$a]option<unit>
  val attend<$a> : fun(room_id, user, WebSocketHandler.proc) -> [$a]option<personal_state>
  val exit<$a> : fun(room_id, user_id) -> [$a]option<unit>
  val submit<$a> : fun(room_id, user_id, list<Card.t>) -> [$a]option<{observable_game_state, option<last>}>
  val ack<$a> : fun(room_id, user_id, snapshot_id) -> [$a]unit
  val require_next_inning<$a> : fun(room_id, user_id, snapshot_id) -> [$a]unit
  val set_connection<$a> : fun(room_id, user_id, WebSocketHandler.proc) -> [$a]unit
  val monitor<$a> : fun(room_id) -> [$a]option<MonitorRef.t>
end = struct
  open Stdlib
  open Models

  val generate_room_id<$a> : fun() -> [$a]room_id = external 0 ```
    generate_room_id() ->
        Uuid = uuid:get_v4(),
        list_to_binary(uuid:uuid_to_string(Uuid)).
  ```

  val create<$a>(room_name : room_name) : [$a]result<room_id, GenServer.start_link_error> = act
    do room_id <- generate_room_id() in
    do res <- RoomServerSup.start_child(-room_id room_id, -room_name room_name) in
    return(Result.map(fun(_) -> room_id end, res))

  val get_all_rooms() = act
    do procs <- RoomServerSup.which_children() in
    do acc <-
      List.foldl_effect(
        fun(acc, proc) -> act
          do opt <- RoomServer.get_whole_state_by_proc(proc) in
          case opt of
          | Some(whole_state) -> return(whole_state :: acc)
          | None              -> return(acc)
          end
        end,
        [],
        procs)
    in
    return(acc)

  val get_whole_state(room_id : room_id) = act
    RoomServer.get_whole_state(room_id)

  val get_personal_state(room_id, user_id) = act
    RoomServer.get_personal_state(room_id, user_id)

  val attend(room_id, user, ws_proc) = act
    RoomServer.attend(room_id, user, ws_proc)

  val exit(room_id, user_id) = act
    RoomServer.exit(room_id, user_id)

  val send_chat(room_id, from, text) = act
    RoomServer.send_chat(room_id, from, text)

  val submit(room_id, user_id, cards) = act
    RoomServer.submit(room_id, user_id, cards)

  val ack(room_id, user_id, snapshot_id) = act
    RoomServer.ack(room_id, user_id, snapshot_id)

  val require_next_inning(room_id, user_id, snapshot_id) = act
    RoomServer.require_next_inning(room_id, user_id, snapshot_id)

  val set_connection(room_id, user_id, ws_proc) = act
    RoomServer.set_connection(room_id, user_id, ws_proc)

  val monitor(room_id) = act
    RoomServer.monitor(room_id)

end
