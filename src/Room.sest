import Types
import RoomServerSup
import RoomServer

module Room = struct
  open Stdlib
  open Types

  val generate_room_id<$a> : fun() -> [$a]room_id = external 0 ```
    generate_room_id() ->
        Uuid = uuid:get_v4(),
        list_to_binary(uuid:uuid_to_string(Uuid)).
  ```

  val create<$a>(room_name : binary) : [$a]result<room_id, GenServer.start_link_error> = act
    do room_id <- generate_room_id() in
    do res <- RoomServerSup.start_child(-room_id room_id, -room_name room_name) in
    return(Result.map(fun(proc) -> room_id end, res))

  val get_whole_state(room_id : room_id) = act
    RoomServer.get_whole_state(room_id)

  val get_personal_state(room_id, user_id) = act
    RoomServer.get_personal_state(room_id, user_id)

  val attend(room_id, user_id) = act
    RoomServer.attend(room_id, user_id)

  val exit(room_id, user_id) = act
    RoomServer.exit(room_id, user_id)

  val send_chat(room_id, from, text) = act
    RoomServer.send_chat(room_id, from, text)

  val monitor(room_id) = act
    RoomServer.monitor(room_id)

end
