-module('Tianjiupai.UserServer.Callback').
-export(['init'/1, 'monitor_room'/1, 'reply'/2, 'no_reply'/1, 'handle_call'/3, 'handle_cast'/2, 'is_room_down'/2, 'handle_timeout'/1, 'handle_down'/4, 'handle_info'/2, 'terminate'/2]).
'init'(S2363InitArg) -> begin {S2364UserId, S2365UserName} = S2363InitArg, begin S2366Settings = #{user_id => S2364UserId, user_name => S2365UserName}, begin S2367State = #{belongs_to => 'error', creates => [], settings => S2366Settings}, 'SesterlStdlib.GenServer':'init_ok'(S2367State, #{timeout => 'Tianjiupai.Constants':'user_expiration_timeout'()}) end end end.
'monitor_room'(S2369RoomId) -> 'Tianjiupai.Room':'monitor'(S2369RoomId).
'reply'(S2371Response, S2372State) -> 'SesterlStdlib.GenServer':'reply'(S2371Response, S2372State, #{timeout => 'Tianjiupai.Constants':'user_expiration_timeout'()}).
'no_reply'(S2374State) -> 'SesterlStdlib.GenServer':'no_reply'(S2374State, #{timeout => 'Tianjiupai.Constants':'user_expiration_timeout'()}).
'handle_call'(S2376Req, _, S2377State) -> case S2376Req of 'get_user_state' -> begin S2380BelongsTo = 'SesterlStdlib.Option':'map'(fun(S2378Pair) -> begin {S2379RoomId, _} = S2378Pair, S2379RoomId end end, maps:get(belongs_to, S2377State)), begin S2381UserState = #{belongs_to => S2380BelongsTo, user_name => maps:get(user_name, maps:get(settings, S2377State))}, 'Tianjiupai.UserServer.Callback':'reply'({'user_state_got', S2381UserState}, S2377State) end end; {'set_room', S2382RoomIdOpt} -> case S2382RoomIdOpt of 'error' -> begin _ = case maps:get(belongs_to, S2377State) of 'error' -> sesterl_internal_prim:'return'(ok); {'ok', {_, S2383MrefRoom}} -> 'SesterlStdlib.MonitorRef':'demonitor'(S2383MrefRoom) end, begin S2384State = maps:put(belongs_to, 'error', S2377State), 'Tianjiupai.UserServer.Callback':'reply'({'room_set', true}, S2384State) end end; {'ok', S2385RoomId} -> begin S2386MrefOpt = 'Tianjiupai.UserServer.Callback':'monitor_room'(S2385RoomId), case S2386MrefOpt of 'error' -> 'Tianjiupai.UserServer.Callback':'reply'({'room_set', false}, S2377State); {'ok', S2387MrefRoomNew} -> begin _ = case maps:get(belongs_to, S2377State) of 'error' -> sesterl_internal_prim:'return'(ok); {'ok', {_, S2388MrefRoom}} -> 'SesterlStdlib.MonitorRef':'demonitor'(S2388MrefRoom) end, begin S2389State = maps:put(belongs_to, {'ok', {S2385RoomId, S2387MrefRoomNew}}, S2377State), 'Tianjiupai.UserServer.Callback':'reply'({'room_set', true}, S2389State) end end end end end; {'create_room', S2390RoomId, S2391RoomName} -> begin S2392Creates = maps:get(creates, S2377State), case ('SesterlStdlib.List':'length'(S2392Creates) >= 'Tianjiupai.Constants':'maximum_num_rooms_per_user'()) of true -> 'Tianjiupai.UserServer.Callback':'reply'({'room_created', {'error', 'SesterlStdlib.RawValue':'forget'(<<"capacity per user exceeded"/utf8>>)}}, S2377State); false -> begin S2393Res = 'Tianjiupai.RoomServerSup':'start_child'(S2390RoomId, S2391RoomName), case S2393Res of {'ok', S2394Proc} -> begin S2395Mref = 'SesterlStdlib.MonitorRef':'monitor'('Tianjiupai.RoomServer':'as_pid'(S2394Proc)), begin _ = begin S2396Settings = maps:get(settings, S2377State), begin S3362 = 'Tianjiupai.Logger':'debug'({"create room (room_id: ~s, user_id: ~s, user_name: ~s)", 3}, {S2390RoomId, maps:get(user_id, S2396Settings), maps:get(user_name, S2396Settings)}), S3362(<<"UserServer.sest">>, 151) end end, 'Tianjiupai.UserServer.Callback':'reply'({'room_created', {'ok', S2394Proc}}, maps:put(creates, [{S2390RoomId, S2395Mref} | S2392Creates], S2377State)) end end; {'error', S2397Err} -> 'Tianjiupai.UserServer.Callback':'reply'({'room_created', {'error', S2397Err}}, S2377State) end end end end end.
'handle_cast'(S2399Msg, S2400State) -> begin 'delete_user' = S2399Msg, begin _ = begin S3364 = 'Tianjiupai.Logger':'info'({"stop (user_id: ~s)", 1}, {maps:get(user_id, maps:get(settings, S2400State))}), S3364(<<"UserServer.sest">>, 164) end, 'SesterlStdlib.GenServer':'no_reply_and_stop'('SesterlStdlib.StopReason':'normal'(), S2400State) end end.
'is_room_down'(S2402Mref, S2403State) -> case maps:get(belongs_to, S2403State) of 'error' -> false; {'ok', {_, S2404MrefRoom}} -> 'SesterlStdlib.MonitorRef':'equal'(S2402Mref, S2404MrefRoom) end.
'handle_timeout'(S2406State) -> begin _ = begin S3367 = 'Tianjiupai.Logger':'info'({"timeout (user_id: ~s)", 1}, {maps:get(user_id, maps:get(settings, S2406State))}), S3367(<<"UserServer.sest">>, 175) end, 'SesterlStdlib.GenServer':'no_reply_and_stop'('SesterlStdlib.StopReason':'normal'(), S2406State) end.
'handle_down'(S2408Mref, S2409Pid, S2410Reason, S2411State) -> begin S2412UserId = maps:get(user_id, maps:get(settings, S2411State)), begin S2420State = case 'Tianjiupai.UserServer.Callback':'is_room_down'(S2408Mref, S2411State) of true -> begin _ = begin S3369 = 'Tianjiupai.Logger':'debug'({"room closed (user_id: ~s, reason: ~p)", 2}, {S2412UserId, S2410Reason}), S3369(<<"UserServer.sest">>, 182) end, sesterl_internal_prim:'return'(maps:put(belongs_to, 'error', S2411State)) end; false -> begin {S2417DeletedRoomOpt, S2418Acc} = 'SesterlStdlib.List':'foldl'(fun({S2413DeletedRoomOpt, S2414Acc}, {S2415RoomId, S2416Mref0}) -> case 'SesterlStdlib.MonitorRef':'equal'(S2416Mref0, S2408Mref) of true -> {{'ok', S2415RoomId}, S2414Acc}; false -> {S2413DeletedRoomOpt, [{S2415RoomId, S2416Mref0} | S2414Acc]} end end, {'error', []}, maps:get(creates, S2411State)), case S2417DeletedRoomOpt of 'error' -> begin _ = begin S3370 = 'Tianjiupai.Logger':'warning'({"unexpected down (user_id: ~s, mref: ~p, pid: ~p, reason: ~p, state: ~p)", 5}, {S2412UserId, S2408Mref, S2409Pid, S2410Reason, S2411State}), S3370(<<"UserServer.sest">>, 199) end, sesterl_internal_prim:'return'(S2411State) end; {'ok', S2419RoomId} -> begin _ = begin S3371 = 'Tianjiupai.Logger':'debug'({"room deleted (user_id: ~s, room_id: ~s, mref: ~p, pid: ~p, reason: ~p, state: ~p)", 6}, {S2412UserId, S2419RoomId, S2408Mref, S2409Pid, S2410Reason, S2411State}), S3371(<<"UserServer.sest">>, 207) end, sesterl_internal_prim:'return'(maps:put(creates, 'SesterlStdlib.List':'reverse'(S2418Acc), S2411State)) end end end end, 'Tianjiupai.UserServer.Callback':'no_reply'(S2420State) end end.
'handle_info'(S2422Info, S2423State) -> begin _ = begin S3373 = 'Tianjiupai.Logger':'warning'({"unexpected info (info: ~p, state: ~p)", 2}, {S2422Info, S2423State}), S3373(<<"UserServer.sest">>, 218) end, 'Tianjiupai.UserServer.Callback':'no_reply'(S2423State) end.
'terminate'(S2425Reason, S2426State) -> begin _ = begin S3375 = 'Tianjiupai.Logger':'debug'({"terminate (reason: ~p, user_id: ~s)", 2}, {S2425Reason, maps:get(user_id, maps:get(settings, S2426State))}), S3375(<<"UserServer.sest">>, 222) end, sesterl_internal_prim:'return'(ok) end.
