-module('Tianjiupai.UserServer.Callback').
-export(['init'/1, 'monitor_room'/1, 'monitor'/1, 'demonitor'/1, 'handle_call'/3, 'handle_cast'/2, 'check_down_message'/2, 'check_room_down'/2, 'check_websocket_down'/2, 'handle_info'/2, 'terminate'/1]).
'init'(S2024InitArg) -> begin {S2025UserId, S2026UserName} = S2024InitArg, begin S2027Settings = #{user_id => S2025UserId, user_name => S2026UserName}, begin S2028State = #{belongs_to => 'error', settings => S2027Settings, websocket_connection => 'error'}, 'SesterlStdlib.GenServer':'init_ok'(S2028State) end end end.
'monitor_room'(S2030RoomId) -> 'Tianjiupai.Room':'monitor'(S2030RoomId).
      monitor(WsProc) ->
          erlang:monitor(process, WsProc).
    
      demonitor(MonitorRef) ->
          erlang:demonitor(MonitorRef).
    
'handle_call'(S2034Req, S2035From, S2036State) -> case S2034Req of 'get_user_state' -> begin S2039BelongsTo = 'SesterlStdlib.Option':'map'(fun(S2037Pair) -> begin {S2038RoomId, _} = S2037Pair, S2038RoomId end end, maps:get(belongs_to, S2036State)), begin S2040UserState = #{belongs_to => S2039BelongsTo, user_name => maps:get(user_name, maps:get(settings, S2036State))}, 'SesterlStdlib.GenServer':'reply'({'user_state_got', S2040UserState}, S2036State) end end; {'set_room', S2041RoomIdOpt} -> case S2041RoomIdOpt of 'error' -> begin S2043Dummy = case maps:get(belongs_to, S2036State) of 'error' -> sesterl_internal_prim:'return'(ok); {'ok', {_, S2042MonitorRef}} -> 'Tianjiupai.UserServer.Callback':'demonitor'(S2042MonitorRef) end, begin S2044State = maps:put(belongs_to, 'error', S2036State), 'SesterlStdlib.GenServer':'reply'({'room_set', true}, S2044State) end end; {'ok', S2045RoomId} -> begin S2046MonitorRefOpt = 'Tianjiupai.UserServer.Callback':'monitor_room'(S2045RoomId), case S2046MonitorRefOpt of 'error' -> 'SesterlStdlib.GenServer':'reply'({'room_set', false}, S2036State); {'ok', S2047MonitorRefNew} -> begin S2049Dummy = case maps:get(belongs_to, S2036State) of 'error' -> sesterl_internal_prim:'return'(ok); {'ok', {_, S2048MonitorRef}} -> 'Tianjiupai.UserServer.Callback':'demonitor'(S2048MonitorRef) end, begin S2050State = maps:put(belongs_to, {'ok', {S2045RoomId, S2047MonitorRefNew}}, S2036State), 'SesterlStdlib.GenServer':'reply'({'room_set', true}, S2050State) end end end end end; {'set_websocket_connection', S2051WsProc} -> begin S2053Dummy = case maps:get(websocket_connection, S2036State) of 'error' -> sesterl_internal_prim:'return'(ok); {'ok', S2052MonitorRef} -> 'Tianjiupai.UserServer.Callback':'demonitor'(S2052MonitorRef) end, begin S2054MonitorRefNew = 'Tianjiupai.UserServer.Callback':'monitor'(S2051WsProc), begin S2055State = maps:put(websocket_connection, {'ok', S2054MonitorRefNew}, S2036State), begin S2057Dummy = case maps:get(belongs_to, S2055State) of 'error' -> sesterl_internal_prim:'return'(ok); {'ok', {S2056RoomId, _}} -> 'Tianjiupai.Room':'notify_connected'(S2056RoomId, maps:get(user_id, maps:get(settings, S2055State))) end, 'SesterlStdlib.GenServer':'reply'('websocket_connection_set', S2055State) end end end end end.
'handle_cast'(S2059Msg, S2060State) -> begin _ = begin S2696 = 'Tianjiupai.Logger':'warning'({"unexpected cast message (message: ~p, state: ~p)", 2}, {S2059Msg, S2060State}), S2696(<<"UserServer.sest">>, 175) end, 'SesterlStdlib.GenServer':'no_reply'(S2060State) end.
      check_down_message(Info, MonitorRef) ->
        case Info of
            {'DOWN', MonitorRef, process, _Pid, Reason} -> {ok, Reason};
            _                                           -> error
        end.
    
'check_room_down'(S2063Info, S2064State) -> case maps:get(belongs_to, S2064State) of 'error' -> 'error'; {'ok', {_, S2065MonitorRef}} -> 'Tianjiupai.UserServer.Callback':'check_down_message'(S2063Info, S2065MonitorRef) end.
'check_websocket_down'(S2067Info, S2068State) -> case maps:get(websocket_connection, S2068State) of 'error' -> 'error'; {'ok', S2069MonitorRef} -> 'Tianjiupai.UserServer.Callback':'check_down_message'(S2067Info, S2069MonitorRef) end.
'handle_info'(S2071Info, S2072State) -> begin S2073UserId = maps:get(user_id, maps:get(settings, S2072State)), begin S2078State = case 'Tianjiupai.UserServer.Callback':'check_room_down'(S2071Info, S2072State) of {'ok', S2074Reason} -> begin _ = begin S2700 = 'Tianjiupai.Logger':'info'({"room closed (user_id: ~p, reason: ~p)", 2}, {S2073UserId, S2074Reason}), S2700(<<"UserServer.sest">>, 204) end, sesterl_internal_prim:'return'(maps:put(belongs_to, 'error', S2072State)) end; 'error' -> case 'Tianjiupai.UserServer.Callback':'check_websocket_down'(S2071Info, S2072State) of {'ok', S2075Reason} -> begin _ = begin S2701 = 'Tianjiupai.Logger':'info'({"WebSocket connection closed (user_id: ~p, reason: ~p)", 2}, {S2073UserId, S2075Reason}), S2701(<<"UserServer.sest">>, 214) end, begin S2077Dummy = case maps:get(belongs_to, S2072State) of 'error' -> sesterl_internal_prim:'return'(ok); {'ok', {S2076RoomId, _}} -> 'Tianjiupai.Room':'notify_disconnected'(S2076RoomId, S2073UserId) end, sesterl_internal_prim:'return'(maps:put(websocket_connection, 'error', S2072State)) end end; 'error' -> begin _ = begin S2702 = 'Tianjiupai.Logger':'info'({"unexpected info (user_id: ~p, message: ~p)", 2}, {S2073UserId, S2071Info}), S2702(<<"UserServer.sest">>, 228) end, sesterl_internal_prim:'return'(S2072State) end end end, 'SesterlStdlib.GenServer':'no_reply'(S2078State) end end.
'terminate'(S2080State) -> begin _ = begin S2704 = 'Tianjiupai.Logger':'info'({"terminate (user_id: ~p)", 1}, {maps:get(user_id, maps:get(settings, S2080State))}), S2704(<<"UserServer.sest">>, 240) end, sesterl_internal_prim:'return'(ok) end.
