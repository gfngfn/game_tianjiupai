-module('Tianjiupai.UserServer.Callback').
-export(['init'/1, 'monitor_room'/1, 'reply'/2, 'no_reply'/1, 'handle_call'/3, 'handle_cast'/2, 'is_room_down'/2, 'handle_timeout'/1, 'handle_down'/4, 'handle_info'/2, 'terminate'/2]).
'init'(S2355InitArg) -> begin {S2356UserId, S2357UserName} = S2355InitArg, begin S2358Settings = #{user_id => S2356UserId, user_name => S2357UserName}, begin S2359State = #{belongs_to => 'error', creates => [], settings => S2358Settings}, 'SesterlStdlib.GenServer':'init_ok'(S2359State, #{timeout => 'Tianjiupai.Constants':'user_expiration_timeout'()}) end end end.
'monitor_room'(S2361RoomId) -> 'Tianjiupai.Room':'monitor'(S2361RoomId).
'reply'(S2363Response, S2364State) -> 'SesterlStdlib.GenServer':'reply'(S2363Response, S2364State, #{timeout => 'Tianjiupai.Constants':'user_expiration_timeout'()}).
'no_reply'(S2366State) -> 'SesterlStdlib.GenServer':'no_reply'(S2366State, #{timeout => 'Tianjiupai.Constants':'user_expiration_timeout'()}).
'handle_call'(S2368Req, _, S2369State) -> case S2368Req of 'get_user_state' -> begin S2372BelongsTo = 'SesterlStdlib.Option':'map'(fun(S2370Pair) -> begin {S2371RoomId, _} = S2370Pair, S2371RoomId end end, maps:get(belongs_to, S2369State)), begin S2373UserState = #{belongs_to => S2372BelongsTo, user_name => maps:get(user_name, maps:get(settings, S2369State))}, 'Tianjiupai.UserServer.Callback':'reply'({'user_state_got', S2373UserState}, S2369State) end end; {'set_room', S2374RoomIdOpt} -> case S2374RoomIdOpt of 'error' -> begin _ = case maps:get(belongs_to, S2369State) of 'error' -> sesterl_internal_prim:'return'(ok); {'ok', {_, S2375MrefRoom}} -> 'SesterlStdlib.MonitorRef':'demonitor'(S2375MrefRoom) end, begin S2376State = maps:put(belongs_to, 'error', S2369State), 'Tianjiupai.UserServer.Callback':'reply'({'room_set', true}, S2376State) end end; {'ok', S2377RoomId} -> begin S2378MrefOpt = 'Tianjiupai.UserServer.Callback':'monitor_room'(S2377RoomId), case S2378MrefOpt of 'error' -> 'Tianjiupai.UserServer.Callback':'reply'({'room_set', false}, S2369State); {'ok', S2379MrefRoomNew} -> begin _ = case maps:get(belongs_to, S2369State) of 'error' -> sesterl_internal_prim:'return'(ok); {'ok', {_, S2380MrefRoom}} -> 'SesterlStdlib.MonitorRef':'demonitor'(S2380MrefRoom) end, begin S2381State = maps:put(belongs_to, {'ok', {S2377RoomId, S2379MrefRoomNew}}, S2369State), 'Tianjiupai.UserServer.Callback':'reply'({'room_set', true}, S2381State) end end end end end; {'create_room', S2382RoomId, S2383RoomName} -> begin S2384Creates = maps:get(creates, S2369State), case ('SesterlStdlib.List':'length'(S2384Creates) >= 'Tianjiupai.Constants':'maximum_num_rooms_per_user'()) of true -> 'Tianjiupai.UserServer.Callback':'reply'({'room_created', {'error', 'SesterlStdlib.RawValue':'forget'(<<"capacity per user exceeded"/utf8>>)}}, S2369State); false -> begin S2385Res = 'Tianjiupai.RoomServerSup':'start_child'(S2382RoomId, S2383RoomName), case S2385Res of {'ok', S2386Proc} -> begin S2387Mref = 'SesterlStdlib.MonitorRef':'monitor'('Tianjiupai.RoomServer':'as_pid'(S2386Proc)), begin _ = begin S2388Settings = maps:get(settings, S2369State), begin S3357 = 'Tianjiupai.Logger':'debug'({"create room (room_id: ~s, user_id: ~s, user_name: ~s)", 3}, {S2382RoomId, maps:get(user_id, S2388Settings), maps:get(user_name, S2388Settings)}), S3357(<<"UserServer.sest">>, 151) end end, 'Tianjiupai.UserServer.Callback':'reply'({'room_created', {'ok', S2386Proc}}, maps:put(creates, [{S2382RoomId, S2387Mref} | S2384Creates], S2369State)) end end; {'error', S2389Err} -> 'Tianjiupai.UserServer.Callback':'reply'({'room_created', {'error', S2389Err}}, S2369State) end end end end end.
'handle_cast'(S2391Msg, S2392State) -> begin 'delete_user' = S2391Msg, begin _ = begin S3359 = 'Tianjiupai.Logger':'info'({"stop (user_id: ~s)", 1}, {maps:get(user_id, maps:get(settings, S2392State))}), S3359(<<"UserServer.sest">>, 164) end, 'SesterlStdlib.GenServer':'no_reply_and_stop'('SesterlStdlib.StopReason':'normal'(), S2392State) end end.
'is_room_down'(S2394Mref, S2395State) -> case maps:get(belongs_to, S2395State) of 'error' -> false; {'ok', {_, S2396MrefRoom}} -> 'SesterlStdlib.MonitorRef':'equal'(S2394Mref, S2396MrefRoom) end.
'handle_timeout'(S2398State) -> begin _ = begin S3362 = 'Tianjiupai.Logger':'info'({"timeout (user_id: ~s)", 1}, {maps:get(user_id, maps:get(settings, S2398State))}), S3362(<<"UserServer.sest">>, 175) end, 'SesterlStdlib.GenServer':'no_reply_and_stop'('SesterlStdlib.StopReason':'normal'(), S2398State) end.
'handle_down'(S2400Mref, S2401Pid, S2402Reason, S2403State) -> begin S2404UserId = maps:get(user_id, maps:get(settings, S2403State)), begin S2412State = case 'Tianjiupai.UserServer.Callback':'is_room_down'(S2400Mref, S2403State) of true -> begin _ = begin S3364 = 'Tianjiupai.Logger':'debug'({"room closed (user_id: ~s, reason: ~p)", 2}, {S2404UserId, S2402Reason}), S3364(<<"UserServer.sest">>, 182) end, sesterl_internal_prim:'return'(maps:put(belongs_to, 'error', S2403State)) end; false -> begin {S2409DeletedRoomOpt, S2410Acc} = 'SesterlStdlib.List':'foldl'(fun({S2405DeletedRoomOpt, S2406Acc}, {S2407RoomId, S2408Mref0}) -> case 'SesterlStdlib.MonitorRef':'equal'(S2408Mref0, S2400Mref) of true -> {{'ok', S2407RoomId}, S2406Acc}; false -> {S2405DeletedRoomOpt, [{S2407RoomId, S2408Mref0} | S2406Acc]} end end, {'error', []}, maps:get(creates, S2403State)), case S2409DeletedRoomOpt of 'error' -> begin _ = begin S3365 = 'Tianjiupai.Logger':'warning'({"unexpected down (user_id: ~s, mref: ~p, pid: ~p, reason: ~p, state: ~p)", 5}, {S2404UserId, S2400Mref, S2401Pid, S2402Reason, S2403State}), S3365(<<"UserServer.sest">>, 199) end, sesterl_internal_prim:'return'(S2403State) end; {'ok', S2411RoomId} -> begin _ = begin S3366 = 'Tianjiupai.Logger':'debug'({"room deleted (user_id: ~s, room_id: ~s, mref: ~p, pid: ~p, reason: ~p, state: ~p)", 6}, {S2404UserId, S2411RoomId, S2400Mref, S2401Pid, S2402Reason, S2403State}), S3366(<<"UserServer.sest">>, 207) end, sesterl_internal_prim:'return'(maps:put(creates, 'SesterlStdlib.List':'reverse'(S2410Acc), S2403State)) end end end end, 'Tianjiupai.UserServer.Callback':'no_reply'(S2412State) end end.
'handle_info'(S2414Info, S2415State) -> begin _ = begin S3368 = 'Tianjiupai.Logger':'warning'({"unexpected info (info: ~p, state: ~p)", 2}, {S2414Info, S2415State}), S3368(<<"UserServer.sest">>, 218) end, 'Tianjiupai.UserServer.Callback':'no_reply'(S2415State) end.
'terminate'(S2417Reason, S2418State) -> begin _ = begin S3370 = 'Tianjiupai.Logger':'debug'({"terminate (reason: ~p, user_id: ~s)", 2}, {S2417Reason, maps:get(user_id, maps:get(settings, S2418State))}), S3370(<<"UserServer.sest">>, 222) end, sesterl_internal_prim:'return'(ok) end.
