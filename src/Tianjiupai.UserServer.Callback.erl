-module('Tianjiupai.UserServer.Callback').
-export(['init'/1, 'monitor_room'/1, 'reply'/2, 'no_reply'/1, 'handle_call'/3, 'handle_cast'/2, 'is_room_down'/2, 'handle_timeout'/1, 'handle_down'/4, 'handle_info'/2, 'terminate'/2]).
'init'(S2342InitArg) -> begin {S2343UserId, S2344UserName} = S2342InitArg, begin S2345Settings = #{user_id => S2343UserId, user_name => S2344UserName}, begin S2346State = #{belongs_to => 'error', creates => [], settings => S2345Settings}, 'SesterlStdlib.GenServer':'init_ok'(S2346State, #{timeout => 'Tianjiupai.Constants':'user_expiration_timeout'()}) end end end.
'monitor_room'(S2348RoomId) -> 'Tianjiupai.Room':'monitor'(S2348RoomId).
'reply'(S2350Response, S2351State) -> 'SesterlStdlib.GenServer':'reply'(S2350Response, S2351State, #{timeout => 'Tianjiupai.Constants':'user_expiration_timeout'()}).
'no_reply'(S2353State) -> 'SesterlStdlib.GenServer':'no_reply'(S2353State, #{timeout => 'Tianjiupai.Constants':'user_expiration_timeout'()}).
'handle_call'(S2355Req, _, S2356State) -> case S2355Req of 'get_user_state' -> begin S2359BelongsTo = 'SesterlStdlib.Option':'map'(fun(S2357Pair) -> begin {S2358RoomId, _} = S2357Pair, S2358RoomId end end, maps:get(belongs_to, S2356State)), begin S2360UserState = #{belongs_to => S2359BelongsTo, user_name => maps:get(user_name, maps:get(settings, S2356State))}, 'Tianjiupai.UserServer.Callback':'reply'({'user_state_got', S2360UserState}, S2356State) end end; {'set_room', S2361RoomIdOpt} -> case S2361RoomIdOpt of 'error' -> begin _ = case maps:get(belongs_to, S2356State) of 'error' -> sesterl_internal_prim:'return'(ok); {'ok', {_, S2362MrefRoom}} -> 'SesterlStdlib.MonitorRef':'demonitor'(S2362MrefRoom) end, begin S2363State = maps:put(belongs_to, 'error', S2356State), 'Tianjiupai.UserServer.Callback':'reply'({'room_set', true}, S2363State) end end; {'ok', S2364RoomId} -> begin S2365MrefOpt = 'Tianjiupai.UserServer.Callback':'monitor_room'(S2364RoomId), case S2365MrefOpt of 'error' -> 'Tianjiupai.UserServer.Callback':'reply'({'room_set', false}, S2356State); {'ok', S2366MrefRoomNew} -> begin _ = case maps:get(belongs_to, S2356State) of 'error' -> sesterl_internal_prim:'return'(ok); {'ok', {_, S2367MrefRoom}} -> 'SesterlStdlib.MonitorRef':'demonitor'(S2367MrefRoom) end, begin S2368State = maps:put(belongs_to, {'ok', {S2364RoomId, S2366MrefRoomNew}}, S2356State), 'Tianjiupai.UserServer.Callback':'reply'({'room_set', true}, S2368State) end end end end end; {'create_room', S2369RoomId, S2370RoomName} -> begin S2371Creates = maps:get(creates, S2356State), case ('SesterlStdlib.List':'length'(S2371Creates) >= 'Tianjiupai.Constants':'maximum_num_rooms_per_user'()) of true -> 'Tianjiupai.UserServer.Callback':'reply'({'room_created', {'error', 'SesterlStdlib.RawValue':'forget'(<<"capacity per user exceeded"/utf8>>)}}, S2356State); false -> begin S2372Res = 'Tianjiupai.RoomServerSup':'start_child'(S2369RoomId, S2370RoomName), case S2372Res of {'ok', S2373Proc} -> begin S2374Mref = 'SesterlStdlib.MonitorRef':'monitor'('Tianjiupai.RoomServer':'as_pid'(S2373Proc)), begin _ = begin S2375Settings = maps:get(settings, S2356State), begin S3248 = 'Tianjiupai.Logger':'debug'({"create room (room_id: ~s, user_id: ~s, user_name: ~s)", 3}, {S2369RoomId, maps:get(user_id, S2375Settings), maps:get(user_name, S2375Settings)}), S3248(<<"UserServer.sest">>, 151) end end, 'Tianjiupai.UserServer.Callback':'reply'({'room_created', {'ok', S2373Proc}}, maps:put(creates, [{S2369RoomId, S2374Mref} | S2371Creates], S2356State)) end end; {'error', S2376Err} -> 'Tianjiupai.UserServer.Callback':'reply'({'room_created', {'error', S2376Err}}, S2356State) end end end end end.
'handle_cast'(S2378Msg, S2379State) -> begin 'delete_user' = S2378Msg, begin _ = begin S3250 = 'Tianjiupai.Logger':'info'({"stop (user_id: ~s)", 1}, {maps:get(user_id, maps:get(settings, S2379State))}), S3250(<<"UserServer.sest">>, 164) end, 'SesterlStdlib.GenServer':'no_reply_and_stop'('SesterlStdlib.StopReason':'normal'(), S2379State) end end.
'is_room_down'(S2381Mref, S2382State) -> case maps:get(belongs_to, S2382State) of 'error' -> false; {'ok', {_, S2383MrefRoom}} -> 'SesterlStdlib.MonitorRef':'equal'(S2381Mref, S2383MrefRoom) end.
'handle_timeout'(S2385State) -> begin _ = begin S3253 = 'Tianjiupai.Logger':'info'({"timeout (user_id: ~s)", 1}, {maps:get(user_id, maps:get(settings, S2385State))}), S3253(<<"UserServer.sest">>, 175) end, 'SesterlStdlib.GenServer':'no_reply_and_stop'('SesterlStdlib.StopReason':'normal'(), S2385State) end.
'handle_down'(S2387Mref, S2388Pid, S2389Reason, S2390State) -> begin S2391UserId = maps:get(user_id, maps:get(settings, S2390State)), begin S2399State = case 'Tianjiupai.UserServer.Callback':'is_room_down'(S2387Mref, S2390State) of true -> begin _ = begin S3255 = 'Tianjiupai.Logger':'debug'({"room closed (user_id: ~s, reason: ~p)", 2}, {S2391UserId, S2389Reason}), S3255(<<"UserServer.sest">>, 182) end, sesterl_internal_prim:'return'(maps:put(belongs_to, 'error', S2390State)) end; false -> begin {S2396DeletedRoomOpt, S2397Acc} = 'SesterlStdlib.List':'foldl'(fun({S2392DeletedRoomOpt, S2393Acc}, {S2394RoomId, S2395Mref0}) -> case 'SesterlStdlib.MonitorRef':'equal'(S2395Mref0, S2387Mref) of true -> {{'ok', S2394RoomId}, S2393Acc}; false -> {S2392DeletedRoomOpt, [{S2394RoomId, S2395Mref0} | S2393Acc]} end end, {'error', []}, maps:get(creates, S2390State)), case S2396DeletedRoomOpt of 'error' -> begin _ = begin S3256 = 'Tianjiupai.Logger':'warning'({"unexpected down (user_id: ~s, mref: ~p, pid: ~p, reason: ~p, state: ~p)", 5}, {S2391UserId, S2387Mref, S2388Pid, S2389Reason, S2390State}), S3256(<<"UserServer.sest">>, 199) end, sesterl_internal_prim:'return'(S2390State) end; {'ok', S2398RoomId} -> begin _ = begin S3257 = 'Tianjiupai.Logger':'debug'({"room deleted (user_id: ~s, room_id: ~s, mref: ~p, pid: ~p, reason: ~p, state: ~p)", 6}, {S2391UserId, S2398RoomId, S2387Mref, S2388Pid, S2389Reason, S2390State}), S3257(<<"UserServer.sest">>, 207) end, sesterl_internal_prim:'return'(maps:put(creates, 'SesterlStdlib.List':'reverse'(S2397Acc), S2390State)) end end end end, 'Tianjiupai.UserServer.Callback':'no_reply'(S2399State) end end.
'handle_info'(S2401Info, S2402State) -> begin _ = begin S3259 = 'Tianjiupai.Logger':'warning'({"unexpected info (info: ~p, state: ~p)", 2}, {S2401Info, S2402State}), S3259(<<"UserServer.sest">>, 218) end, 'Tianjiupai.UserServer.Callback':'no_reply'(S2402State) end.
'terminate'(S2404Reason, S2405State) -> begin _ = begin S3261 = 'Tianjiupai.Logger':'debug'({"terminate (reason: ~p, user_id: ~s)", 2}, {S2404Reason, maps:get(user_id, maps:get(settings, S2405State))}), S3261(<<"UserServer.sest">>, 222) end, sesterl_internal_prim:'return'(ok) end.
