-module('Tianjiupai.UserServer.Callback').
-export(['init'/1, 'monitor_room'/1, 'monitor'/1, 'demonitor'/1, 'handle_call'/3, 'handle_cast'/2, 'check_down_message'/2, 'check_room_down'/2, 'check_websocket_down'/2, 'handle_info'/2, 'terminate'/1]).
'init'(S2025InitArg) -> begin {S2026UserId, S2027UserName} = S2025InitArg, begin S2028Settings = #{user_id => S2026UserId, user_name => S2027UserName}, begin S2029State = #{belongs_to => 'error', settings => S2028Settings, websocket_connection => 'error'}, 'SesterlStdlib.GenServer':'init_ok'(S2029State) end end end.
'monitor_room'(S2031RoomId) -> 'Tianjiupai.Room':'monitor'(S2031RoomId).
      monitor(WsProc) ->
          erlang:monitor(process, WsProc).
    
      demonitor(MonitorRef) ->
          erlang:demonitor(MonitorRef).
    
'handle_call'(S2035Req, S2036From, S2037State) -> case S2035Req of 'get_user_state' -> begin S2040BelongsTo = 'SesterlStdlib.Option':'map'(fun(S2038Pair) -> begin {S2039RoomId, _} = S2038Pair, S2039RoomId end end, maps:get(belongs_to, S2037State)), begin S2041UserState = #{belongs_to => S2040BelongsTo, user_name => maps:get(user_name, maps:get(settings, S2037State))}, 'SesterlStdlib.GenServer':'reply'({'user_state_got', S2041UserState}, S2037State) end end; {'set_room', S2042RoomIdOpt} -> case S2042RoomIdOpt of 'error' -> begin S2044Dummy = case maps:get(belongs_to, S2037State) of 'error' -> sesterl_internal_prim:'return'(ok); {'ok', {_, S2043MonitorRef}} -> 'Tianjiupai.UserServer.Callback':'demonitor'(S2043MonitorRef) end, begin S2045State = maps:put(belongs_to, 'error', S2037State), 'SesterlStdlib.GenServer':'reply'({'room_set', true}, S2045State) end end; {'ok', S2046RoomId} -> begin S2047MonitorRefOpt = 'Tianjiupai.UserServer.Callback':'monitor_room'(S2046RoomId), case S2047MonitorRefOpt of 'error' -> 'SesterlStdlib.GenServer':'reply'({'room_set', false}, S2037State); {'ok', S2048MonitorRefNew} -> begin S2050Dummy = case maps:get(belongs_to, S2037State) of 'error' -> sesterl_internal_prim:'return'(ok); {'ok', {_, S2049MonitorRef}} -> 'Tianjiupai.UserServer.Callback':'demonitor'(S2049MonitorRef) end, begin S2051State = maps:put(belongs_to, {'ok', {S2046RoomId, S2048MonitorRefNew}}, S2037State), 'SesterlStdlib.GenServer':'reply'({'room_set', true}, S2051State) end end end end end; {'set_websocket_connection', S2052WsProc} -> begin S2054Dummy = case maps:get(websocket_connection, S2037State) of 'error' -> sesterl_internal_prim:'return'(ok); {'ok', S2053MonitorRef} -> 'Tianjiupai.UserServer.Callback':'demonitor'(S2053MonitorRef) end, begin S2055MonitorRefNew = 'Tianjiupai.UserServer.Callback':'monitor'(S2052WsProc), begin S2056State = maps:put(websocket_connection, {'ok', S2055MonitorRefNew}, S2037State), begin S2058Dummy = case maps:get(belongs_to, S2056State) of 'error' -> sesterl_internal_prim:'return'(ok); {'ok', {S2057RoomId, _}} -> 'Tianjiupai.Room':'notify_connected'(S2057RoomId, maps:get(user_id, maps:get(settings, S2056State))) end, 'SesterlStdlib.GenServer':'reply'('websocket_connection_set', S2056State) end end end end end.
'handle_cast'(S2060Msg, S2061State) -> begin _ = begin S2697 = 'Tianjiupai.Logger':'warning'({"unexpected cast message (message: ~p, state: ~p)", 2}, {S2060Msg, S2061State}), S2697(<<"UserServer.sest">>, 175) end, 'SesterlStdlib.GenServer':'no_reply'(S2061State) end.
      check_down_message(Info, MonitorRef) ->
        case Info of
            {'DOWN', MonitorRef, process, _Pid, Reason} -> {ok, Reason};
            _                                           -> error
        end.
    
'check_room_down'(S2064Info, S2065State) -> case maps:get(belongs_to, S2065State) of 'error' -> 'error'; {'ok', {_, S2066MonitorRef}} -> 'Tianjiupai.UserServer.Callback':'check_down_message'(S2064Info, S2066MonitorRef) end.
'check_websocket_down'(S2068Info, S2069State) -> case maps:get(websocket_connection, S2069State) of 'error' -> 'error'; {'ok', S2070MonitorRef} -> 'Tianjiupai.UserServer.Callback':'check_down_message'(S2068Info, S2070MonitorRef) end.
'handle_info'(S2072Info, S2073State) -> begin S2074UserId = maps:get(user_id, maps:get(settings, S2073State)), begin S2079State = case 'Tianjiupai.UserServer.Callback':'check_room_down'(S2072Info, S2073State) of {'ok', S2075Reason} -> begin _ = begin S2701 = 'Tianjiupai.Logger':'info'({"room closed (user_id: ~p, reason: ~p)", 2}, {S2074UserId, S2075Reason}), S2701(<<"UserServer.sest">>, 204) end, sesterl_internal_prim:'return'(maps:put(belongs_to, 'error', S2073State)) end; 'error' -> case 'Tianjiupai.UserServer.Callback':'check_websocket_down'(S2072Info, S2073State) of {'ok', S2076Reason} -> begin _ = begin S2702 = 'Tianjiupai.Logger':'info'({"WebSocket connection closed (user_id: ~p, reason: ~p)", 2}, {S2074UserId, S2076Reason}), S2702(<<"UserServer.sest">>, 214) end, begin S2078Dummy = case maps:get(belongs_to, S2073State) of 'error' -> sesterl_internal_prim:'return'(ok); {'ok', {S2077RoomId, _}} -> 'Tianjiupai.Room':'notify_disconnected'(S2077RoomId, S2074UserId) end, sesterl_internal_prim:'return'(maps:put(websocket_connection, 'error', S2073State)) end end; 'error' -> begin _ = begin S2703 = 'Tianjiupai.Logger':'info'({"unexpected info (user_id: ~p, message: ~p)", 2}, {S2074UserId, S2072Info}), S2703(<<"UserServer.sest">>, 228) end, sesterl_internal_prim:'return'(S2073State) end end end, 'SesterlStdlib.GenServer':'no_reply'(S2079State) end end.
'terminate'(S2081State) -> begin _ = begin S2705 = 'Tianjiupai.Logger':'info'({"terminate (user_id: ~p)", 1}, {maps:get(user_id, maps:get(settings, S2081State))}), S2705(<<"UserServer.sest">>, 240) end, sesterl_internal_prim:'return'(ok) end.
