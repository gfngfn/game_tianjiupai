import Types
import UserServerSup
import UserServer
import Room

module User = struct
  open Stdlib
  open Types

  val generate_user_id<$a> : fun() -> [$a]user_id = external 0 ```
    generate_user_id() ->
        Uuid = uuid:get_v4(),
        list_to_binary(uuid:uuid_to_string(Uuid)).
  ```

  val create(user_name) = act
    do user_id <- generate_user_id() in
    UserServerSup.start_child(-user_id user_id, -user_name user_name)

  val exists(user_id) = act
    UserServer.exists(user_id)

  val get_name(user_id) = act
    UserServer.get_name(user_id)

  val get_info(user_id) = act
    UserServer.get_user_state(user_id)

  val set_room(user_id, room_id) = act
    UserServer.set_room(user_id, room_id)

  val get_room(user_id) = act
    UserServer.get_room(user_id)

  val send_chat(user_id, text) = act
    do opt <- get_room(user_id) in
    case opt of
    | None          -> return(None)
    | Some(room_id) -> Room.send_chat(room_id, user_id, text)
    end

  val set_websocket_connection(user_id, ws_pid) = act
    UserServer.set_websocket_connection(user_id, ws_pid)
end
