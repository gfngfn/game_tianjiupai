import Models

module Card = struct

  type wen = Models.card_wen

  type design = Models.design

  type wu_number = Models.card_wu_number

  type wu = Models.card_wu

  type t = Models.card

  type big = Models.card_big

  val wen_greater(wen1, wen2) =
    wen1 > wen2

  val wen_equal(wen1, wen2) =
    wen1 == wen2

  val wu_number_greater(wunum1, wunum2) =
    wunum1 > wunum2

  val wu_greater(wu1, wu2) =
    wu1.number > wu2.number

  val wu_equal(wu1, wu2) =
    wu1.number == wu2.number

  val big_greater : fun(big, big) -> bool = external 2 ```
    big_greater(Big1, Big2) ->
        Big1 > Big2.
  ```

  val sort : fun(list<t>) -> list<t> = external 1 ```
    sort(Cards) ->
        lists:sort(
            fun(Card1, Card2) ->
                case {Card1, Card2} of
                    {{wu, #{number := Wunum1, design := B1}},
                     {wu, #{number := Wunum2, design := B2}}} ->
                        case Wunum1 =:= Wunum2 of
                            true  -> B1 =< B2;
                            false -> Wunum1 < Wunum2
                        end;
                    {{wen, Wen1}, {wen, Wen2}} ->
                        Wen1 =< Wen2;
                    {{wen, _}, {wu, _}} ->
                        true;
                    {{wu, _}, {wen, _}} ->
                        false
                end
            end,
            Cards).
  ```

  val big_to_wen_and_wu(big : big) : {wen, wu_number} =
    case big of
    | Models.BigA -> {8, 5}
    | Models.BigB -> {9, 7}
    | Models.BigC -> {10, 8}
    | Models.BigD -> {11, 9}
    end

  val wen_and_wu_to_big(wen : wen, wunum : wu_number) : option<big> =
    case {wen, wunum} of
    | {8, 5}  -> Some(Models.BigA)
    | {9, 7}  -> Some(Models.BigB)
    | {10, 8} -> Some(Models.BigC)
    | {11, 9} -> Some(Models.BigD)
    | _       -> None
    end

end
