module Card = struct

  type wen = int

  type wu = int

  type t =
    | Wen(wen)
    | Wu(wu)

  type big =
    | Big1
    | Big2
    | Big3
    | Big4

  val wen_greater(wen1, wen2) =
    wen1 > wen2

  val wu_greater(wu1, wu2) =
    wu1 > wu2

  val big_greater : fun(big, big) -> bool = external 2 ```
    big_greater(Big1, Big2) ->
        Big1 > Big2.
  ```

  val sort : fun(list<t>) -> list<t> = external 1 ```
    sort(Cards) ->
        lists:sort(Cards).
  ```

  val big_to_wen_and_wu(big) : {wen, wu} =
    case big of
    | Big1 -> {8, 5}
    | Big2 -> {9, 7}
    | Big3 -> {10, 8}
    | Big4 -> {11, 9}
    end

end
