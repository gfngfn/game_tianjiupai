module Card = struct

  type wen = int

  type design = bool

  type wu_number = int

  type wu = {
    design : design,
    number : wu_number,
  }

  type t =
    | Wen(wen)
    | Wu(wu)

  type big =
    | Big1
    | Big2
    | Big3
    | Big4

  val wen_greater(wen1, wen2) =
    wen1 > wen2

  val wen_equal(wen1, wen2) =
    wen1 == wen2

  val wu_number_greater(wunum1, wunum2) =
    wunum1 > wunum2

  val wu_greater(wu1, wu2) =
    wu1.number > wu2.number

  val wu_equal(wu1, wu2) =
    wu1.number == wu2.number

  val big_greater : fun(big, big) -> bool = external 2 ```
    big_greater(Big1, Big2) ->
        Big1 > Big2.
  ```

  val sort : fun(list<t>) -> list<t> = external 1 ```
    sort(Cards) ->
        lists:sort(Cards).
  ```

  val big_to_wen_and_wu(big : big) : {wen, wu_number} =
    case big of
    | Big1 -> {8, 5}
    | Big2 -> {9, 7}
    | Big3 -> {10, 8}
    | Big4 -> {11, 9}
    end

  val wen_and_wu_to_big(wen : wen, wunum : wu_number) : option<big> =
    case {wen, wunum} of
    | {8, 5}  -> Some(Big1)
    | {9, 7}  -> Some(Big2)
    | {10, 8} -> Some(Big3)
    | {11, 9} -> Some(Big4)
    | _       -> None
    end

end
