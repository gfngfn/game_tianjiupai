import RoomServerSup
import UserServerSup
import PlazaServer
import RoomResourceServer

module Sup = struct
  open Stdlib

  module SS = Supervisor.Static

  module Callback = struct

    type child_id = binary
    type init_arg = unit
    type info = RawValue.t
    type global = unit

    val start_room_server_sup() = act
      SS.make_child_proc(fun() -> act
        do res <- RoomServerSup.start_link() in
        return(Result.map(RoomServerSup.as_pid, res))
      end)

    val start_user_server_sup() = act
      SS.make_child_proc(fun() -> act
        do res <- UserServerSup.start_link() in
        return(Result.map(UserServerSup.as_pid, res))
      end)

    val start_plaza_server() = act
      SS.make_child_proc(fun() -> act
        do res <- PlazaServer.start_link() in
        return(Result.map(PlazaServer.as_pid, res))
      end)

    val start_room_resource_server() = act
      SS.make_child_proc(fun() -> act
        do res <- RoomResourceServer.start_link() in
        return(Result.map(RoomResourceServer.as_pid, res))
      end)

    val init(_) = act
      let sup_flags = SS.make_sup_flags(?strategy SS.OneForAll) in
      let child_specs =
        [
          SS.make_child_spec(
            -id    "room_server_sup",
            -start (freeze start_room_server_sup()),
            ?type  Supervisor.Supervisor
          ),
          SS.make_child_spec(
            -id    "user_server_sup",
            -start (freeze start_user_server_sup()),
            ?type  Supervisor.Supervisor
          ),
          SS.make_child_spec(
            -id    "plaza_server",
            -start (freeze start_plaza_server()),
            ?type  Supervisor.Worker
          ),
          SS.make_child_spec(
            -id    "room_resource_server",
            -start (freeze start_room_resource_server()),
            ?type  Supervisor.Worker
          ),
        ]
      in
      SS.init_ok(sup_flags, child_specs)
  end

  module Impl = SS.Make(Callback)

  val start_link() = act
    Impl.start_link({})

end
