import Types
import Quad
import Inning

module RoomServer :> sig

  type info :: o

  type proc :: o

  val start_link<$a> : fun(Types.room_id, binary) -> [$a]option<proc>

  val get_whole_state<$a> : fun(Types.room_id) -> [$a]option<Types.whole_room_state>

end = struct

  include Types

  type log =
    | Comment(user_id, binary)
    | Entered(user_id)
    | Exited(user_id)
    | GameStart

  type settings = {
    room_id   : room_id,
    room_name : binary,
  }

  type waiting_state = {
    members : list<user_id>,
  }

  type whole_game_state = {
    meta        : game_meta,
    inning      : Inning.t,
    snapshot_id : snapshot_id,
  }

  type internal_room_state =
    | InternalWaiting(waiting_state)
    | InternalPlaying(whole_game_state)

  type observable_room_state =
    | Waiting(list<user_id>)
    | Playing(observable_game_state)

  type request_impl =
    | GetWholeState
    | GetPersonalState(user_id)
    | SendChat(user_id, binary)
    | Attend(user_id)
    | Exit(user_id)

  type response_impl =
    | WholeState(whole_room_state)
    | PersonalState

  module Callback = struct
    type init_arg = {room_id, binary}

    type request = request_impl

    type response = response_impl

    type cast_message =
      | DummyCastMessage

    type info =
      | DummyInfo

    type state = {
      settings      : settings,
      reversed_logs : list<log>,
      room_state    : internal_room_state,
    }

    val init(init_arg) = act
      let {room_id, room_name} = init_arg in
      let settings = {room_id = room_id, room_name = room_name} in
      Stdlib.GenServer.init_ok({
        settings      = settings,
        reversed_logs = [],
        room_state    = InternalWaiting({members = []})
      })

    val get_members_from_state(room_state : internal_room_state) : {bool, list<user_id>} =
      case room_state of
      | InternalWaiting(waiting_state) ->
          {false, waiting_state.members}
      | InternalPlaying(whole_game_state) ->
          let game_players = Quad.to_list(whole_game_state.meta.players) in
          let members = Stdlib.List.map(fun(g) -> g.user_id end, game_players) in
          {true, members}
      end

    val make_whole_room_state(state : state) : whole_room_state =
      let settings = state.settings in
      let {is_playing, members} = get_members_from_state(state.room_state) in
      {
        room_id    = settings.room_id,
        room_name  = settings.room_name,
        is_playing = is_playing,
        members    = members,
      }

    val handle_call(req, from, state) = act
      case req of
      | GetWholeState ->
          let whole_room_state = make_whole_room_state(state) in
          Stdlib.GenServer.reply(WholeState(whole_room_state), state)
      end

    val handle_cast(msg, state) = act
      let _ = print_debug({"unexpected cast message", msg}) in
      Stdlib.GenServer.no_reply(state)

    val handle_info(info, state) = act
      let _ = print_debug({"unexpected info", info}) in
      Stdlib.GenServer.no_reply(state)

    val terminate(state) = act
      let _ = print_debug({"terminate", state}) in
      return({})
  end

  module Impl = Stdlib.GenServer.Make(Callback)

  type info = Callback.info

  type proc = Impl.proc

  val name : fun(room_id) -> Stdlib.RawValue.t = external 1 ```
    name(RoomId) ->
        {?MODULE, RoomId}.
  ```

  val get_proc<$a> : fun(room_id) -> [$a]option<proc> = external 1 ```
    get_proc(RoomId) ->
        case global:whereis_name(name(RoomId)) of
            undefined -> none;
            Pid       -> {some, Pid}
        end.
  ```

  val start_link_impl<$a> : fun(pack Stdlib.GenServer.Behaviour, Stdlib.RawValue.t, Callback.init_arg) -> [$a]option<proc> = external 3 ```
    start_link_impl(CallbackModule, Name, InitArg) ->
        case gen_server:start_link({global, Name}, CallbackModule, InitArg, []) of
            {ok, Pid} -> {some, Pid};
            _         -> none
        end.
  ```

  val start_link<$a>(room_id : room_id, room_name : binary) : [$a]option<proc> = act
    start_link_impl(pack Callback : Stdlib.GenServer.Behaviour, name(room_id), {room_id, room_name})

  val call<$a, $ret>(
    room_id : room_id,
    req     : request_impl,
    f       : fun(response_impl) -> [$a]option<$ret>
  ) : [$a]option<$ret> = act
    do proc_opt <- get_proc(room_id) in
    case proc_opt of
    | None ->
        return(None)
    | Some(proc) ->
        do resp <- Impl.call(proc, req) in
        f(resp)
    end

  val get_whole_state<$a>(room_id : room_id) : [$a]option<whole_room_state> = act
    call(room_id, GetWholeState, fun(resp) -> act
      case resp of
      | WholeState(whole_state) -> return(Some(whole_state))
      end
    end)

  val get_personal_state<$a>(room_id : room_id, user_id : user_id) : [$a]option<unit> = act
    call(room_id, GetPersonalState(user_id), fun(resp) -> act
      case resp of
      | PersonalState -> return(Some({}))
      end
    end)
end
