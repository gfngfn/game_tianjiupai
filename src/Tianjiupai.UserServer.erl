-module('Tianjiupai.UserServer').
-export(['get_proc'/1, 'exists'/1, 'delete'/1, 'start_link'/2, 'as_pid'/1, 'from_pid'/1, 'call'/3, 'get_user_state'/1, 'get_name'/1, 'get_room'/1, 'set_room'/2, 'create_room'/3]).
'get_proc'(S2472UserId) -> 'Tianjiupai.UserServer.Impl':'where_is_global'(S2472UserId).
'exists'(S2474UserId) -> begin S2475Opt = 'Tianjiupai.UserServer':'get_proc'(S2474UserId), case S2475Opt of 'error' -> sesterl_internal_prim:'return'(false); {'ok', _} -> sesterl_internal_prim:'return'(true) end end.
'delete'(S2477UserId) -> begin S2478Opt = 'Tianjiupai.UserServer':'get_proc'(S2477UserId), case S2478Opt of 'error' -> sesterl_internal_prim:'return'(false); {'ok', S2479Proc} -> begin ok = 'Tianjiupai.UserServer.Impl':'cast'(S2479Proc, 'delete_user'), sesterl_internal_prim:'return'(true) end end end.
'start_link'(S2481UserId, S2482UserName) -> 'Tianjiupai.UserServer.Impl':'start_link_name'({S2481UserId, S2482UserName}, {'global', S2481UserId}).
'as_pid'(S2484Proc) -> 'Tianjiupai.UserServer.Impl':'as_pid'(S2484Proc).
'from_pid'(S2486Pid) -> 'Tianjiupai.UserServer.Impl':'from_pid'(S2486Pid).
'call'(S2488UserId, S2489Req, S2490F) -> begin S2491ProcOpt = 'Tianjiupai.UserServer':'get_proc'(S2488UserId), case S2491ProcOpt of 'error' -> sesterl_internal_prim:'return'({'error', 'SesterlStdlib.RawValue':'forget'({<<"no proc"/utf8>>, S2488UserId})}); {'ok', S2492Proc} -> begin S2493RespResult = 'Tianjiupai.UserServer.Impl':'call'(S2492Proc, S2489Req), case S2493RespResult of {'ok', S2494Resp} -> S2490F(S2494Resp); {'error', S2495Err} -> begin _ = begin S3393 = 'Tianjiupai.Logger':'warning'({"call failed (user_id: ~s, req: ~p, proc: ~p, error: ~p)", 4}, {S2488UserId, S2489Req, S2492Proc, S2495Err}), S3393(<<"UserServer.sest">>, 277) end, sesterl_internal_prim:'return'({'error', S2495Err}) end end end end end.
'get_user_state'(S2497UserId) -> 'Tianjiupai.UserServer':'call'(S2497UserId, 'get_user_state', fun({'user_state_got', S2498UserState}) -> sesterl_internal_prim:'return'({'ok', S2498UserState}) end).
'get_name'(S2500UserId) -> begin S2501Res = 'Tianjiupai.UserServer':'get_user_state'(S2500UserId), sesterl_internal_prim:'return'('SesterlStdlib.Result':'map'(fun(S2502U) -> maps:get(user_name, S2502U) end, S2501Res)) end.
'get_room'(S2504UserId) -> begin S2505Res = 'Tianjiupai.UserServer':'get_user_state'(S2504UserId), sesterl_internal_prim:'return'('SesterlStdlib.Result':'map'(fun(S2506U) -> maps:get(belongs_to, S2506U) end, S2505Res)) end.
'set_room'(S2508UserId, S2509RoomIdOpt) -> 'Tianjiupai.UserServer':'call'(S2508UserId, {'set_room', S2509RoomIdOpt}, fun({'room_set', S2510Success}) -> case S2510Success of true -> sesterl_internal_prim:'return'({'ok', ok}); false -> sesterl_internal_prim:'return'({'error', 'SesterlStdlib.RawValue':'forget'(<<"set room failed"/utf8>>)}) end end).
'create_room'(S2512UserId, S2513RoomId, S2514RoomName) -> 'Tianjiupai.UserServer':'call'(S2512UserId, {'create_room', S2513RoomId, S2514RoomName}, fun({'room_created', S2515Res}) -> sesterl_internal_prim:'return'(S2515Res) end).
