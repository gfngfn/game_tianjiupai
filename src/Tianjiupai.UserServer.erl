-module('Tianjiupai.UserServer').
-export(['get_proc'/1, 'exists'/1, 'delete'/1, 'start_link'/2, 'as_pid'/1, 'from_pid'/1, 'call'/3, 'get_user_state'/1, 'get_name'/1, 'get_room'/1, 'set_room'/2, 'create_room'/3]).
'get_proc'(S2451UserId) -> 'Tianjiupai.UserServer.Impl':'where_is_global'(S2451UserId).
'exists'(S2453UserId) -> begin S2454Opt = 'Tianjiupai.UserServer':'get_proc'(S2453UserId), case S2454Opt of 'error' -> sesterl_internal_prim:'return'(false); {'ok', _} -> sesterl_internal_prim:'return'(true) end end.
'delete'(S2456UserId) -> begin S2457Opt = 'Tianjiupai.UserServer':'get_proc'(S2456UserId), case S2457Opt of 'error' -> sesterl_internal_prim:'return'(false); {'ok', S2458Proc} -> begin ok = 'Tianjiupai.UserServer.Impl':'cast'(S2458Proc, 'delete_user'), sesterl_internal_prim:'return'(true) end end end.
'start_link'(S2460UserId, S2461UserName) -> 'Tianjiupai.UserServer.Impl':'start_link_name'({S2460UserId, S2461UserName}, {'global', S2460UserId}).
'as_pid'(S2463Proc) -> 'Tianjiupai.UserServer.Impl':'as_pid'(S2463Proc).
'from_pid'(S2465Pid) -> 'Tianjiupai.UserServer.Impl':'from_pid'(S2465Pid).
'call'(S2467UserId, S2468Req, S2469F) -> begin S2470ProcOpt = 'Tianjiupai.UserServer':'get_proc'(S2467UserId), case S2470ProcOpt of 'error' -> sesterl_internal_prim:'return'({'error', 'SesterlStdlib.RawValue':'forget'({<<"no proc"/utf8>>, S2467UserId})}); {'ok', S2471Proc} -> begin S2472RespResult = 'Tianjiupai.UserServer.Impl':'call'(S2471Proc, S2468Req), case S2472RespResult of {'ok', S2473Resp} -> S2469F(S2473Resp); {'error', S2474Err} -> begin _ = begin S3279 = 'Tianjiupai.Logger':'warning'({"call failed (user_id: ~s, req: ~p, proc: ~p, error: ~p)", 4}, {S2467UserId, S2468Req, S2471Proc, S2474Err}), S3279(<<"UserServer.sest">>, 277) end, sesterl_internal_prim:'return'({'error', S2474Err}) end end end end end.
'get_user_state'(S2476UserId) -> 'Tianjiupai.UserServer':'call'(S2476UserId, 'get_user_state', fun({'user_state_got', S2477UserState}) -> sesterl_internal_prim:'return'({'ok', S2477UserState}) end).
'get_name'(S2479UserId) -> begin S2480Res = 'Tianjiupai.UserServer':'get_user_state'(S2479UserId), sesterl_internal_prim:'return'('SesterlStdlib.Result':'map'(fun(S2481U) -> maps:get(user_name, S2481U) end, S2480Res)) end.
'get_room'(S2483UserId) -> begin S2484Res = 'Tianjiupai.UserServer':'get_user_state'(S2483UserId), sesterl_internal_prim:'return'('SesterlStdlib.Result':'map'(fun(S2485U) -> maps:get(belongs_to, S2485U) end, S2484Res)) end.
'set_room'(S2487UserId, S2488RoomIdOpt) -> 'Tianjiupai.UserServer':'call'(S2487UserId, {'set_room', S2488RoomIdOpt}, fun({'room_set', S2489Success}) -> case S2489Success of true -> sesterl_internal_prim:'return'({'ok', ok}); false -> sesterl_internal_prim:'return'({'error', 'SesterlStdlib.RawValue':'forget'(<<"set room failed"/utf8>>)}) end end).
'create_room'(S2491UserId, S2492RoomId, S2493RoomName) -> 'Tianjiupai.UserServer':'call'(S2491UserId, {'create_room', S2492RoomId, S2493RoomName}, fun({'room_created', S2494Res}) -> sesterl_internal_prim:'return'(S2494Res) end).
