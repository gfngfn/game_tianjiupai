-module('Tianjiupai.Inning').
-export(['all_cards'/0, 'shuffle_impl'/0, 'shuffle'/0, 'start'/1, 'observe'/2, 'table_length'/1, 'count_gained'/1, 'separate_submitted_cards'/2, 'append_closed_to_table'/1, 'zip_with_indices'/1, 'max_with_index'/2, 'num_max_scheme'/2, 'wen_max'/1, 'wu_max'/1, 'wu_number_max'/1, 'big_max'/1, 'big_with_design_max'/1, 'first_exposed'/1, 'make_starting_table'/1, 'expose'/2, 'update_table'/2, 'get_winner'/1, 'check_last_submission_is_open'/1, 'submit'/3]).
    all_cards() ->
        WenHalf = lists:map(fun(N) -> {wen, N} end, lists:seq(1, 11)),
        Wus =
            lists:map(
                fun({B, N}) -> {wu, #{design => B, number => N}} end,
                [
                    {true, 3},
                    {true, 5},
                    {false, 5},
                    {true, 6},
                    {true, 7},
                    {false, 7},
                    {true, 8},
                    {false, 8},
                    {true, 9},
                    {false, 9}
                ]),
        lists:append([WenHalf, WenHalf, Wus]).
  
    shuffle_impl() ->
        %% RandomlyIndexedCards :: [{float(), card()}]
        RandomlyIndexedCards =
            lists:map(
                fun(Card) ->
                    Index = rand:uniform(),
                    {Index, Card}
                end,
                all_cards()),
        SortedIndexedCards =
            lists:sort(
                fun({Index1, _}, {Index2, _}) ->
                    Index1 =< Index2
                end,
                RandomlyIndexedCards),
        Sorted0 = lists:map(fun({_, Card}) -> Card end, SortedIndexedCards),
        {Hand0, Sorted1} = lists:split(8, Sorted0),
        {Hand1, Sorted2} = lists:split(8, Sorted1),
        {Hand2, Sorted3} = lists:split(8, Sorted2),
        {Hand3, []}      = lists:split(8, Sorted3),
        {Hand0, Hand1, Hand2, Hand3}.
  
'shuffle'() -> 'Tianjiupai.Quad':'make'('Tianjiupai.Inning':'shuffle_impl'()).
'start'(S1103Seat) -> begin S1104HandQuad = 'Tianjiupai.Inning':'shuffle'(), #{players => 'Tianjiupai.Quad':'map'(fun(S1105Hand) -> #{gained => [], hand => S1105Hand} end, S1104HandQuad), starts_at => S1103Seat, table => 'starting'} end.
'observe'(S1107Seat, S1108Inning) -> begin S1109PlayerQuad = maps:get(players, S1108Inning), begin S1110You = 'Tianjiupai.Quad':'access'(S1107Seat, S1109PlayerQuad), #{gains => 'Tianjiupai.Quad':'map'(fun(S1111P) -> maps:get(gained, S1111P) end, S1109PlayerQuad), starts_at => maps:get(starts_at, S1108Inning), table => maps:get(table, S1108Inning), your_hand => 'Tianjiupai.Card':'sort'(maps:get(hand, S1110You))} end end.
'table_length'(S1113Table) -> case S1113Table of 'starting' -> 0; {'wuzun', S1114E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1114E))); {'wenzun', S1115E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1115E))); {'single_wen', S1116E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1116E))); {'single_wu', S1117E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1117E))); {'double_wen', S1118E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1118E))); {'double_wu', S1119E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1119E))); {'double_both', S1120E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1120E))); {'triple_wen', S1121E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1121E))); {'triple_wu', S1122E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1122E))); {'quadruple', S1123E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1123E))) end.
'count_gained'(S1125Players) -> begin S1127Ns = 'Tianjiupai.Quad':'decompose'('Tianjiupai.Quad':'map'(fun(S1126P) -> 'SesterlStdlib.List':'length'(maps:get(gained, S1126P)) end, S1125Players)), begin S1128QizhijieAchieverSeatOpt = case S1127Ns of {7, _, _, _} -> {'ok', 'seat_a'}; {_, 7, _, _} -> {'ok', 'seat_b'}; {_, _, 7, _} -> {'ok', 'seat_c'}; {_, _, _, 7} -> {'ok', 'seat_d'}; _ -> 'error' end, begin S1133NumGained = begin {S1129N0, S1130N1, S1131N2, S1132N3} = S1127Ns, (S1129N0 + (S1130N1 + (S1131N2 + S1132N3))) end, {S1133NumGained, S1128QizhijieAchieverSeatOpt} end end end.
    separate_submitted_cards(SubmitterHand0, SubmittedCards) ->
        SubmitterHand1 = SubmitterHand0 -- SubmittedCards,
        case erlang:length(SubmitterHand1) + erlang:length(SubmittedCards) =:= erlang:length(SubmitterHand0) of
            true  -> {ok, SubmitterHand1};
            false -> error
        end.
  
'append_closed_to_table'(S1136Table) -> begin S1138F = fun(S1137E) -> #{first => maps:get(first, S1137E), subsequent => 'SesterlStdlib.List':'append'(maps:get(subsequent, S1137E), ['closed' | []])} end, case S1136Table of 'starting' -> 'error'; {'wuzun', S1139E} -> {'ok', {'wuzun', S1138F(S1139E)}}; {'wenzun', S1140E} -> {'ok', {'wenzun', S1138F(S1140E)}}; {'single_wen', S1141E} -> {'ok', {'single_wen', S1138F(S1141E)}}; {'single_wu', S1142E} -> {'ok', {'single_wu', S1138F(S1142E)}}; {'double_wen', S1143E} -> {'ok', {'double_wen', S1138F(S1143E)}}; {'double_wu', S1144E} -> {'ok', {'double_wu', S1138F(S1144E)}}; {'double_both', S1145E} -> {'ok', {'double_both', S1138F(S1145E)}}; {'triple_wen', S1146E} -> {'ok', {'triple_wen', S1138F(S1146E)}}; {'triple_wu', S1147E} -> {'ok', {'triple_wu', S1138F(S1147E)}}; {'quadruple', S1148E} -> {'ok', {'quadruple', S1138F(S1148E)}} end end.
    zip_with_indices(Xs) ->
        lists:zip(lists:seq(0, erlang:length(Xs) - 1), Xs).
  
    max_with_index(Greater, Xs) ->
        Pairs = zip_with_indices(Xs),
        case
            lists:sort(
               fun({_, X1}, {_, X2}) -> Greater(X1, X2) orelse X1 =:= X2 end,
               Pairs)
        of
            [Pair | _] -> Pair
        end.
  
'num_max_scheme'(S1152Greater, S1153Exposed) -> begin S1154X0 = maps:get(first, S1153Exposed), begin S1155XOrCloseds = maps:get(subsequent, S1153Exposed), begin {S1160TrickIndex, {'open', S1161X}} = 'Tianjiupai.Inning':'max_with_index'(fun(S1156Xo1, S1157Xo2) -> case {S1156Xo1, S1157Xo2} of {{'open', S1158X1}, {'open', S1159X2}} -> S1152Greater(S1158X1, S1159X2); {{'open', _}, 'closed'} -> true; _ -> false end end, [{'open', S1154X0} | S1155XOrCloseds]), {S1160TrickIndex, S1161X} end end end.
'wen_max'(S1163WenExposed) -> 'Tianjiupai.Inning':'num_max_scheme'((fun 'Tianjiupai.Card':'wen_greater'/2), S1163WenExposed).
'wu_max'(S1165WuExposed) -> 'Tianjiupai.Inning':'num_max_scheme'((fun 'Tianjiupai.Card':'wu_greater'/2), S1165WuExposed).
'wu_number_max'(S1167WunumExposed) -> 'Tianjiupai.Inning':'num_max_scheme'((fun 'Tianjiupai.Card':'wu_number_greater'/2), S1167WunumExposed).
'big_max'(S1169BigExposed) -> begin S1170Big0 = maps:get(first, S1169BigExposed), begin S1171BigOrCloseds = maps:get(subsequent, S1169BigExposed), begin {S1176TrickIndex, {'open', S1177Big}} = 'Tianjiupai.Inning':'max_with_index'(fun(S1172Bo1, S1173Bo2) -> case {S1172Bo1, S1173Bo2} of {{'open', S1174Big1}, {'open', S1175Big2}} -> 'Tianjiupai.Card':'big_greater'(S1174Big1, S1175Big2); {{'open', _}, 'closed'} -> true; _ -> false end end, [{'open', S1170Big0} | S1171BigOrCloseds]), {S1176TrickIndex, S1177Big} end end end.
'big_with_design_max'(S1179BigdExposed) -> begin S1180Bigd0 = maps:get(first, S1179BigdExposed), begin S1181BigdOrCloseds = maps:get(subsequent, S1179BigdExposed), begin {S1186TrickIndex, {'open', S1187Bigd}} = 'Tianjiupai.Inning':'max_with_index'(fun(S1182Bo1, S1183Bo2) -> case {S1182Bo1, S1183Bo2} of {{'open', S1184Bigd1}, {'open', S1185Bigd2}} -> 'Tianjiupai.Card':'big_greater'(maps:get(main, S1184Bigd1), maps:get(main, S1185Bigd2)); {{'open', _}, 'closed'} -> true; _ -> false end end, [{'open', S1180Bigd0} | S1181BigdOrCloseds]), {S1186TrickIndex, S1187Bigd} end end end.
'first_exposed'(S1189X) -> #{first => S1189X, subsequent => []}.
'make_starting_table'(S1191SubmittedCards) -> case 'Tianjiupai.Card':'sort'(S1191SubmittedCards) of [{'wen', 1} | [{'wen', 1} | []]] -> {'ok', {'wenzun', 'Tianjiupai.Inning':'first_exposed'('wenzun_minor')}}; [{'wen', S1192Wen} | []] -> {'ok', {'single_wen', 'Tianjiupai.Inning':'first_exposed'(S1192Wen)}}; [{'wu', S1193Wu} | []] -> {'ok', {'single_wu', 'Tianjiupai.Inning':'first_exposed'(S1193Wu)}}; [{'wen', S1194Wen1} | [{'wen', S1195Wen2} | []]] -> case 'Tianjiupai.Card':'wen_equal'(S1194Wen1, S1195Wen2) of true -> {'ok', {'double_wen', 'Tianjiupai.Inning':'first_exposed'(S1194Wen1)}}; false -> 'error' end; [{'wu', S1196Wu1} | [{'wu', S1197Wu2} | []]] -> case 'Tianjiupai.Card':'wu_equal'(S1196Wu1, S1197Wu2) of true -> {'ok', {'double_wu', 'Tianjiupai.Inning':'first_exposed'(maps:get(number, S1196Wu1))}}; false -> case ((maps:get(number, S1196Wu1) == 3) and (maps:get(number, S1197Wu2) == 6)) of true -> {'ok', {'wuzun', 'Tianjiupai.Inning':'first_exposed'('wuzun_unit')}}; false -> 'error' end end; [{'wen', S1198Wen} | [{'wu', S1199Wu} | []]] -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1198Wen, maps:get(number, S1199Wu)) of {'ok', S1200Big} -> {'ok', {'double_both', 'Tianjiupai.Inning':'first_exposed'(#{design => maps:get(design, S1199Wu), main => S1200Big})}}; 'error' -> 'error' end; [{'wen', S1201Wen1} | [{'wen', S1202Wen2} | [{'wu', S1203Wu} | []]]] -> case 'Tianjiupai.Card':'wen_equal'(S1201Wen1, S1202Wen2) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1201Wen1, maps:get(number, S1203Wu)) of {'ok', S1204Big} -> {'ok', {'triple_wen', 'Tianjiupai.Inning':'first_exposed'(#{design => maps:get(design, S1203Wu), main => S1204Big})}}; 'error' -> 'error' end; false -> 'error' end; [{'wen', S1205Wen} | [{'wu', S1206Wu1} | [{'wu', S1207Wu2} | []]]] -> case 'Tianjiupai.Card':'wu_equal'(S1206Wu1, S1207Wu2) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1205Wen, maps:get(number, S1206Wu1)) of {'ok', S1208Big} -> {'ok', {'triple_wu', 'Tianjiupai.Inning':'first_exposed'(S1208Big)}}; 'error' -> 'error' end; false -> 'error' end; [{'wen', S1209Wen1} | [{'wen', S1210Wen2} | [{'wu', S1211Wu1} | [{'wu', S1212Wu2} | []]]]] -> case ('Tianjiupai.Card':'wen_equal'(S1209Wen1, S1210Wen2) and 'Tianjiupai.Card':'wu_equal'(S1211Wu1, S1212Wu2)) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1209Wen1, maps:get(number, S1211Wu1)) of {'ok', S1213Big} -> {'ok', {'quadruple', 'Tianjiupai.Inning':'first_exposed'(S1213Big)}}; 'error' -> 'error' end; false -> 'error' end; _ -> 'error' end.
'expose'(S1215XExposed, S1216XNew) -> #{first => maps:get(first, S1215XExposed), subsequent => 'SesterlStdlib.List':'append'(maps:get(subsequent, S1215XExposed), [S1216XNew | []])}.
'update_table'(S1218SubmittedCards, S1219Table) -> case S1219Table of 'starting' -> 'Tianjiupai.Inning':'make_starting_table'(S1218SubmittedCards); {'wuzun', S1220ExposedOk} -> case S1218SubmittedCards of [_ | [_ | []]] -> {'ok', {'wuzun', 'Tianjiupai.Inning':'expose'(S1220ExposedOk, 'closed')}}; _ -> 'error' end; {'wenzun', S1221Exposed} -> case S1218SubmittedCards of [{'wen', 2} | [{'wen', 2} | []]] -> {'ok', {'wenzun', 'Tianjiupai.Inning':'expose'(S1221Exposed, {'open', 'wenzun_major'})}}; [_ | [_ | []]] -> {'ok', {'wenzun', 'Tianjiupai.Inning':'expose'(S1221Exposed, 'closed')}}; _ -> 'error' end; {'single_wen', S1222ExposedWen} -> case S1218SubmittedCards of [{'wen', S1223Wen} | []] -> begin {_, S1224Wen0} = 'Tianjiupai.Inning':'wen_max'(S1222ExposedWen), begin S1225NewOne = case 'Tianjiupai.Card':'wen_greater'(S1223Wen, S1224Wen0) of true -> {'open', S1223Wen}; false -> 'closed' end, {'ok', {'single_wen', 'Tianjiupai.Inning':'expose'(S1222ExposedWen, S1225NewOne)}} end end; [_ | []] -> {'ok', {'single_wen', 'Tianjiupai.Inning':'expose'(S1222ExposedWen, 'closed')}}; _ -> 'error' end; {'single_wu', S1226ExposedWu} -> case S1218SubmittedCards of [{'wu', S1227Wu} | []] -> begin {_, S1228Wu0} = 'Tianjiupai.Inning':'wu_max'(S1226ExposedWu), begin S1229NewOne = case 'Tianjiupai.Card':'wu_greater'(S1227Wu, S1228Wu0) of true -> {'open', S1227Wu}; false -> 'closed' end, {'ok', {'single_wu', 'Tianjiupai.Inning':'expose'(S1226ExposedWu, S1229NewOne)}} end end; [_ | []] -> {'ok', {'single_wu', 'Tianjiupai.Inning':'expose'(S1226ExposedWu, 'closed')}}; _ -> 'error' end; {'double_wen', S1230ExposedWen} -> case S1218SubmittedCards of [{'wen', S1231Wen1} | [{'wen', S1232Wen2} | []]] -> case 'Tianjiupai.Card':'wen_equal'(S1231Wen1, S1232Wen2) of true -> begin {_, S1233Wen0} = 'Tianjiupai.Inning':'wen_max'(S1230ExposedWen), begin S1234NewOne = case 'Tianjiupai.Card':'wen_greater'(S1231Wen1, S1233Wen0) of true -> {'open', S1231Wen1}; false -> 'closed' end, {'ok', {'double_wen', 'Tianjiupai.Inning':'expose'(S1230ExposedWen, S1234NewOne)}} end end; false -> {'ok', {'double_wen', 'Tianjiupai.Inning':'expose'(S1230ExposedWen, 'closed')}} end; [_ | [_ | []]] -> {'ok', {'double_wen', 'Tianjiupai.Inning':'expose'(S1230ExposedWen, 'closed')}}; _ -> 'error' end; {'double_wu', S1235ExposedWunum} -> case S1218SubmittedCards of [{'wu', S1236Wu1} | [{'wu', S1237Wu2} | []]] -> case 'Tianjiupai.Card':'wu_equal'(S1236Wu1, S1237Wu2) of true -> begin S1238Wunum1 = maps:get(number, S1236Wu1), begin {_, S1239Wunum0} = 'Tianjiupai.Inning':'wu_number_max'(S1235ExposedWunum), begin S1240NewOne = case 'Tianjiupai.Card':'wu_number_greater'(S1238Wunum1, S1239Wunum0) of true -> {'open', S1238Wunum1}; false -> 'closed' end, {'ok', {'double_wu', 'Tianjiupai.Inning':'expose'(S1235ExposedWunum, S1240NewOne)}} end end end; false -> {'ok', {'double_wu', 'Tianjiupai.Inning':'expose'(S1235ExposedWunum, 'closed')}} end; [_ | [_ | []]] -> {'ok', {'double_wu', 'Tianjiupai.Inning':'expose'(S1235ExposedWunum, 'closed')}}; _ -> 'error' end; {'double_both', S1241ExposedBigd} -> case 'Tianjiupai.Card':'sort'(S1218SubmittedCards) of [{'wen', S1242Wen} | [{'wu', S1243Wu} | []]] -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1242Wen, maps:get(number, S1243Wu)) of {'ok', S1244Big} -> begin {_, S1245Bigd0} = 'Tianjiupai.Inning':'big_with_design_max'(S1241ExposedBigd), begin S1246NewOne = case 'Tianjiupai.Card':'big_greater'(S1244Big, maps:get(main, S1245Bigd0)) of true -> {'open', #{design => maps:get(design, S1243Wu), main => S1244Big}}; false -> 'closed' end, {'ok', {'double_both', 'Tianjiupai.Inning':'expose'(S1241ExposedBigd, S1246NewOne)}} end end; 'error' -> {'ok', {'double_both', 'Tianjiupai.Inning':'expose'(S1241ExposedBigd, 'closed')}} end; [_ | [_ | []]] -> {'ok', {'double_both', 'Tianjiupai.Inning':'expose'(S1241ExposedBigd, 'closed')}}; _ -> 'error' end; {'triple_wen', S1247ExposedBigd} -> case 'Tianjiupai.Card':'sort'(S1218SubmittedCards) of [{'wen', S1248Wen1} | [{'wen', S1249Wen2} | [{'wu', S1250Wu} | []]]] -> case 'Tianjiupai.Card':'wen_equal'(S1248Wen1, S1249Wen2) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1248Wen1, maps:get(number, S1250Wu)) of {'ok', S1251Big} -> begin {_, S1252Bigd0} = 'Tianjiupai.Inning':'big_with_design_max'(S1247ExposedBigd), begin S1253NewOne = case 'Tianjiupai.Card':'big_greater'(S1251Big, maps:get(main, S1252Bigd0)) of true -> {'open', #{design => maps:get(design, S1250Wu), main => S1251Big}}; false -> 'closed' end, {'ok', {'triple_wen', 'Tianjiupai.Inning':'expose'(S1247ExposedBigd, S1253NewOne)}} end end; 'error' -> {'ok', {'triple_wen', 'Tianjiupai.Inning':'expose'(S1247ExposedBigd, 'closed')}} end; false -> {'ok', {'triple_wen', 'Tianjiupai.Inning':'expose'(S1247ExposedBigd, 'closed')}} end; [_ | [_ | [_ | []]]] -> {'ok', {'triple_wen', 'Tianjiupai.Inning':'expose'(S1247ExposedBigd, 'closed')}}; _ -> 'error' end; {'triple_wu', S1254ExposedBig} -> case 'Tianjiupai.Card':'sort'(S1218SubmittedCards) of [{'wen', S1255Wen} | [{'wu', S1256Wu1} | [{'wu', S1257Wu2} | []]]] -> case 'Tianjiupai.Card':'wu_equal'(S1256Wu1, S1257Wu2) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1255Wen, maps:get(number, S1256Wu1)) of {'ok', S1258Big} -> begin {_, S1259Big0} = 'Tianjiupai.Inning':'big_max'(S1254ExposedBig), begin S1260NewOne = case 'Tianjiupai.Card':'big_greater'(S1258Big, S1259Big0) of true -> {'open', S1258Big}; false -> 'closed' end, {'ok', {'triple_wu', 'Tianjiupai.Inning':'expose'(S1254ExposedBig, S1260NewOne)}} end end; 'error' -> {'ok', {'triple_wu', 'Tianjiupai.Inning':'expose'(S1254ExposedBig, 'closed')}} end; false -> {'ok', {'triple_wu', 'Tianjiupai.Inning':'expose'(S1254ExposedBig, 'closed')}} end; [_ | [_ | [_ | []]]] -> {'ok', {'triple_wu', 'Tianjiupai.Inning':'expose'(S1254ExposedBig, 'closed')}}; _ -> 'error' end; {'quadruple', S1261ExposedBig} -> case 'Tianjiupai.Card':'sort'(S1218SubmittedCards) of [{'wen', S1262Wen1} | [{'wen', S1263Wen2} | [{'wu', S1264Wu1} | [{'wu', S1265Wu2} | []]]]] -> case ('Tianjiupai.Card':'wen_equal'(S1262Wen1, S1263Wen2) and 'Tianjiupai.Card':'wu_equal'(S1264Wu1, S1265Wu2)) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1262Wen1, maps:get(number, S1264Wu1)) of {'ok', S1266Big} -> begin {_, S1267Big0} = 'Tianjiupai.Inning':'big_max'(S1261ExposedBig), begin S1268NewOne = case 'Tianjiupai.Card':'big_greater'(S1266Big, S1267Big0) of true -> {'open', S1266Big}; false -> 'closed' end, {'ok', {'quadruple', 'Tianjiupai.Inning':'expose'(S1261ExposedBig, S1268NewOne)}} end end; 'error' -> {'ok', {'quadruple', 'Tianjiupai.Inning':'expose'(S1261ExposedBig, 'closed')}} end; false -> {'ok', {'quadruple', 'Tianjiupai.Inning':'expose'(S1261ExposedBig, 'closed')}} end; [_ | [_ | [_ | [_ | []]]]] -> {'ok', {'quadruple', 'Tianjiupai.Inning':'expose'(S1261ExposedBig, 'closed')}}; _ -> 'error' end end.
'get_winner'(S1270Table) -> case S1270Table of {'wuzun', S1271Exposed} -> begin 'wuzun_unit' = maps:get(first, S1271Exposed), begin ['closed' | ['closed' | ['closed' | []]]] = maps:get(subsequent, S1271Exposed), {0, [{'wu', #{design => true, number => 3}} | [{'wu', #{design => true, number => 6}} | []]], {'ok', 'zhizun'}} end end; {'wenzun', S1272Exposed} -> begin 'wenzun_minor' = maps:get(first, S1272Exposed), begin S1273MajorOrCloseds = maps:get(subsequent, S1272Exposed), begin S1275Ns = 'SesterlStdlib.List':'map'(fun(S1274X) -> case S1274X of {'open', 'wenzun_major'} -> 2; 'closed' -> 1 end end, S1273MajorOrCloseds), begin {S1278TrickIndex, S1279OneOrTwo} = 'Tianjiupai.Inning':'max_with_index'(fun(S1276N1, S1277N2) -> (S1276N1 > S1277N2) end, [1 | S1275Ns]), case S1279OneOrTwo of 1 -> {0, [{'wen', 1} | [{'wen', 1} | []]], {'ok', 'zhizun'}}; 2 -> {S1278TrickIndex, [{'wen', 2} | [{'wen', 2} | []]], {'ok', 'zhizun'}} end end end end end; {'single_wen', S1280WenExposed} -> begin {S1281TrickIndex, S1282Wen} = 'Tianjiupai.Inning':'wen_max'(S1280WenExposed), begin S1283SpecialOpt = case {maps:get(first, S1280WenExposed), S1282Wen} of {1, 1} -> {'ok', 'yaojie'}; {1, 2} -> {'ok', 'yaojie'}; _ -> 'error' end, {S1281TrickIndex, [{'wen', S1282Wen} | []], S1283SpecialOpt} end end; {'single_wu', S1284WuExposed} -> begin {S1285TrickIndex, S1286Wu} = 'Tianjiupai.Inning':'wu_max'(S1284WuExposed), begin S1287SpecialOpt = case {maps:get(number, maps:get(first, S1284WuExposed)), maps:get(number, S1286Wu)} of {3, 3} -> {'ok', 'yaojie'}; {3, 6} -> {'ok', 'yaojie'}; _ -> 'error' end, {S1285TrickIndex, [{'wu', S1286Wu} | []], S1287SpecialOpt} end end; {'double_wen', S1288WenExposed} -> begin {S1289TrickIndex, S1290Wen} = 'Tianjiupai.Inning':'wen_max'(S1288WenExposed), {S1289TrickIndex, [{'wen', S1290Wen} | [{'wen', S1290Wen} | []]], 'error'} end; {'double_wu', S1291WunumExposed} -> begin {S1292TrickIndex, S1293Wunum} = 'Tianjiupai.Inning':'wu_number_max'(S1291WunumExposed), {S1292TrickIndex, [{'wu', #{design => false, number => S1293Wunum}} | [{'wu', #{design => true, number => S1293Wunum}} | []]], 'error'} end; {'double_both', S1294BigdExposed} -> begin {S1295TrickIndex, S1296Bigd} = 'Tianjiupai.Inning':'big_with_design_max'(S1294BigdExposed), begin {S1297Wen, S1298Wunum} = 'Tianjiupai.Card':'big_to_wen_and_wu'(maps:get(main, S1296Bigd)), {S1295TrickIndex, [{'wen', S1297Wen} | [{'wu', #{design => maps:get(design, S1296Bigd), number => S1298Wunum}} | []]], 'error'} end end; {'triple_wen', S1299BigdExposed} -> begin {S1300TrickIndex, S1301Bigd} = 'Tianjiupai.Inning':'big_with_design_max'(S1299BigdExposed), begin {S1302Wen, S1303Wunum} = 'Tianjiupai.Card':'big_to_wen_and_wu'(maps:get(main, S1301Bigd)), {S1300TrickIndex, [{'wen', S1302Wen} | [{'wen', S1302Wen} | [{'wu', #{design => maps:get(design, S1301Bigd), number => S1303Wunum}} | []]]], 'error'} end end; {'triple_wu', S1304BigExposed} -> begin {S1305TrickIndex, S1306Big} = 'Tianjiupai.Inning':'big_max'(S1304BigExposed), begin {S1307Wen, S1308Wunum} = 'Tianjiupai.Card':'big_to_wen_and_wu'(S1306Big), {S1305TrickIndex, [{'wen', S1307Wen} | [{'wu', #{design => false, number => S1308Wunum}} | [{'wu', #{design => true, number => S1308Wunum}} | []]]], 'error'} end end; {'quadruple', S1309BigExposed} -> begin {S1310TrickIndex, S1311Big} = 'Tianjiupai.Inning':'big_max'(S1309BigExposed), begin {S1312Wen, S1313Wunum} = 'Tianjiupai.Card':'big_to_wen_and_wu'(S1311Big), {S1310TrickIndex, [{'wen', S1312Wen} | [{'wen', S1312Wen} | [{'wu', #{design => false, number => S1313Wunum}} | [{'wu', #{design => true, number => S1313Wunum}} | []]]]], {'ok', 'sidahe'}} end end end.
'check_last_submission_is_open'(S1315Table) -> begin S1317F = fun(S1316Exposed) -> case 'SesterlStdlib.List':'reverse'(maps:get(subsequent, S1316Exposed)) of [] -> true; [{'open', _} | _] -> true; ['closed' | _] -> false end end, case S1315Table of {'wuzun', S1318Exposed} -> S1317F(S1318Exposed); {'wenzun', S1319Exposed} -> S1317F(S1319Exposed); {'single_wen', S1320Exposed} -> S1317F(S1320Exposed); {'single_wu', S1321Exposed} -> S1317F(S1321Exposed); {'double_wen', S1322Exposed} -> S1317F(S1322Exposed); {'double_wu', S1323Exposed} -> S1317F(S1323Exposed); {'double_both', S1324Exposed} -> S1317F(S1324Exposed); {'triple_wen', S1325Exposed} -> S1317F(S1325Exposed); {'triple_wu', S1326Exposed} -> S1317F(S1326Exposed); {'quadruple', S1327Exposed} -> S1317F(S1327Exposed) end end.
'submit'(S1329SubmitterSeat, S1330SubmittedCards, S1331Inning) -> begin S1332StartSeat = maps:get(starts_at, S1331Inning), begin S1333Table0 = maps:get(table, S1331Inning), begin S1334Players0 = maps:get(players, S1331Inning), begin S1335N0 = 'Tianjiupai.Inning':'table_length'(S1333Table0), begin {S1336NumGained0, S1337QizhijieAchieverSeatOpt} = 'Tianjiupai.Inning':'count_gained'(S1334Players0), begin S1338NumSubmittedCards = 'SesterlStdlib.List':'length'(S1330SubmittedCards), case ((S1335N0 < 4) and ((S1336NumGained0 < 8) and ((0 < S1338NumSubmittedCards) and (S1338NumSubmittedCards =< 4)))) of true -> case 'Tianjiupai.Quad':'seat_equal'(S1329SubmitterSeat, 'Tianjiupai.Quad':'advance_seat'(S1332StartSeat, S1335N0)) of true -> begin S1339Submitter0 = 'Tianjiupai.Quad':'access'(S1329SubmitterSeat, S1334Players0), begin S1340SubmitterHand0 = maps:get(hand, S1339Submitter0), begin S1341SubmitterGained0 = maps:get(gained, S1339Submitter0), case 'Tianjiupai.Inning':'separate_submitted_cards'(S1340SubmitterHand0, S1330SubmittedCards) of {'ok', S1342SubmitterHand1} -> begin S1343Players1 = 'Tianjiupai.Quad':'update'(S1329SubmitterSeat, maps:put(hand, S1342SubmitterHand1, S1339Submitter0), S1334Players0), begin S1344Res = case ((S1336NumGained0 == 7) and (S1338NumSubmittedCards == 1)) of true -> case S1337QizhijieAchieverSeatOpt of {'ok', _} -> 'Tianjiupai.Inning':'update_table'(S1330SubmittedCards, S1333Table0); 'error' -> case S1341SubmitterGained0 of [] -> 'Tianjiupai.Inning':'append_closed_to_table'(S1333Table0); [_ | _] -> 'Tianjiupai.Inning':'update_table'(S1330SubmittedCards, S1333Table0) end end; false -> 'Tianjiupai.Inning':'update_table'(S1330SubmittedCards, S1333Table0) end, begin {'ok', S1345Table1} = S1344Res, begin S1346IsFront = 'Tianjiupai.Inning':'check_last_submission_is_open'(S1345Table1), begin S1347NumGained1 = (S1336NumGained0 + S1338NumSubmittedCards), case (S1335N0 == 3) of true -> begin {S1348WinnerTrickIndex, S1349Cards, S1350SpecialOpt} = 'Tianjiupai.Inning':'get_winner'(S1345Table1), begin S1351WinnerSeat = 'Tianjiupai.Quad':'advance_seat'(S1332StartSeat, S1348WinnerTrickIndex), begin S1352Winner = 'Tianjiupai.Quad':'access'(S1351WinnerSeat, S1343Players1), begin S1353WinnerGained = 'SesterlStdlib.List':'append'(maps:get(gained, S1352Winner), S1349Cards), begin S1354Players2 = 'Tianjiupai.Quad':'update'(S1351WinnerSeat, maps:put(gained, S1353WinnerGained, S1352Winner), S1343Players1), case (S1347NumGained1 == 8) of true -> begin S1356GainedQuad = 'Tianjiupai.Quad':'map'(fun(S1355P) -> maps:get(gained, S1355P) end, S1354Players2), case S1337QizhijieAchieverSeatOpt of {'ok', S1357QizhijieAchieverSeat} -> begin S1358SpecialEnd = case 'Tianjiupai.Quad':'seat_equal'(S1357QizhijieAchieverSeat, S1351WinnerSeat) of true -> 'inning_end_with_bazhijie'; false -> 'inning_end_with_qizhijie' end, {'ok', {{'wins_inning', S1357QizhijieAchieverSeat, S1345Table1, S1356GainedQuad, {'ok', S1358SpecialEnd}}, S1346IsFront}} end; 'error' -> begin S1360SpecialEndOpt = case ('SesterlStdlib.List':'length'(S1353WinnerGained) == 8) of true -> {'ok', 'inning_end_with_bazhijie'}; false -> 'SesterlStdlib.Option':'map'(fun(S1359Special) -> case S1359Special of 'zhizun' -> 'inning_end_with_zhizun'; 'sidahe' -> 'inning_end_with_sidahe'; 'yaojie' -> 'inning_end_with_yaojie' end end, S1350SpecialOpt) end, {'ok', {{'wins_inning', S1351WinnerSeat, S1345Table1, S1356GainedQuad, S1360SpecialEndOpt}, S1346IsFront}} end end end; false -> begin S1361Inning1 = #{players => S1354Players2, starts_at => S1351WinnerSeat, table => 'starting'}, begin S1363SpecialTrickOpt = 'SesterlStdlib.Option':'bind'(S1350SpecialOpt, fun(S1362Special) -> case S1362Special of 'zhizun' -> {'ok', 'trick_end_with_zhizun'}; 'sidahe' -> {'ok', 'trick_end_with_sidahe'}; 'yaojie' -> 'error' end end), {'ok', {{'wins_trick', S1351WinnerSeat, S1345Table1, 'Tianjiupai.Card':'sort'(S1342SubmitterHand1), S1363SpecialTrickOpt, S1361Inning1}, S1346IsFront}} end end end end end end end end; false -> begin S1364Inning = #{players => S1343Players1, starts_at => S1332StartSeat, table => S1345Table1}, {'ok', {{'continues', S1364Inning}, S1346IsFront}} end end end end end end end; 'error' -> 'error' end end end end; false -> 'error' end; false -> 'error' end end end end end end end.
