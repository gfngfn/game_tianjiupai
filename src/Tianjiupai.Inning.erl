-module('Tianjiupai.Inning').
-export(['all_cards'/0, 'shuffle_impl'/0, 'shuffle'/0, 'start'/1, 'observe'/2, 'table_length'/1, 'count_gained'/1, 'separate_submitted_cards'/2, 'append_closed_to_table'/1, 'zip_with_indices'/1, 'max_with_index'/2, 'num_max_scheme'/2, 'wen_max'/1, 'wu_max'/1, 'wu_number_max'/1, 'big_max'/1, 'big_with_design_max'/1, 'first_exposed'/1, 'make_starting_table'/1, 'expose'/2, 'update_table'/2, 'get_winner'/1, 'check_last_submission_is_open'/1, 'submit'/3]).
    all_cards() ->
        WenHalf = lists:map(fun(N) -> {wen, N} end, lists:seq(1, 11)),
        Wus =
            lists:map(
                fun({B, N}) -> {wu, #{design => B, number => N}} end,
                [
                    {true, 3},
                    {true, 5},
                    {false, 5},
                    {true, 6},
                    {true, 7},
                    {false, 7},
                    {true, 8},
                    {false, 8},
                    {true, 9},
                    {false, 9}
                ]),
        lists:append([WenHalf, WenHalf, Wus]).
  
    shuffle_impl() ->
        %% RandomlyIndexedCards :: [{float(), card()}]
        RandomlyIndexedCards =
            lists:map(
                fun(Card) ->
                    Index = rand:uniform(),
                    {Index, Card}
                end,
                all_cards()),
        SortedIndexedCards =
            lists:sort(
                fun({Index1, _}, {Index2, _}) ->
                    Index1 =< Index2
                end,
                RandomlyIndexedCards),
        Sorted0 = lists:map(fun({_, Card}) -> Card end, SortedIndexedCards),
        {Hand0, Sorted1} = lists:split(8, Sorted0),
        {Hand1, Sorted2} = lists:split(8, Sorted1),
        {Hand2, Sorted3} = lists:split(8, Sorted2),
        {Hand3, []}      = lists:split(8, Sorted3),
        {Hand0, Hand1, Hand2, Hand3}.
  
'shuffle'() -> 'Tianjiupai.Quad':'make'('Tianjiupai.Inning':'shuffle_impl'()).
'start'(S1095Seat) -> begin S1096HandQuad = 'Tianjiupai.Inning':'shuffle'(), #{players => 'Tianjiupai.Quad':'map'(fun(S1097Hand) -> #{gained => [], hand => S1097Hand} end, S1096HandQuad), starts_at => S1095Seat, table => 'starting'} end.
'observe'(S1099Seat, S1100Inning) -> begin S1101PlayerQuad = maps:get(players, S1100Inning), begin S1102You = 'Tianjiupai.Quad':'access'(S1099Seat, S1101PlayerQuad), #{gains => 'Tianjiupai.Quad':'map'(fun(S1103P) -> maps:get(gained, S1103P) end, S1101PlayerQuad), starts_at => maps:get(starts_at, S1100Inning), table => maps:get(table, S1100Inning), your_hand => 'Tianjiupai.Card':'sort'(maps:get(hand, S1102You))} end end.
'table_length'(S1105Table) -> case S1105Table of 'starting' -> 0; {'wuzun', S1106E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1106E))); {'wenzun', S1107E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1107E))); {'single_wen', S1108E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1108E))); {'single_wu', S1109E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1109E))); {'double_wen', S1110E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1110E))); {'double_wu', S1111E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1111E))); {'double_both', S1112E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1112E))); {'triple_wen', S1113E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1113E))); {'triple_wu', S1114E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1114E))); {'quadruple', S1115E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1115E))) end.
'count_gained'(S1117Players) -> begin S1119Ns = 'Tianjiupai.Quad':'decompose'('Tianjiupai.Quad':'map'(fun(S1118P) -> 'SesterlStdlib.List':'length'(maps:get(gained, S1118P)) end, S1117Players)), begin S1120QizhijieAchieverSeatOpt = case S1119Ns of {7, _, _, _} -> {'ok', 'seat_a'}; {_, 7, _, _} -> {'ok', 'seat_b'}; {_, _, 7, _} -> {'ok', 'seat_c'}; {_, _, _, 7} -> {'ok', 'seat_d'}; _ -> 'error' end, begin S1125NumGained = begin {S1121N0, S1122N1, S1123N2, S1124N3} = S1119Ns, (S1121N0 + (S1122N1 + (S1123N2 + S1124N3))) end, {S1125NumGained, S1120QizhijieAchieverSeatOpt} end end end.
    separate_submitted_cards(SubmitterHand0, SubmittedCards) ->
        SubmitterHand1 = SubmitterHand0 -- SubmittedCards,
        case erlang:length(SubmitterHand1) + erlang:length(SubmittedCards) =:= erlang:length(SubmitterHand0) of
            true  -> {ok, SubmitterHand1};
            false -> error
        end.
  
'append_closed_to_table'(S1128Table) -> begin S1130F = fun(S1129E) -> #{first => maps:get(first, S1129E), subsequent => 'SesterlStdlib.List':'append'(maps:get(subsequent, S1129E), ['closed' | []])} end, case S1128Table of 'starting' -> 'error'; {'wuzun', S1131E} -> {'ok', {'wuzun', S1130F(S1131E)}}; {'wenzun', S1132E} -> {'ok', {'wenzun', S1130F(S1132E)}}; {'single_wen', S1133E} -> {'ok', {'single_wen', S1130F(S1133E)}}; {'single_wu', S1134E} -> {'ok', {'single_wu', S1130F(S1134E)}}; {'double_wen', S1135E} -> {'ok', {'double_wen', S1130F(S1135E)}}; {'double_wu', S1136E} -> {'ok', {'double_wu', S1130F(S1136E)}}; {'double_both', S1137E} -> {'ok', {'double_both', S1130F(S1137E)}}; {'triple_wen', S1138E} -> {'ok', {'triple_wen', S1130F(S1138E)}}; {'triple_wu', S1139E} -> {'ok', {'triple_wu', S1130F(S1139E)}}; {'quadruple', S1140E} -> {'ok', {'quadruple', S1130F(S1140E)}} end end.
    zip_with_indices(Xs) ->
        lists:zip(lists:seq(0, erlang:length(Xs) - 1), Xs).
  
    max_with_index(Greater, Xs) ->
        Pairs = zip_with_indices(Xs),
        case
            lists:sort(
               fun({_, X1}, {_, X2}) -> Greater(X1, X2) orelse X1 =:= X2 end,
               Pairs)
        of
            [Pair | _] -> Pair
        end.
  
'num_max_scheme'(S1144Greater, S1145Exposed) -> begin S1146X0 = maps:get(first, S1145Exposed), begin S1147XOrCloseds = maps:get(subsequent, S1145Exposed), begin {S1152TrickIndex, {'open', S1153X}} = 'Tianjiupai.Inning':'max_with_index'(fun(S1148Xo1, S1149Xo2) -> case {S1148Xo1, S1149Xo2} of {{'open', S1150X1}, {'open', S1151X2}} -> S1144Greater(S1150X1, S1151X2); {{'open', _}, 'closed'} -> true; _ -> false end end, [{'open', S1146X0} | S1147XOrCloseds]), {S1152TrickIndex, S1153X} end end end.
'wen_max'(S1155WenExposed) -> 'Tianjiupai.Inning':'num_max_scheme'((fun 'Tianjiupai.Card':'wen_greater'/2), S1155WenExposed).
'wu_max'(S1157WuExposed) -> 'Tianjiupai.Inning':'num_max_scheme'((fun 'Tianjiupai.Card':'wu_greater'/2), S1157WuExposed).
'wu_number_max'(S1159WunumExposed) -> 'Tianjiupai.Inning':'num_max_scheme'((fun 'Tianjiupai.Card':'wu_number_greater'/2), S1159WunumExposed).
'big_max'(S1161BigExposed) -> begin S1162Big0 = maps:get(first, S1161BigExposed), begin S1163BigOrCloseds = maps:get(subsequent, S1161BigExposed), begin {S1168TrickIndex, {'open', S1169Big}} = 'Tianjiupai.Inning':'max_with_index'(fun(S1164Bo1, S1165Bo2) -> case {S1164Bo1, S1165Bo2} of {{'open', S1166Big1}, {'open', S1167Big2}} -> 'Tianjiupai.Card':'big_greater'(S1166Big1, S1167Big2); {{'open', _}, 'closed'} -> true; _ -> false end end, [{'open', S1162Big0} | S1163BigOrCloseds]), {S1168TrickIndex, S1169Big} end end end.
'big_with_design_max'(S1171BigdExposed) -> begin S1172Bigd0 = maps:get(first, S1171BigdExposed), begin S1173BigdOrCloseds = maps:get(subsequent, S1171BigdExposed), begin {S1178TrickIndex, {'open', S1179Bigd}} = 'Tianjiupai.Inning':'max_with_index'(fun(S1174Bo1, S1175Bo2) -> case {S1174Bo1, S1175Bo2} of {{'open', S1176Bigd1}, {'open', S1177Bigd2}} -> 'Tianjiupai.Card':'big_greater'(maps:get(main, S1176Bigd1), maps:get(main, S1177Bigd2)); {{'open', _}, 'closed'} -> true; _ -> false end end, [{'open', S1172Bigd0} | S1173BigdOrCloseds]), {S1178TrickIndex, S1179Bigd} end end end.
'first_exposed'(S1181X) -> #{first => S1181X, subsequent => []}.
'make_starting_table'(S1183SubmittedCards) -> case 'Tianjiupai.Card':'sort'(S1183SubmittedCards) of [{'wen', 1} | [{'wen', 1} | []]] -> {'ok', {'wenzun', 'Tianjiupai.Inning':'first_exposed'('wenzun_minor')}}; [{'wen', S1184Wen} | []] -> {'ok', {'single_wen', 'Tianjiupai.Inning':'first_exposed'(S1184Wen)}}; [{'wu', S1185Wu} | []] -> {'ok', {'single_wu', 'Tianjiupai.Inning':'first_exposed'(S1185Wu)}}; [{'wen', S1186Wen1} | [{'wen', S1187Wen2} | []]] -> case 'Tianjiupai.Card':'wen_equal'(S1186Wen1, S1187Wen2) of true -> {'ok', {'double_wen', 'Tianjiupai.Inning':'first_exposed'(S1186Wen1)}}; false -> 'error' end; [{'wu', S1188Wu1} | [{'wu', S1189Wu2} | []]] -> case 'Tianjiupai.Card':'wu_equal'(S1188Wu1, S1189Wu2) of true -> {'ok', {'double_wu', 'Tianjiupai.Inning':'first_exposed'(maps:get(number, S1188Wu1))}}; false -> case ((maps:get(number, S1188Wu1) == 3) and (maps:get(number, S1189Wu2) == 6)) of true -> {'ok', {'wuzun', 'Tianjiupai.Inning':'first_exposed'('wuzun_unit')}}; false -> 'error' end end; [{'wen', S1190Wen} | [{'wu', S1191Wu} | []]] -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1190Wen, maps:get(number, S1191Wu)) of {'ok', S1192Big} -> {'ok', {'double_both', 'Tianjiupai.Inning':'first_exposed'(#{design => maps:get(design, S1191Wu), main => S1192Big})}}; 'error' -> 'error' end; [{'wen', S1193Wen1} | [{'wen', S1194Wen2} | [{'wu', S1195Wu} | []]]] -> case 'Tianjiupai.Card':'wen_equal'(S1193Wen1, S1194Wen2) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1193Wen1, maps:get(number, S1195Wu)) of {'ok', S1196Big} -> {'ok', {'triple_wen', 'Tianjiupai.Inning':'first_exposed'(#{design => maps:get(design, S1195Wu), main => S1196Big})}}; 'error' -> 'error' end; false -> 'error' end; [{'wen', S1197Wen} | [{'wu', S1198Wu1} | [{'wu', S1199Wu2} | []]]] -> case 'Tianjiupai.Card':'wu_equal'(S1198Wu1, S1199Wu2) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1197Wen, maps:get(number, S1198Wu1)) of {'ok', S1200Big} -> {'ok', {'triple_wu', 'Tianjiupai.Inning':'first_exposed'(S1200Big)}}; 'error' -> 'error' end; false -> 'error' end; [{'wen', S1201Wen1} | [{'wen', S1202Wen2} | [{'wu', S1203Wu1} | [{'wu', S1204Wu2} | []]]]] -> case ('Tianjiupai.Card':'wen_equal'(S1201Wen1, S1202Wen2) and 'Tianjiupai.Card':'wu_equal'(S1203Wu1, S1204Wu2)) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1201Wen1, maps:get(number, S1203Wu1)) of {'ok', S1205Big} -> {'ok', {'quadruple', 'Tianjiupai.Inning':'first_exposed'(S1205Big)}}; 'error' -> 'error' end; false -> 'error' end; _ -> 'error' end.
'expose'(S1207XExposed, S1208XNew) -> #{first => maps:get(first, S1207XExposed), subsequent => 'SesterlStdlib.List':'append'(maps:get(subsequent, S1207XExposed), [S1208XNew | []])}.
'update_table'(S1210SubmittedCards, S1211Table) -> case S1211Table of 'starting' -> 'Tianjiupai.Inning':'make_starting_table'(S1210SubmittedCards); {'wuzun', S1212ExposedOk} -> case S1210SubmittedCards of [_ | [_ | []]] -> {'ok', {'wuzun', 'Tianjiupai.Inning':'expose'(S1212ExposedOk, 'closed')}}; _ -> 'error' end; {'wenzun', S1213Exposed} -> case S1210SubmittedCards of [{'wen', 2} | [{'wen', 2} | []]] -> {'ok', {'wenzun', 'Tianjiupai.Inning':'expose'(S1213Exposed, {'open', 'wenzun_major'})}}; [_ | [_ | []]] -> {'ok', {'wenzun', 'Tianjiupai.Inning':'expose'(S1213Exposed, 'closed')}}; _ -> 'error' end; {'single_wen', S1214ExposedWen} -> case S1210SubmittedCards of [{'wen', S1215Wen} | []] -> begin {_, S1216Wen0} = 'Tianjiupai.Inning':'wen_max'(S1214ExposedWen), begin S1217NewOne = case 'Tianjiupai.Card':'wen_greater'(S1215Wen, S1216Wen0) of true -> {'open', S1215Wen}; false -> 'closed' end, {'ok', {'single_wen', 'Tianjiupai.Inning':'expose'(S1214ExposedWen, S1217NewOne)}} end end; [_ | []] -> {'ok', {'single_wen', 'Tianjiupai.Inning':'expose'(S1214ExposedWen, 'closed')}}; _ -> 'error' end; {'single_wu', S1218ExposedWu} -> case S1210SubmittedCards of [{'wu', S1219Wu} | []] -> begin {_, S1220Wu0} = 'Tianjiupai.Inning':'wu_max'(S1218ExposedWu), begin S1221NewOne = case 'Tianjiupai.Card':'wu_greater'(S1219Wu, S1220Wu0) of true -> {'open', S1219Wu}; false -> 'closed' end, {'ok', {'single_wu', 'Tianjiupai.Inning':'expose'(S1218ExposedWu, S1221NewOne)}} end end; [_ | []] -> {'ok', {'single_wu', 'Tianjiupai.Inning':'expose'(S1218ExposedWu, 'closed')}}; _ -> 'error' end; {'double_wen', S1222ExposedWen} -> case S1210SubmittedCards of [{'wen', S1223Wen1} | [{'wen', S1224Wen2} | []]] -> case 'Tianjiupai.Card':'wen_equal'(S1223Wen1, S1224Wen2) of true -> begin {_, S1225Wen0} = 'Tianjiupai.Inning':'wen_max'(S1222ExposedWen), begin S1226NewOne = case 'Tianjiupai.Card':'wen_greater'(S1223Wen1, S1225Wen0) of true -> {'open', S1223Wen1}; false -> 'closed' end, {'ok', {'double_wen', 'Tianjiupai.Inning':'expose'(S1222ExposedWen, S1226NewOne)}} end end; false -> {'ok', {'double_wen', 'Tianjiupai.Inning':'expose'(S1222ExposedWen, 'closed')}} end; [_ | [_ | []]] -> {'ok', {'double_wen', 'Tianjiupai.Inning':'expose'(S1222ExposedWen, 'closed')}}; _ -> 'error' end; {'double_wu', S1227ExposedWunum} -> case S1210SubmittedCards of [{'wu', S1228Wu1} | [{'wu', S1229Wu2} | []]] -> case 'Tianjiupai.Card':'wu_equal'(S1228Wu1, S1229Wu2) of true -> begin S1230Wunum1 = maps:get(number, S1228Wu1), begin {_, S1231Wunum0} = 'Tianjiupai.Inning':'wu_number_max'(S1227ExposedWunum), begin S1232NewOne = case 'Tianjiupai.Card':'wu_number_greater'(S1230Wunum1, S1231Wunum0) of true -> {'open', S1230Wunum1}; false -> 'closed' end, {'ok', {'double_wu', 'Tianjiupai.Inning':'expose'(S1227ExposedWunum, S1232NewOne)}} end end end; false -> {'ok', {'double_wu', 'Tianjiupai.Inning':'expose'(S1227ExposedWunum, 'closed')}} end; [_ | [_ | []]] -> {'ok', {'double_wu', 'Tianjiupai.Inning':'expose'(S1227ExposedWunum, 'closed')}}; _ -> 'error' end; {'double_both', S1233ExposedBigd} -> case 'Tianjiupai.Card':'sort'(S1210SubmittedCards) of [{'wen', S1234Wen} | [{'wu', S1235Wu} | []]] -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1234Wen, maps:get(number, S1235Wu)) of {'ok', S1236Big} -> begin {_, S1237Bigd0} = 'Tianjiupai.Inning':'big_with_design_max'(S1233ExposedBigd), begin S1238NewOne = case 'Tianjiupai.Card':'big_greater'(S1236Big, maps:get(main, S1237Bigd0)) of true -> {'open', #{design => maps:get(design, S1235Wu), main => S1236Big}}; false -> 'closed' end, {'ok', {'double_both', 'Tianjiupai.Inning':'expose'(S1233ExposedBigd, S1238NewOne)}} end end; 'error' -> {'ok', {'double_both', 'Tianjiupai.Inning':'expose'(S1233ExposedBigd, 'closed')}} end; [_ | [_ | []]] -> {'ok', {'double_both', 'Tianjiupai.Inning':'expose'(S1233ExposedBigd, 'closed')}}; _ -> 'error' end; {'triple_wen', S1239ExposedBigd} -> case 'Tianjiupai.Card':'sort'(S1210SubmittedCards) of [{'wen', S1240Wen1} | [{'wen', S1241Wen2} | [{'wu', S1242Wu} | []]]] -> case 'Tianjiupai.Card':'wen_equal'(S1240Wen1, S1241Wen2) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1240Wen1, maps:get(number, S1242Wu)) of {'ok', S1243Big} -> begin {_, S1244Bigd0} = 'Tianjiupai.Inning':'big_with_design_max'(S1239ExposedBigd), begin S1245NewOne = case 'Tianjiupai.Card':'big_greater'(S1243Big, maps:get(main, S1244Bigd0)) of true -> {'open', #{design => maps:get(design, S1242Wu), main => S1243Big}}; false -> 'closed' end, {'ok', {'triple_wen', 'Tianjiupai.Inning':'expose'(S1239ExposedBigd, S1245NewOne)}} end end; 'error' -> {'ok', {'triple_wen', 'Tianjiupai.Inning':'expose'(S1239ExposedBigd, 'closed')}} end; false -> {'ok', {'triple_wen', 'Tianjiupai.Inning':'expose'(S1239ExposedBigd, 'closed')}} end; [_ | [_ | [_ | []]]] -> {'ok', {'triple_wen', 'Tianjiupai.Inning':'expose'(S1239ExposedBigd, 'closed')}}; _ -> 'error' end; {'triple_wu', S1246ExposedBig} -> case 'Tianjiupai.Card':'sort'(S1210SubmittedCards) of [{'wen', S1247Wen} | [{'wu', S1248Wu1} | [{'wu', S1249Wu2} | []]]] -> case 'Tianjiupai.Card':'wu_equal'(S1248Wu1, S1249Wu2) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1247Wen, maps:get(number, S1248Wu1)) of {'ok', S1250Big} -> begin {_, S1251Big0} = 'Tianjiupai.Inning':'big_max'(S1246ExposedBig), begin S1252NewOne = case 'Tianjiupai.Card':'big_greater'(S1250Big, S1251Big0) of true -> {'open', S1250Big}; false -> 'closed' end, {'ok', {'triple_wu', 'Tianjiupai.Inning':'expose'(S1246ExposedBig, S1252NewOne)}} end end; 'error' -> {'ok', {'triple_wu', 'Tianjiupai.Inning':'expose'(S1246ExposedBig, 'closed')}} end; false -> {'ok', {'triple_wu', 'Tianjiupai.Inning':'expose'(S1246ExposedBig, 'closed')}} end; [_ | [_ | [_ | []]]] -> {'ok', {'triple_wu', 'Tianjiupai.Inning':'expose'(S1246ExposedBig, 'closed')}}; _ -> 'error' end; {'quadruple', S1253ExposedBig} -> case 'Tianjiupai.Card':'sort'(S1210SubmittedCards) of [{'wen', S1254Wen1} | [{'wen', S1255Wen2} | [{'wu', S1256Wu1} | [{'wu', S1257Wu2} | []]]]] -> case ('Tianjiupai.Card':'wen_equal'(S1254Wen1, S1255Wen2) and 'Tianjiupai.Card':'wu_equal'(S1256Wu1, S1257Wu2)) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1254Wen1, maps:get(number, S1256Wu1)) of {'ok', S1258Big} -> begin {_, S1259Big0} = 'Tianjiupai.Inning':'big_max'(S1253ExposedBig), begin S1260NewOne = case 'Tianjiupai.Card':'big_greater'(S1258Big, S1259Big0) of true -> {'open', S1258Big}; false -> 'closed' end, {'ok', {'quadruple', 'Tianjiupai.Inning':'expose'(S1253ExposedBig, S1260NewOne)}} end end; 'error' -> {'ok', {'quadruple', 'Tianjiupai.Inning':'expose'(S1253ExposedBig, 'closed')}} end; false -> {'ok', {'quadruple', 'Tianjiupai.Inning':'expose'(S1253ExposedBig, 'closed')}} end; [_ | [_ | [_ | [_ | []]]]] -> {'ok', {'quadruple', 'Tianjiupai.Inning':'expose'(S1253ExposedBig, 'closed')}}; _ -> 'error' end end.
'get_winner'(S1262Table) -> case S1262Table of {'wuzun', S1263Exposed} -> begin 'wuzun_unit' = maps:get(first, S1263Exposed), begin ['closed' | ['closed' | ['closed' | []]]] = maps:get(subsequent, S1263Exposed), {0, [{'wu', #{design => true, number => 3}} | [{'wu', #{design => true, number => 6}} | []]], {'ok', 'zhizun'}} end end; {'wenzun', S1264Exposed} -> begin 'wenzun_minor' = maps:get(first, S1264Exposed), begin S1265MajorOrCloseds = maps:get(subsequent, S1264Exposed), begin S1267Ns = 'SesterlStdlib.List':'map'(fun(S1266X) -> case S1266X of {'open', 'wenzun_major'} -> 2; 'closed' -> 1 end end, S1265MajorOrCloseds), begin {S1270TrickIndex, S1271OneOrTwo} = 'Tianjiupai.Inning':'max_with_index'(fun(S1268N1, S1269N2) -> (S1268N1 > S1269N2) end, [1 | S1267Ns]), case S1271OneOrTwo of 1 -> {0, [{'wen', 1} | [{'wen', 1} | []]], {'ok', 'zhizun'}}; 2 -> {S1270TrickIndex, [{'wen', 2} | [{'wen', 2} | []]], {'ok', 'zhizun'}} end end end end end; {'single_wen', S1272WenExposed} -> begin {S1273TrickIndex, S1274Wen} = 'Tianjiupai.Inning':'wen_max'(S1272WenExposed), begin S1275SpecialOpt = case {maps:get(first, S1272WenExposed), S1274Wen} of {1, 1} -> {'ok', 'yaojie'}; {1, 2} -> {'ok', 'yaojie'}; _ -> 'error' end, {S1273TrickIndex, [{'wen', S1274Wen} | []], S1275SpecialOpt} end end; {'single_wu', S1276WuExposed} -> begin {S1277TrickIndex, S1278Wu} = 'Tianjiupai.Inning':'wu_max'(S1276WuExposed), begin S1279SpecialOpt = case {maps:get(number, maps:get(first, S1276WuExposed)), maps:get(number, S1278Wu)} of {3, 3} -> {'ok', 'yaojie'}; {3, 6} -> {'ok', 'yaojie'}; _ -> 'error' end, {S1277TrickIndex, [{'wu', S1278Wu} | []], S1279SpecialOpt} end end; {'double_wen', S1280WenExposed} -> begin {S1281TrickIndex, S1282Wen} = 'Tianjiupai.Inning':'wen_max'(S1280WenExposed), {S1281TrickIndex, [{'wen', S1282Wen} | [{'wen', S1282Wen} | []]], 'error'} end; {'double_wu', S1283WunumExposed} -> begin {S1284TrickIndex, S1285Wunum} = 'Tianjiupai.Inning':'wu_number_max'(S1283WunumExposed), {S1284TrickIndex, [{'wu', #{design => false, number => S1285Wunum}} | [{'wu', #{design => true, number => S1285Wunum}} | []]], 'error'} end; {'double_both', S1286BigdExposed} -> begin {S1287TrickIndex, S1288Bigd} = 'Tianjiupai.Inning':'big_with_design_max'(S1286BigdExposed), begin {S1289Wen, S1290Wunum} = 'Tianjiupai.Card':'big_to_wen_and_wu'(maps:get(main, S1288Bigd)), {S1287TrickIndex, [{'wen', S1289Wen} | [{'wu', #{design => maps:get(design, S1288Bigd), number => S1290Wunum}} | []]], 'error'} end end; {'triple_wen', S1291BigdExposed} -> begin {S1292TrickIndex, S1293Bigd} = 'Tianjiupai.Inning':'big_with_design_max'(S1291BigdExposed), begin {S1294Wen, S1295Wunum} = 'Tianjiupai.Card':'big_to_wen_and_wu'(maps:get(main, S1293Bigd)), {S1292TrickIndex, [{'wen', S1294Wen} | [{'wen', S1294Wen} | [{'wu', #{design => maps:get(design, S1293Bigd), number => S1295Wunum}} | []]]], 'error'} end end; {'triple_wu', S1296BigExposed} -> begin {S1297TrickIndex, S1298Big} = 'Tianjiupai.Inning':'big_max'(S1296BigExposed), begin {S1299Wen, S1300Wunum} = 'Tianjiupai.Card':'big_to_wen_and_wu'(S1298Big), {S1297TrickIndex, [{'wen', S1299Wen} | [{'wu', #{design => false, number => S1300Wunum}} | [{'wu', #{design => true, number => S1300Wunum}} | []]]], 'error'} end end; {'quadruple', S1301BigExposed} -> begin {S1302TrickIndex, S1303Big} = 'Tianjiupai.Inning':'big_max'(S1301BigExposed), begin {S1304Wen, S1305Wunum} = 'Tianjiupai.Card':'big_to_wen_and_wu'(S1303Big), {S1302TrickIndex, [{'wen', S1304Wen} | [{'wen', S1304Wen} | [{'wu', #{design => false, number => S1305Wunum}} | [{'wu', #{design => true, number => S1305Wunum}} | []]]]], {'ok', 'sidahe'}} end end end.
'check_last_submission_is_open'(S1307Table) -> begin S1309F = fun(S1308Exposed) -> case 'SesterlStdlib.List':'reverse'(maps:get(subsequent, S1308Exposed)) of [] -> true; [{'open', _} | _] -> true; ['closed' | _] -> false end end, case S1307Table of {'wuzun', S1310Exposed} -> S1309F(S1310Exposed); {'wenzun', S1311Exposed} -> S1309F(S1311Exposed); {'single_wen', S1312Exposed} -> S1309F(S1312Exposed); {'single_wu', S1313Exposed} -> S1309F(S1313Exposed); {'double_wen', S1314Exposed} -> S1309F(S1314Exposed); {'double_wu', S1315Exposed} -> S1309F(S1315Exposed); {'double_both', S1316Exposed} -> S1309F(S1316Exposed); {'triple_wen', S1317Exposed} -> S1309F(S1317Exposed); {'triple_wu', S1318Exposed} -> S1309F(S1318Exposed); {'quadruple', S1319Exposed} -> S1309F(S1319Exposed) end end.
'submit'(S1321SubmitterSeat, S1322SubmittedCards, S1323Inning) -> begin S1324StartSeat = maps:get(starts_at, S1323Inning), begin S1325Table0 = maps:get(table, S1323Inning), begin S1326Players0 = maps:get(players, S1323Inning), begin S1327N0 = 'Tianjiupai.Inning':'table_length'(S1325Table0), begin {S1328NumGained0, S1329QizhijieAchieverSeatOpt} = 'Tianjiupai.Inning':'count_gained'(S1326Players0), begin S1330NumSubmittedCards = 'SesterlStdlib.List':'length'(S1322SubmittedCards), case ((S1327N0 < 4) and ((S1328NumGained0 < 8) and ((0 < S1330NumSubmittedCards) and (S1330NumSubmittedCards =< 4)))) of true -> case 'Tianjiupai.Quad':'seat_equal'(S1321SubmitterSeat, 'Tianjiupai.Quad':'advance_seat'(S1324StartSeat, S1327N0)) of true -> begin S1331Submitter0 = 'Tianjiupai.Quad':'access'(S1321SubmitterSeat, S1326Players0), begin S1332SubmitterHand0 = maps:get(hand, S1331Submitter0), begin S1333SubmitterGained0 = maps:get(gained, S1331Submitter0), case 'Tianjiupai.Inning':'separate_submitted_cards'(S1332SubmitterHand0, S1322SubmittedCards) of {'ok', S1334SubmitterHand1} -> begin S1335Players1 = 'Tianjiupai.Quad':'update'(S1321SubmitterSeat, maps:put(hand, S1334SubmitterHand1, S1331Submitter0), S1326Players0), begin S1336Res = case ((S1328NumGained0 == 7) and (S1330NumSubmittedCards == 1)) of true -> case S1329QizhijieAchieverSeatOpt of {'ok', _} -> 'Tianjiupai.Inning':'update_table'(S1322SubmittedCards, S1325Table0); 'error' -> case S1333SubmitterGained0 of [] -> 'Tianjiupai.Inning':'append_closed_to_table'(S1325Table0); [_ | _] -> 'Tianjiupai.Inning':'update_table'(S1322SubmittedCards, S1325Table0) end end; false -> 'Tianjiupai.Inning':'update_table'(S1322SubmittedCards, S1325Table0) end, begin {'ok', S1337Table1} = S1336Res, begin S1338IsFront = 'Tianjiupai.Inning':'check_last_submission_is_open'(S1337Table1), begin S1339NumGained1 = (S1328NumGained0 + S1330NumSubmittedCards), case (S1327N0 == 3) of true -> begin {S1340WinnerTrickIndex, S1341Cards, S1342SpecialOpt} = 'Tianjiupai.Inning':'get_winner'(S1337Table1), begin S1343WinnerSeat = 'Tianjiupai.Quad':'advance_seat'(S1324StartSeat, S1340WinnerTrickIndex), begin S1344Winner = 'Tianjiupai.Quad':'access'(S1343WinnerSeat, S1335Players1), begin S1345WinnerGained = 'SesterlStdlib.List':'append'(maps:get(gained, S1344Winner), S1341Cards), begin S1346Players2 = 'Tianjiupai.Quad':'update'(S1343WinnerSeat, maps:put(gained, S1345WinnerGained, S1344Winner), S1335Players1), case (S1339NumGained1 == 8) of true -> begin S1348GainedQuad = 'Tianjiupai.Quad':'map'(fun(S1347P) -> maps:get(gained, S1347P) end, S1346Players2), case S1329QizhijieAchieverSeatOpt of {'ok', S1349QizhijieAchieverSeat} -> begin S1350SpecialEnd = case 'Tianjiupai.Quad':'seat_equal'(S1349QizhijieAchieverSeat, S1343WinnerSeat) of true -> 'inning_end_with_bazhijie'; false -> 'inning_end_with_qizhijie' end, {'ok', {{'wins_inning', S1349QizhijieAchieverSeat, S1337Table1, S1348GainedQuad, {'ok', S1350SpecialEnd}}, S1338IsFront}} end; 'error' -> begin S1352SpecialEndOpt = case ('SesterlStdlib.List':'length'(S1345WinnerGained) == 8) of true -> {'ok', 'inning_end_with_bazhijie'}; false -> 'SesterlStdlib.Option':'map'(fun(S1351Special) -> case S1351Special of 'zhizun' -> 'inning_end_with_zhizun'; 'sidahe' -> 'inning_end_with_sidahe'; 'yaojie' -> 'inning_end_with_yaojie' end end, S1342SpecialOpt) end, {'ok', {{'wins_inning', S1343WinnerSeat, S1337Table1, S1348GainedQuad, S1352SpecialEndOpt}, S1338IsFront}} end end end; false -> begin S1353Inning1 = #{players => S1346Players2, starts_at => S1343WinnerSeat, table => 'starting'}, begin S1355SpecialTrickOpt = 'SesterlStdlib.Option':'bind'(S1342SpecialOpt, fun(S1354Special) -> case S1354Special of 'zhizun' -> {'ok', 'trick_end_with_zhizun'}; 'sidahe' -> {'ok', 'trick_end_with_sidahe'}; 'yaojie' -> 'error' end end), {'ok', {{'wins_trick', S1343WinnerSeat, S1337Table1, 'Tianjiupai.Card':'sort'(S1334SubmitterHand1), S1355SpecialTrickOpt, S1353Inning1}, S1338IsFront}} end end end end end end end end; false -> begin S1356Inning = #{players => S1335Players1, starts_at => S1324StartSeat, table => S1337Table1}, {'ok', {{'continues', S1356Inning}, S1338IsFront}} end end end end end end end; 'error' -> 'error' end end end end; false -> 'error' end; false -> 'error' end end end end end end end.
