-module('Tianjiupai.Inning').
-export(['all_cards'/0, 'shuffle_impl'/0, 'shuffle'/0, 'start'/1, 'observe'/2, 'table_length'/1, 'count_gained'/1, 'separate_submitted_cards'/2, 'append_closed_to_table'/1, 'zip_with_indices'/1, 'max_with_index'/2, 'num_max_scheme'/2, 'wen_max'/1, 'wu_max'/1, 'wu_number_max'/1, 'big_max'/1, 'big_with_design_max'/1, 'first_exposed'/1, 'make_starting_table'/1, 'expose'/2, 'update_table'/2, 'get_winner'/1, 'check_last_submission_is_open'/1, 'submit'/3]).
    all_cards() ->
        WenHalf = lists:map(fun(N) -> {wen, N} end, lists:seq(1, 11)),
        Wus =
            lists:map(
                fun({B, N}) -> {wu, #{design => B, number => N}} end,
                [
                    {true, 3},
                    {true, 5},
                    {false, 5},
                    {true, 6},
                    {true, 7},
                    {false, 7},
                    {true, 8},
                    {false, 8},
                    {true, 9},
                    {false, 9}
                ]),
        lists:append([WenHalf, WenHalf, Wus]).
  
    shuffle_impl() ->
        %% RandomlyIndexedCards :: [{float(), card()}]
        RandomlyIndexedCards =
            lists:map(
                fun(Card) ->
                    Index = rand:uniform(),
                    {Index, Card}
                end,
                all_cards()),
        SortedIndexedCards =
            lists:sort(
                fun({Index1, _}, {Index2, _}) ->
                    Index1 =< Index2
                end,
                RandomlyIndexedCards),
        Sorted0 = lists:map(fun({_, Card}) -> Card end, SortedIndexedCards),
        {Hand0, Sorted1} = lists:split(8, Sorted0),
        {Hand1, Sorted2} = lists:split(8, Sorted1),
        {Hand2, Sorted3} = lists:split(8, Sorted2),
        {Hand3, []}      = lists:split(8, Sorted3),
        {Hand0, Hand1, Hand2, Hand3}.
  
'shuffle'() -> 'Tianjiupai.Quad':'make'('Tianjiupai.Inning':'shuffle_impl'()).
'start'(S1022Seat) -> begin S1023HandQuad = 'Tianjiupai.Inning':'shuffle'(), #{players => 'Tianjiupai.Quad':'map'(fun(S1024Hand) -> #{gained => [], hand => S1024Hand} end, S1023HandQuad), starts_at => S1022Seat, table => 'starting'} end.
'observe'(S1026Seat, S1027Inning) -> begin S1028PlayerQuad = maps:get(players, S1027Inning), begin S1029You = 'Tianjiupai.Quad':'access'(S1026Seat, S1028PlayerQuad), #{gains => 'Tianjiupai.Quad':'map'(fun(S1030P) -> maps:get(gained, S1030P) end, S1028PlayerQuad), starts_at => maps:get(starts_at, S1027Inning), table => maps:get(table, S1027Inning), your_hand => 'Tianjiupai.Card':'sort'(maps:get(hand, S1029You))} end end.
'table_length'(S1032Table) -> case S1032Table of 'starting' -> 0; {'wuzun', S1033E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1033E))); {'wenzun', S1034E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1034E))); {'single_wen', S1035E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1035E))); {'single_wu', S1036E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1036E))); {'double_wen', S1037E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1037E))); {'double_wu', S1038E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1038E))); {'double_both', S1039E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1039E))); {'triple_wen', S1040E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1040E))); {'triple_wu', S1041E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1041E))); {'quadruple', S1042E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1042E))) end.
'count_gained'(S1044Players) -> begin S1046Ns = 'Tianjiupai.Quad':'decompose'('Tianjiupai.Quad':'map'(fun(S1045P) -> 'SesterlStdlib.List':'length'(maps:get(gained, S1045P)) end, S1044Players)), begin S1047QizhijieAchieverSeatOpt = case S1046Ns of {7, _, _, _} -> {'ok', 'seat_a'}; {_, 7, _, _} -> {'ok', 'seat_b'}; {_, _, 7, _} -> {'ok', 'seat_c'}; {_, _, _, 7} -> {'ok', 'seat_d'}; _ -> 'error' end, begin S1052NumGained = begin {S1048N0, S1049N1, S1050N2, S1051N3} = S1046Ns, (S1048N0 + (S1049N1 + (S1050N2 + S1051N3))) end, {S1052NumGained, S1047QizhijieAchieverSeatOpt} end end end.
    separate_submitted_cards(SubmitterHand0, SubmittedCards) ->
        SubmitterHand1 = SubmitterHand0 -- SubmittedCards,
        case erlang:length(SubmitterHand1) + erlang:length(SubmittedCards) =:= erlang:length(SubmitterHand0) of
            true  -> {ok, SubmitterHand1};
            false -> error
        end.
  
'append_closed_to_table'(S1055Table) -> begin S1057F = fun(S1056E) -> #{first => maps:get(first, S1056E), subsequent => 'SesterlStdlib.List':'append'(maps:get(subsequent, S1056E), ['closed' | []])} end, case S1055Table of 'starting' -> 'error'; {'wuzun', S1058E} -> {'ok', {'wuzun', S1057F(S1058E)}}; {'wenzun', S1059E} -> {'ok', {'wenzun', S1057F(S1059E)}}; {'single_wen', S1060E} -> {'ok', {'single_wen', S1057F(S1060E)}}; {'single_wu', S1061E} -> {'ok', {'single_wu', S1057F(S1061E)}}; {'double_wen', S1062E} -> {'ok', {'double_wen', S1057F(S1062E)}}; {'double_wu', S1063E} -> {'ok', {'double_wu', S1057F(S1063E)}}; {'double_both', S1064E} -> {'ok', {'double_both', S1057F(S1064E)}}; {'triple_wen', S1065E} -> {'ok', {'triple_wen', S1057F(S1065E)}}; {'triple_wu', S1066E} -> {'ok', {'triple_wu', S1057F(S1066E)}}; {'quadruple', S1067E} -> {'ok', {'quadruple', S1057F(S1067E)}} end end.
    zip_with_indices(Xs) ->
        lists:zip(lists:seq(0, erlang:length(Xs) - 1), Xs).
  
    max_with_index(Greater, Xs) ->
        Pairs = zip_with_indices(Xs),
        case
            lists:sort(
               fun({_, X1}, {_, X2}) -> Greater(X1, X2) orelse X1 =:= X2 end,
               Pairs)
        of
            [Pair | _] -> Pair
        end.
  
'num_max_scheme'(S1071Greater, S1072Exposed) -> begin S1073X0 = maps:get(first, S1072Exposed), begin S1074XOrCloseds = maps:get(subsequent, S1072Exposed), begin {S1079TrickIndex, {'open', S1080X}} = 'Tianjiupai.Inning':'max_with_index'(fun(S1075Xo1, S1076Xo2) -> case {S1075Xo1, S1076Xo2} of {{'open', S1077X1}, {'open', S1078X2}} -> S1071Greater(S1077X1, S1078X2); {{'open', _}, 'closed'} -> true; _ -> false end end, [{'open', S1073X0} | S1074XOrCloseds]), {S1079TrickIndex, S1080X} end end end.
'wen_max'(S1082WenExposed) -> 'Tianjiupai.Inning':'num_max_scheme'((fun 'Tianjiupai.Card':'wen_greater'/2), S1082WenExposed).
'wu_max'(S1084WuExposed) -> 'Tianjiupai.Inning':'num_max_scheme'((fun 'Tianjiupai.Card':'wu_greater'/2), S1084WuExposed).
'wu_number_max'(S1086WunumExposed) -> 'Tianjiupai.Inning':'num_max_scheme'((fun 'Tianjiupai.Card':'wu_number_greater'/2), S1086WunumExposed).
'big_max'(S1088BigExposed) -> begin S1089Big0 = maps:get(first, S1088BigExposed), begin S1090BigOrCloseds = maps:get(subsequent, S1088BigExposed), begin {S1095TrickIndex, {'open', S1096Big}} = 'Tianjiupai.Inning':'max_with_index'(fun(S1091Bo1, S1092Bo2) -> case {S1091Bo1, S1092Bo2} of {{'open', S1093Big1}, {'open', S1094Big2}} -> 'Tianjiupai.Card':'big_greater'(S1093Big1, S1094Big2); {{'open', _}, 'closed'} -> true; _ -> false end end, [{'open', S1089Big0} | S1090BigOrCloseds]), {S1095TrickIndex, S1096Big} end end end.
'big_with_design_max'(S1098BigdExposed) -> begin S1099Bigd0 = maps:get(first, S1098BigdExposed), begin S1100BigdOrCloseds = maps:get(subsequent, S1098BigdExposed), begin {S1105TrickIndex, {'open', S1106Bigd}} = 'Tianjiupai.Inning':'max_with_index'(fun(S1101Bo1, S1102Bo2) -> case {S1101Bo1, S1102Bo2} of {{'open', S1103Bigd1}, {'open', S1104Bigd2}} -> 'Tianjiupai.Card':'big_greater'(maps:get(main, S1103Bigd1), maps:get(main, S1104Bigd2)); {{'open', _}, 'closed'} -> true; _ -> false end end, [{'open', S1099Bigd0} | S1100BigdOrCloseds]), {S1105TrickIndex, S1106Bigd} end end end.
'first_exposed'(S1108X) -> #{first => S1108X, subsequent => []}.
'make_starting_table'(S1110SubmittedCards) -> case 'Tianjiupai.Card':'sort'(S1110SubmittedCards) of [{'wen', 1} | [{'wen', 1} | []]] -> {'ok', {'wenzun', 'Tianjiupai.Inning':'first_exposed'('wenzun_minor')}}; [{'wen', S1111Wen} | []] -> {'ok', {'single_wen', 'Tianjiupai.Inning':'first_exposed'(S1111Wen)}}; [{'wu', S1112Wu} | []] -> {'ok', {'single_wu', 'Tianjiupai.Inning':'first_exposed'(S1112Wu)}}; [{'wen', S1113Wen1} | [{'wen', S1114Wen2} | []]] -> case 'Tianjiupai.Card':'wen_equal'(S1113Wen1, S1114Wen2) of true -> {'ok', {'double_wen', 'Tianjiupai.Inning':'first_exposed'(S1113Wen1)}}; false -> 'error' end; [{'wu', S1115Wu1} | [{'wu', S1116Wu2} | []]] -> case 'Tianjiupai.Card':'wu_equal'(S1115Wu1, S1116Wu2) of true -> {'ok', {'double_wu', 'Tianjiupai.Inning':'first_exposed'(maps:get(number, S1115Wu1))}}; false -> case ((maps:get(number, S1115Wu1) == 3) and (maps:get(number, S1116Wu2) == 6)) of true -> {'ok', {'wuzun', 'Tianjiupai.Inning':'first_exposed'('wuzun_unit')}}; false -> 'error' end end; [{'wen', S1117Wen} | [{'wu', S1118Wu} | []]] -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1117Wen, maps:get(number, S1118Wu)) of {'ok', S1119Big} -> {'ok', {'double_both', 'Tianjiupai.Inning':'first_exposed'(#{design => maps:get(design, S1118Wu), main => S1119Big})}}; 'error' -> 'error' end; [{'wen', S1120Wen1} | [{'wen', S1121Wen2} | [{'wu', S1122Wu} | []]]] -> case 'Tianjiupai.Card':'wen_equal'(S1120Wen1, S1121Wen2) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1120Wen1, maps:get(number, S1122Wu)) of {'ok', S1123Big} -> {'ok', {'triple_wen', 'Tianjiupai.Inning':'first_exposed'(#{design => maps:get(design, S1122Wu), main => S1123Big})}}; 'error' -> 'error' end; false -> 'error' end; [{'wen', S1124Wen} | [{'wu', S1125Wu1} | [{'wu', S1126Wu2} | []]]] -> case 'Tianjiupai.Card':'wu_equal'(S1125Wu1, S1126Wu2) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1124Wen, maps:get(number, S1125Wu1)) of {'ok', S1127Big} -> {'ok', {'triple_wu', 'Tianjiupai.Inning':'first_exposed'(S1127Big)}}; 'error' -> 'error' end; false -> 'error' end; [{'wen', S1128Wen1} | [{'wen', S1129Wen2} | [{'wu', S1130Wu1} | [{'wu', S1131Wu2} | []]]]] -> case ('Tianjiupai.Card':'wen_equal'(S1128Wen1, S1129Wen2) and 'Tianjiupai.Card':'wu_equal'(S1130Wu1, S1131Wu2)) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1128Wen1, maps:get(number, S1130Wu1)) of {'ok', S1132Big} -> {'ok', {'quadruple', 'Tianjiupai.Inning':'first_exposed'(S1132Big)}}; 'error' -> 'error' end; false -> 'error' end; _ -> 'error' end.
'expose'(S1134XExposed, S1135XNew) -> #{first => maps:get(first, S1134XExposed), subsequent => 'SesterlStdlib.List':'append'(maps:get(subsequent, S1134XExposed), [S1135XNew | []])}.
'update_table'(S1137SubmittedCards, S1138Table) -> case S1138Table of 'starting' -> 'Tianjiupai.Inning':'make_starting_table'(S1137SubmittedCards); {'wuzun', S1139ExposedOk} -> case S1137SubmittedCards of [_ | [_ | []]] -> {'ok', {'wuzun', 'Tianjiupai.Inning':'expose'(S1139ExposedOk, 'closed')}}; _ -> 'error' end; {'wenzun', S1140Exposed} -> case S1137SubmittedCards of [{'wen', 2} | [{'wen', 2} | []]] -> {'ok', {'wenzun', 'Tianjiupai.Inning':'expose'(S1140Exposed, {'open', 'wenzun_major'})}}; [_ | [_ | []]] -> {'ok', {'wenzun', 'Tianjiupai.Inning':'expose'(S1140Exposed, 'closed')}}; _ -> 'error' end; {'single_wen', S1141ExposedWen} -> case S1137SubmittedCards of [{'wen', S1142Wen} | []] -> begin {_, S1143Wen0} = 'Tianjiupai.Inning':'wen_max'(S1141ExposedWen), begin S1144NewOne = case 'Tianjiupai.Card':'wen_greater'(S1142Wen, S1143Wen0) of true -> {'open', S1142Wen}; false -> 'closed' end, {'ok', {'single_wen', 'Tianjiupai.Inning':'expose'(S1141ExposedWen, S1144NewOne)}} end end; [_ | []] -> {'ok', {'single_wen', 'Tianjiupai.Inning':'expose'(S1141ExposedWen, 'closed')}}; _ -> 'error' end; {'single_wu', S1145ExposedWu} -> case S1137SubmittedCards of [{'wu', S1146Wu} | []] -> begin {_, S1147Wu0} = 'Tianjiupai.Inning':'wu_max'(S1145ExposedWu), begin S1148NewOne = case 'Tianjiupai.Card':'wu_greater'(S1146Wu, S1147Wu0) of true -> {'open', S1146Wu}; false -> 'closed' end, {'ok', {'single_wu', 'Tianjiupai.Inning':'expose'(S1145ExposedWu, S1148NewOne)}} end end; [_ | []] -> {'ok', {'single_wu', 'Tianjiupai.Inning':'expose'(S1145ExposedWu, 'closed')}}; _ -> 'error' end; {'double_wen', S1149ExposedWen} -> case S1137SubmittedCards of [{'wen', S1150Wen1} | [{'wen', S1151Wen2} | []]] -> case 'Tianjiupai.Card':'wen_equal'(S1150Wen1, S1151Wen2) of true -> begin {_, S1152Wen0} = 'Tianjiupai.Inning':'wen_max'(S1149ExposedWen), begin S1153NewOne = case 'Tianjiupai.Card':'wen_greater'(S1150Wen1, S1152Wen0) of true -> {'open', S1150Wen1}; false -> 'closed' end, {'ok', {'double_wen', 'Tianjiupai.Inning':'expose'(S1149ExposedWen, S1153NewOne)}} end end; false -> {'ok', {'double_wen', 'Tianjiupai.Inning':'expose'(S1149ExposedWen, 'closed')}} end; [_ | [_ | []]] -> {'ok', {'double_wen', 'Tianjiupai.Inning':'expose'(S1149ExposedWen, 'closed')}}; _ -> 'error' end; {'double_wu', S1154ExposedWunum} -> case S1137SubmittedCards of [{'wu', S1155Wu1} | [{'wu', S1156Wu2} | []]] -> case 'Tianjiupai.Card':'wu_equal'(S1155Wu1, S1156Wu2) of true -> begin S1157Wunum1 = maps:get(number, S1155Wu1), begin {_, S1158Wunum0} = 'Tianjiupai.Inning':'wu_number_max'(S1154ExposedWunum), begin S1159NewOne = case 'Tianjiupai.Card':'wu_number_greater'(S1157Wunum1, S1158Wunum0) of true -> {'open', S1157Wunum1}; false -> 'closed' end, {'ok', {'double_wu', 'Tianjiupai.Inning':'expose'(S1154ExposedWunum, S1159NewOne)}} end end end; false -> {'ok', {'double_wu', 'Tianjiupai.Inning':'expose'(S1154ExposedWunum, 'closed')}} end; [_ | [_ | []]] -> {'ok', {'double_wu', 'Tianjiupai.Inning':'expose'(S1154ExposedWunum, 'closed')}}; _ -> 'error' end; {'double_both', S1160ExposedBigd} -> case 'Tianjiupai.Card':'sort'(S1137SubmittedCards) of [{'wen', S1161Wen} | [{'wu', S1162Wu} | []]] -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1161Wen, maps:get(number, S1162Wu)) of {'ok', S1163Big} -> begin {_, S1164Bigd0} = 'Tianjiupai.Inning':'big_with_design_max'(S1160ExposedBigd), begin S1165NewOne = case 'Tianjiupai.Card':'big_greater'(S1163Big, maps:get(main, S1164Bigd0)) of true -> {'open', #{design => maps:get(design, S1162Wu), main => S1163Big}}; false -> 'closed' end, {'ok', {'double_both', 'Tianjiupai.Inning':'expose'(S1160ExposedBigd, S1165NewOne)}} end end; 'error' -> {'ok', {'double_both', 'Tianjiupai.Inning':'expose'(S1160ExposedBigd, 'closed')}} end; [_ | [_ | []]] -> {'ok', {'double_both', 'Tianjiupai.Inning':'expose'(S1160ExposedBigd, 'closed')}}; _ -> 'error' end; {'triple_wen', S1166ExposedBigd} -> case 'Tianjiupai.Card':'sort'(S1137SubmittedCards) of [{'wen', S1167Wen1} | [{'wen', S1168Wen2} | [{'wu', S1169Wu} | []]]] -> case 'Tianjiupai.Card':'wen_equal'(S1167Wen1, S1168Wen2) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1167Wen1, maps:get(number, S1169Wu)) of {'ok', S1170Big} -> begin {_, S1171Bigd0} = 'Tianjiupai.Inning':'big_with_design_max'(S1166ExposedBigd), begin S1172NewOne = case 'Tianjiupai.Card':'big_greater'(S1170Big, maps:get(main, S1171Bigd0)) of true -> {'open', #{design => maps:get(design, S1169Wu), main => S1170Big}}; false -> 'closed' end, {'ok', {'triple_wen', 'Tianjiupai.Inning':'expose'(S1166ExposedBigd, S1172NewOne)}} end end; 'error' -> {'ok', {'triple_wen', 'Tianjiupai.Inning':'expose'(S1166ExposedBigd, 'closed')}} end; false -> {'ok', {'triple_wen', 'Tianjiupai.Inning':'expose'(S1166ExposedBigd, 'closed')}} end; [_ | [_ | [_ | []]]] -> {'ok', {'triple_wen', 'Tianjiupai.Inning':'expose'(S1166ExposedBigd, 'closed')}}; _ -> 'error' end; {'triple_wu', S1173ExposedBig} -> case 'Tianjiupai.Card':'sort'(S1137SubmittedCards) of [{'wen', S1174Wen} | [{'wu', S1175Wu1} | [{'wu', S1176Wu2} | []]]] -> case 'Tianjiupai.Card':'wu_equal'(S1175Wu1, S1176Wu2) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1174Wen, maps:get(number, S1175Wu1)) of {'ok', S1177Big} -> begin {_, S1178Big0} = 'Tianjiupai.Inning':'big_max'(S1173ExposedBig), begin S1179NewOne = case 'Tianjiupai.Card':'big_greater'(S1177Big, S1178Big0) of true -> {'open', S1177Big}; false -> 'closed' end, {'ok', {'triple_wu', 'Tianjiupai.Inning':'expose'(S1173ExposedBig, S1179NewOne)}} end end; 'error' -> {'ok', {'triple_wu', 'Tianjiupai.Inning':'expose'(S1173ExposedBig, 'closed')}} end; false -> {'ok', {'triple_wu', 'Tianjiupai.Inning':'expose'(S1173ExposedBig, 'closed')}} end; [_ | [_ | [_ | []]]] -> {'ok', {'triple_wu', 'Tianjiupai.Inning':'expose'(S1173ExposedBig, 'closed')}}; _ -> 'error' end; {'quadruple', S1180ExposedBig} -> case 'Tianjiupai.Card':'sort'(S1137SubmittedCards) of [{'wen', S1181Wen1} | [{'wen', S1182Wen2} | [{'wu', S1183Wu1} | [{'wu', S1184Wu2} | []]]]] -> case ('Tianjiupai.Card':'wen_equal'(S1181Wen1, S1182Wen2) and 'Tianjiupai.Card':'wu_equal'(S1183Wu1, S1184Wu2)) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1181Wen1, maps:get(number, S1183Wu1)) of {'ok', S1185Big} -> begin {_, S1186Big0} = 'Tianjiupai.Inning':'big_max'(S1180ExposedBig), begin S1187NewOne = case 'Tianjiupai.Card':'big_greater'(S1185Big, S1186Big0) of true -> {'open', S1185Big}; false -> 'closed' end, {'ok', {'quadruple', 'Tianjiupai.Inning':'expose'(S1180ExposedBig, S1187NewOne)}} end end; 'error' -> {'ok', {'quadruple', 'Tianjiupai.Inning':'expose'(S1180ExposedBig, 'closed')}} end; false -> {'ok', {'quadruple', 'Tianjiupai.Inning':'expose'(S1180ExposedBig, 'closed')}} end; [_ | [_ | [_ | [_ | []]]]] -> {'ok', {'quadruple', 'Tianjiupai.Inning':'expose'(S1180ExposedBig, 'closed')}}; _ -> 'error' end end.
'get_winner'(S1189Table) -> case S1189Table of {'wuzun', S1190Exposed} -> begin 'wuzun_unit' = maps:get(first, S1190Exposed), begin ['closed' | ['closed' | ['closed' | []]]] = maps:get(subsequent, S1190Exposed), {0, [{'wu', #{design => true, number => 3}} | [{'wu', #{design => true, number => 6}} | []]], {'ok', 'zhizun'}} end end; {'wenzun', S1191Exposed} -> begin 'wenzun_minor' = maps:get(first, S1191Exposed), begin S1192MajorOrCloseds = maps:get(subsequent, S1191Exposed), begin S1194Ns = 'SesterlStdlib.List':'map'(fun(S1193X) -> case S1193X of {'open', 'wenzun_major'} -> 2; 'closed' -> 1 end end, S1192MajorOrCloseds), begin {S1197TrickIndex, S1198OneOrTwo} = 'Tianjiupai.Inning':'max_with_index'(fun(S1195N1, S1196N2) -> (S1195N1 > S1196N2) end, [1 | S1194Ns]), case S1198OneOrTwo of 1 -> {0, [{'wen', 1} | [{'wen', 1} | []]], {'ok', 'zhizun'}}; 2 -> {S1197TrickIndex, [{'wen', 2} | [{'wen', 2} | []]], {'ok', 'zhizun'}} end end end end end; {'single_wen', S1199WenExposed} -> begin {S1200TrickIndex, S1201Wen} = 'Tianjiupai.Inning':'wen_max'(S1199WenExposed), begin S1202SpecialOpt = case {maps:get(first, S1199WenExposed), S1201Wen} of {1, 1} -> {'ok', 'yaojie'}; {1, 2} -> {'ok', 'yaojie'}; _ -> 'error' end, {S1200TrickIndex, [{'wen', S1201Wen} | []], S1202SpecialOpt} end end; {'single_wu', S1203WuExposed} -> begin {S1204TrickIndex, S1205Wu} = 'Tianjiupai.Inning':'wu_max'(S1203WuExposed), begin S1206SpecialOpt = case {maps:get(number, maps:get(first, S1203WuExposed)), maps:get(number, S1205Wu)} of {3, 3} -> {'ok', 'yaojie'}; {3, 6} -> {'ok', 'yaojie'}; _ -> 'error' end, {S1204TrickIndex, [{'wu', S1205Wu} | []], S1206SpecialOpt} end end; {'double_wen', S1207WenExposed} -> begin {S1208TrickIndex, S1209Wen} = 'Tianjiupai.Inning':'wen_max'(S1207WenExposed), {S1208TrickIndex, [{'wen', S1209Wen} | [{'wen', S1209Wen} | []]], 'error'} end; {'double_wu', S1210WunumExposed} -> begin {S1211TrickIndex, S1212Wunum} = 'Tianjiupai.Inning':'wu_number_max'(S1210WunumExposed), {S1211TrickIndex, [{'wu', #{design => false, number => S1212Wunum}} | [{'wu', #{design => true, number => S1212Wunum}} | []]], 'error'} end; {'double_both', S1213BigdExposed} -> begin {S1214TrickIndex, S1215Bigd} = 'Tianjiupai.Inning':'big_with_design_max'(S1213BigdExposed), begin {S1216Wen, S1217Wunum} = 'Tianjiupai.Card':'big_to_wen_and_wu'(maps:get(main, S1215Bigd)), {S1214TrickIndex, [{'wen', S1216Wen} | [{'wu', #{design => maps:get(design, S1215Bigd), number => S1217Wunum}} | []]], 'error'} end end; {'triple_wen', S1218BigdExposed} -> begin {S1219TrickIndex, S1220Bigd} = 'Tianjiupai.Inning':'big_with_design_max'(S1218BigdExposed), begin {S1221Wen, S1222Wunum} = 'Tianjiupai.Card':'big_to_wen_and_wu'(maps:get(main, S1220Bigd)), {S1219TrickIndex, [{'wen', S1221Wen} | [{'wen', S1221Wen} | [{'wu', #{design => maps:get(design, S1220Bigd), number => S1222Wunum}} | []]]], 'error'} end end; {'triple_wu', S1223BigExposed} -> begin {S1224TrickIndex, S1225Big} = 'Tianjiupai.Inning':'big_max'(S1223BigExposed), begin {S1226Wen, S1227Wunum} = 'Tianjiupai.Card':'big_to_wen_and_wu'(S1225Big), {S1224TrickIndex, [{'wen', S1226Wen} | [{'wu', #{design => false, number => S1227Wunum}} | [{'wu', #{design => true, number => S1227Wunum}} | []]]], 'error'} end end; {'quadruple', S1228BigExposed} -> begin {S1229TrickIndex, S1230Big} = 'Tianjiupai.Inning':'big_max'(S1228BigExposed), begin {S1231Wen, S1232Wunum} = 'Tianjiupai.Card':'big_to_wen_and_wu'(S1230Big), {S1229TrickIndex, [{'wen', S1231Wen} | [{'wen', S1231Wen} | [{'wu', #{design => false, number => S1232Wunum}} | [{'wu', #{design => true, number => S1232Wunum}} | []]]]], {'ok', 'sidahe'}} end end end.
'check_last_submission_is_open'(S1234Table) -> begin S1236F = fun(S1235Exposed) -> case 'SesterlStdlib.List':'reverse'(maps:get(subsequent, S1235Exposed)) of [] -> true; [{'open', _} | _] -> true; ['closed' | _] -> false end end, case S1234Table of {'wuzun', S1237Exposed} -> S1236F(S1237Exposed); {'wenzun', S1238Exposed} -> S1236F(S1238Exposed); {'single_wen', S1239Exposed} -> S1236F(S1239Exposed); {'single_wu', S1240Exposed} -> S1236F(S1240Exposed); {'double_wen', S1241Exposed} -> S1236F(S1241Exposed); {'double_wu', S1242Exposed} -> S1236F(S1242Exposed); {'double_both', S1243Exposed} -> S1236F(S1243Exposed); {'triple_wen', S1244Exposed} -> S1236F(S1244Exposed); {'triple_wu', S1245Exposed} -> S1236F(S1245Exposed); {'quadruple', S1246Exposed} -> S1236F(S1246Exposed) end end.
'submit'(S1248SubmitterSeat, S1249SubmittedCards, S1250Inning) -> begin S1251StartSeat = maps:get(starts_at, S1250Inning), begin S1252Table0 = maps:get(table, S1250Inning), begin S1253Players0 = maps:get(players, S1250Inning), begin S1254N0 = 'Tianjiupai.Inning':'table_length'(S1252Table0), begin {S1255NumGained0, S1256QizhijieAchieverSeatOpt} = 'Tianjiupai.Inning':'count_gained'(S1253Players0), begin S1257NumSubmittedCards = 'SesterlStdlib.List':'length'(S1249SubmittedCards), case ((S1254N0 < 4) and ((S1255NumGained0 < 8) and ((0 < S1257NumSubmittedCards) and (S1257NumSubmittedCards =< 4)))) of true -> case 'Tianjiupai.Quad':'seat_equal'(S1248SubmitterSeat, 'Tianjiupai.Quad':'advance_seat'(S1251StartSeat, S1254N0)) of true -> begin S1258Submitter0 = 'Tianjiupai.Quad':'access'(S1248SubmitterSeat, S1253Players0), begin S1259SubmitterHand0 = maps:get(hand, S1258Submitter0), begin S1260SubmitterGained0 = maps:get(gained, S1258Submitter0), case 'Tianjiupai.Inning':'separate_submitted_cards'(S1259SubmitterHand0, S1249SubmittedCards) of {'ok', S1261SubmitterHand1} -> begin S1262Players1 = 'Tianjiupai.Quad':'update'(S1248SubmitterSeat, maps:put(hand, S1261SubmitterHand1, S1258Submitter0), S1253Players0), begin S1263Res = case ((S1255NumGained0 == 7) and (S1257NumSubmittedCards == 1)) of true -> case S1256QizhijieAchieverSeatOpt of {'ok', _} -> 'Tianjiupai.Inning':'update_table'(S1249SubmittedCards, S1252Table0); 'error' -> case S1260SubmitterGained0 of [] -> 'Tianjiupai.Inning':'append_closed_to_table'(S1252Table0); [_ | _] -> 'Tianjiupai.Inning':'update_table'(S1249SubmittedCards, S1252Table0) end end; false -> 'Tianjiupai.Inning':'update_table'(S1249SubmittedCards, S1252Table0) end, begin {'ok', S1264Table1} = S1263Res, begin S1265IsFront = 'Tianjiupai.Inning':'check_last_submission_is_open'(S1264Table1), begin S1266NumGained1 = (S1255NumGained0 + S1257NumSubmittedCards), case (S1254N0 == 3) of true -> begin {S1267WinnerTrickIndex, S1268Cards, S1269SpecialOpt} = 'Tianjiupai.Inning':'get_winner'(S1264Table1), begin S1270WinnerSeat = 'Tianjiupai.Quad':'advance_seat'(S1251StartSeat, S1267WinnerTrickIndex), begin S1271Winner = 'Tianjiupai.Quad':'access'(S1270WinnerSeat, S1262Players1), begin S1272WinnerGained = 'SesterlStdlib.List':'append'(maps:get(gained, S1271Winner), S1268Cards), begin S1273Players2 = 'Tianjiupai.Quad':'update'(S1270WinnerSeat, maps:put(gained, S1272WinnerGained, S1271Winner), S1262Players1), case (S1266NumGained1 == 8) of true -> begin S1275GainedQuad = 'Tianjiupai.Quad':'map'(fun(S1274P) -> maps:get(gained, S1274P) end, S1273Players2), case S1256QizhijieAchieverSeatOpt of {'ok', S1276QizhijieAchieverSeat} -> begin S1277SpecialEnd = case 'Tianjiupai.Quad':'seat_equal'(S1276QizhijieAchieverSeat, S1270WinnerSeat) of true -> 'inning_end_with_bazhijie'; false -> 'inning_end_with_qizhijie' end, {'ok', {{'wins_inning', S1276QizhijieAchieverSeat, S1264Table1, S1275GainedQuad, {'ok', S1277SpecialEnd}}, S1265IsFront}} end; 'error' -> begin S1279SpecialEndOpt = case ('SesterlStdlib.List':'length'(S1272WinnerGained) == 8) of true -> {'ok', 'inning_end_with_bazhijie'}; false -> 'SesterlStdlib.Option':'map'(fun(S1278Special) -> case S1278Special of 'zhizun' -> 'inning_end_with_zhizun'; 'sidahe' -> 'inning_end_with_sidahe'; 'yaojie' -> 'inning_end_with_yaojie' end end, S1269SpecialOpt) end, {'ok', {{'wins_inning', S1270WinnerSeat, S1264Table1, S1275GainedQuad, S1279SpecialEndOpt}, S1265IsFront}} end end end; false -> begin S1280Inning1 = #{players => S1273Players2, starts_at => S1270WinnerSeat, table => 'starting'}, begin S1282SpecialTrickOpt = 'SesterlStdlib.Option':'bind'(S1269SpecialOpt, fun(S1281Special) -> case S1281Special of 'zhizun' -> {'ok', 'trick_end_with_zhizun'}; 'sidahe' -> {'ok', 'trick_end_with_sidahe'}; 'yaojie' -> 'error' end end), {'ok', {{'wins_trick', S1270WinnerSeat, S1264Table1, 'Tianjiupai.Card':'sort'(S1261SubmitterHand1), S1282SpecialTrickOpt, S1280Inning1}, S1265IsFront}} end end end end end end end end; false -> begin S1283Inning = #{players => S1262Players1, starts_at => S1251StartSeat, table => S1264Table1}, {'ok', {{'continues', S1283Inning}, S1265IsFront}} end end end end end end end; 'error' -> 'error' end end end end; false -> 'error' end; false -> 'error' end end end end end end end.
