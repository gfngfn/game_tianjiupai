-module('Tianjiupai.Inning').
-export(['all_cards'/0, 'shuffle_impl'/0, 'shuffle'/0, 'start'/1, 'observe'/2, 'table_length'/1, 'count_gained'/1, 'separate_submitted_cards'/2, 'append_closed_to_table'/1, 'zip_with_indices'/1, 'max_with_index'/2, 'num_max_scheme'/2, 'wen_max'/1, 'wu_max'/1, 'wu_number_max'/1, 'big_max'/1, 'big_with_design_max'/1, 'first_exposed'/1, 'make_starting_table'/1, 'expose'/2, 'update_table'/2, 'get_winner'/1, 'check_last_submission_is_open'/1, 'submit'/3]).
    all_cards() ->
        WenHalf = lists:map(fun(N) -> {wen, N} end, lists:seq(1, 11)),
        Wus =
            lists:map(
                fun({B, N}) -> {wu, #{design => B, number => N}} end,
                [
                    {true, 3},
                    {true, 5},
                    {false, 5},
                    {true, 6},
                    {true, 7},
                    {false, 7},
                    {true, 8},
                    {false, 8},
                    {true, 9},
                    {false, 9}
                ]),
        lists:append([WenHalf, WenHalf, Wus]).
  
    shuffle_impl() ->
        %% RandomlyIndexedCards :: [{float(), card()}]
        RandomlyIndexedCards =
            lists:map(
                fun(Card) ->
                    Index = rand:uniform(),
                    {Index, Card}
                end,
                all_cards()),
        SortedIndexedCards =
            lists:sort(
                fun({Index1, _}, {Index2, _}) ->
                    Index1 =< Index2
                end,
                RandomlyIndexedCards),
        Sorted0 = lists:map(fun({_, Card}) -> Card end, SortedIndexedCards),
        {Hand0, Sorted1} = lists:split(8, Sorted0),
        {Hand1, Sorted2} = lists:split(8, Sorted1),
        {Hand2, Sorted3} = lists:split(8, Sorted2),
        {Hand3, []}      = lists:split(8, Sorted3),
        {Hand0, Hand1, Hand2, Hand3}.
  
'shuffle'() -> 'Tianjiupai.Quad':'make'('Tianjiupai.Inning':'shuffle_impl'()).
'start'(S1089Seat) -> begin S1090HandQuad = 'Tianjiupai.Inning':'shuffle'(), #{players => 'Tianjiupai.Quad':'map'(fun(S1091Hand) -> #{gained => [], hand => S1091Hand} end, S1090HandQuad), starts_at => S1089Seat, table => 'starting'} end.
'observe'(S1093Seat, S1094Inning) -> begin S1095PlayerQuad = maps:get(players, S1094Inning), begin S1096You = 'Tianjiupai.Quad':'access'(S1093Seat, S1095PlayerQuad), #{gains => 'Tianjiupai.Quad':'map'(fun(S1097P) -> maps:get(gained, S1097P) end, S1095PlayerQuad), starts_at => maps:get(starts_at, S1094Inning), table => maps:get(table, S1094Inning), your_hand => 'Tianjiupai.Card':'sort'(maps:get(hand, S1096You))} end end.
'table_length'(S1099Table) -> case S1099Table of 'starting' -> 0; {'wuzun', S1100E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1100E))); {'wenzun', S1101E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1101E))); {'single_wen', S1102E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1102E))); {'single_wu', S1103E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1103E))); {'double_wen', S1104E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1104E))); {'double_wu', S1105E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1105E))); {'double_both', S1106E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1106E))); {'triple_wen', S1107E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1107E))); {'triple_wu', S1108E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1108E))); {'quadruple', S1109E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1109E))) end.
'count_gained'(S1111Players) -> begin S1113Ns = 'Tianjiupai.Quad':'decompose'('Tianjiupai.Quad':'map'(fun(S1112P) -> 'SesterlStdlib.List':'length'(maps:get(gained, S1112P)) end, S1111Players)), begin S1114QizhijieAchieverSeatOpt = case S1113Ns of {7, _, _, _} -> {'ok', 'seat_a'}; {_, 7, _, _} -> {'ok', 'seat_b'}; {_, _, 7, _} -> {'ok', 'seat_c'}; {_, _, _, 7} -> {'ok', 'seat_d'}; _ -> 'error' end, begin S1119NumGained = begin {S1115N0, S1116N1, S1117N2, S1118N3} = S1113Ns, (S1115N0 + (S1116N1 + (S1117N2 + S1118N3))) end, {S1119NumGained, S1114QizhijieAchieverSeatOpt} end end end.
    separate_submitted_cards(SubmitterHand0, SubmittedCards) ->
        SubmitterHand1 = SubmitterHand0 -- SubmittedCards,
        case erlang:length(SubmitterHand1) + erlang:length(SubmittedCards) =:= erlang:length(SubmitterHand0) of
            true  -> {ok, SubmitterHand1};
            false -> error
        end.
  
'append_closed_to_table'(S1122Table) -> begin S1124F = fun(S1123E) -> #{first => maps:get(first, S1123E), subsequent => 'SesterlStdlib.List':'append'(maps:get(subsequent, S1123E), ['closed' | []])} end, case S1122Table of 'starting' -> 'error'; {'wuzun', S1125E} -> {'ok', {'wuzun', S1124F(S1125E)}}; {'wenzun', S1126E} -> {'ok', {'wenzun', S1124F(S1126E)}}; {'single_wen', S1127E} -> {'ok', {'single_wen', S1124F(S1127E)}}; {'single_wu', S1128E} -> {'ok', {'single_wu', S1124F(S1128E)}}; {'double_wen', S1129E} -> {'ok', {'double_wen', S1124F(S1129E)}}; {'double_wu', S1130E} -> {'ok', {'double_wu', S1124F(S1130E)}}; {'double_both', S1131E} -> {'ok', {'double_both', S1124F(S1131E)}}; {'triple_wen', S1132E} -> {'ok', {'triple_wen', S1124F(S1132E)}}; {'triple_wu', S1133E} -> {'ok', {'triple_wu', S1124F(S1133E)}}; {'quadruple', S1134E} -> {'ok', {'quadruple', S1124F(S1134E)}} end end.
    zip_with_indices(Xs) ->
        lists:zip(lists:seq(0, erlang:length(Xs) - 1), Xs).
  
    max_with_index(Greater, Xs) ->
        Pairs = zip_with_indices(Xs),
        case
            lists:sort(
               fun({_, X1}, {_, X2}) -> Greater(X1, X2) orelse X1 =:= X2 end,
               Pairs)
        of
            [Pair | _] -> Pair
        end.
  
'num_max_scheme'(S1138Greater, S1139Exposed) -> begin S1140X0 = maps:get(first, S1139Exposed), begin S1141XOrCloseds = maps:get(subsequent, S1139Exposed), begin {S1146TrickIndex, {'open', S1147X}} = 'Tianjiupai.Inning':'max_with_index'(fun(S1142Xo1, S1143Xo2) -> case {S1142Xo1, S1143Xo2} of {{'open', S1144X1}, {'open', S1145X2}} -> S1138Greater(S1144X1, S1145X2); {{'open', _}, 'closed'} -> true; _ -> false end end, [{'open', S1140X0} | S1141XOrCloseds]), {S1146TrickIndex, S1147X} end end end.
'wen_max'(S1149WenExposed) -> 'Tianjiupai.Inning':'num_max_scheme'((fun 'Tianjiupai.Card':'wen_greater'/2), S1149WenExposed).
'wu_max'(S1151WuExposed) -> 'Tianjiupai.Inning':'num_max_scheme'((fun 'Tianjiupai.Card':'wu_greater'/2), S1151WuExposed).
'wu_number_max'(S1153WunumExposed) -> 'Tianjiupai.Inning':'num_max_scheme'((fun 'Tianjiupai.Card':'wu_number_greater'/2), S1153WunumExposed).
'big_max'(S1155BigExposed) -> begin S1156Big0 = maps:get(first, S1155BigExposed), begin S1157BigOrCloseds = maps:get(subsequent, S1155BigExposed), begin {S1162TrickIndex, {'open', S1163Big}} = 'Tianjiupai.Inning':'max_with_index'(fun(S1158Bo1, S1159Bo2) -> case {S1158Bo1, S1159Bo2} of {{'open', S1160Big1}, {'open', S1161Big2}} -> 'Tianjiupai.Card':'big_greater'(S1160Big1, S1161Big2); {{'open', _}, 'closed'} -> true; _ -> false end end, [{'open', S1156Big0} | S1157BigOrCloseds]), {S1162TrickIndex, S1163Big} end end end.
'big_with_design_max'(S1165BigdExposed) -> begin S1166Bigd0 = maps:get(first, S1165BigdExposed), begin S1167BigdOrCloseds = maps:get(subsequent, S1165BigdExposed), begin {S1172TrickIndex, {'open', S1173Bigd}} = 'Tianjiupai.Inning':'max_with_index'(fun(S1168Bo1, S1169Bo2) -> case {S1168Bo1, S1169Bo2} of {{'open', S1170Bigd1}, {'open', S1171Bigd2}} -> 'Tianjiupai.Card':'big_greater'(maps:get(main, S1170Bigd1), maps:get(main, S1171Bigd2)); {{'open', _}, 'closed'} -> true; _ -> false end end, [{'open', S1166Bigd0} | S1167BigdOrCloseds]), {S1172TrickIndex, S1173Bigd} end end end.
'first_exposed'(S1175X) -> #{first => S1175X, subsequent => []}.
'make_starting_table'(S1177SubmittedCards) -> case 'Tianjiupai.Card':'sort'(S1177SubmittedCards) of [{'wen', 1} | [{'wen', 1} | []]] -> {'ok', {'wenzun', 'Tianjiupai.Inning':'first_exposed'('wenzun_minor')}}; [{'wen', S1178Wen} | []] -> {'ok', {'single_wen', 'Tianjiupai.Inning':'first_exposed'(S1178Wen)}}; [{'wu', S1179Wu} | []] -> {'ok', {'single_wu', 'Tianjiupai.Inning':'first_exposed'(S1179Wu)}}; [{'wen', S1180Wen1} | [{'wen', S1181Wen2} | []]] -> case 'Tianjiupai.Card':'wen_equal'(S1180Wen1, S1181Wen2) of true -> {'ok', {'double_wen', 'Tianjiupai.Inning':'first_exposed'(S1180Wen1)}}; false -> 'error' end; [{'wu', S1182Wu1} | [{'wu', S1183Wu2} | []]] -> case 'Tianjiupai.Card':'wu_equal'(S1182Wu1, S1183Wu2) of true -> {'ok', {'double_wu', 'Tianjiupai.Inning':'first_exposed'(maps:get(number, S1182Wu1))}}; false -> case ((maps:get(number, S1182Wu1) == 3) and (maps:get(number, S1183Wu2) == 6)) of true -> {'ok', {'wuzun', 'Tianjiupai.Inning':'first_exposed'('wuzun_unit')}}; false -> 'error' end end; [{'wen', S1184Wen} | [{'wu', S1185Wu} | []]] -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1184Wen, maps:get(number, S1185Wu)) of {'ok', S1186Big} -> {'ok', {'double_both', 'Tianjiupai.Inning':'first_exposed'(#{design => maps:get(design, S1185Wu), main => S1186Big})}}; 'error' -> 'error' end; [{'wen', S1187Wen1} | [{'wen', S1188Wen2} | [{'wu', S1189Wu} | []]]] -> case 'Tianjiupai.Card':'wen_equal'(S1187Wen1, S1188Wen2) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1187Wen1, maps:get(number, S1189Wu)) of {'ok', S1190Big} -> {'ok', {'triple_wen', 'Tianjiupai.Inning':'first_exposed'(#{design => maps:get(design, S1189Wu), main => S1190Big})}}; 'error' -> 'error' end; false -> 'error' end; [{'wen', S1191Wen} | [{'wu', S1192Wu1} | [{'wu', S1193Wu2} | []]]] -> case 'Tianjiupai.Card':'wu_equal'(S1192Wu1, S1193Wu2) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1191Wen, maps:get(number, S1192Wu1)) of {'ok', S1194Big} -> {'ok', {'triple_wu', 'Tianjiupai.Inning':'first_exposed'(S1194Big)}}; 'error' -> 'error' end; false -> 'error' end; [{'wen', S1195Wen1} | [{'wen', S1196Wen2} | [{'wu', S1197Wu1} | [{'wu', S1198Wu2} | []]]]] -> case ('Tianjiupai.Card':'wen_equal'(S1195Wen1, S1196Wen2) and 'Tianjiupai.Card':'wu_equal'(S1197Wu1, S1198Wu2)) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1195Wen1, maps:get(number, S1197Wu1)) of {'ok', S1199Big} -> {'ok', {'quadruple', 'Tianjiupai.Inning':'first_exposed'(S1199Big)}}; 'error' -> 'error' end; false -> 'error' end; _ -> 'error' end.
'expose'(S1201XExposed, S1202XNew) -> #{first => maps:get(first, S1201XExposed), subsequent => 'SesterlStdlib.List':'append'(maps:get(subsequent, S1201XExposed), [S1202XNew | []])}.
'update_table'(S1204SubmittedCards, S1205Table) -> case S1205Table of 'starting' -> 'Tianjiupai.Inning':'make_starting_table'(S1204SubmittedCards); {'wuzun', S1206ExposedOk} -> case S1204SubmittedCards of [_ | [_ | []]] -> {'ok', {'wuzun', 'Tianjiupai.Inning':'expose'(S1206ExposedOk, 'closed')}}; _ -> 'error' end; {'wenzun', S1207Exposed} -> case S1204SubmittedCards of [{'wen', 2} | [{'wen', 2} | []]] -> {'ok', {'wenzun', 'Tianjiupai.Inning':'expose'(S1207Exposed, {'open', 'wenzun_major'})}}; [_ | [_ | []]] -> {'ok', {'wenzun', 'Tianjiupai.Inning':'expose'(S1207Exposed, 'closed')}}; _ -> 'error' end; {'single_wen', S1208ExposedWen} -> case S1204SubmittedCards of [{'wen', S1209Wen} | []] -> begin {_, S1210Wen0} = 'Tianjiupai.Inning':'wen_max'(S1208ExposedWen), begin S1211NewOne = case 'Tianjiupai.Card':'wen_greater'(S1209Wen, S1210Wen0) of true -> {'open', S1209Wen}; false -> 'closed' end, {'ok', {'single_wen', 'Tianjiupai.Inning':'expose'(S1208ExposedWen, S1211NewOne)}} end end; [_ | []] -> {'ok', {'single_wen', 'Tianjiupai.Inning':'expose'(S1208ExposedWen, 'closed')}}; _ -> 'error' end; {'single_wu', S1212ExposedWu} -> case S1204SubmittedCards of [{'wu', S1213Wu} | []] -> begin {_, S1214Wu0} = 'Tianjiupai.Inning':'wu_max'(S1212ExposedWu), begin S1215NewOne = case 'Tianjiupai.Card':'wu_greater'(S1213Wu, S1214Wu0) of true -> {'open', S1213Wu}; false -> 'closed' end, {'ok', {'single_wu', 'Tianjiupai.Inning':'expose'(S1212ExposedWu, S1215NewOne)}} end end; [_ | []] -> {'ok', {'single_wu', 'Tianjiupai.Inning':'expose'(S1212ExposedWu, 'closed')}}; _ -> 'error' end; {'double_wen', S1216ExposedWen} -> case S1204SubmittedCards of [{'wen', S1217Wen1} | [{'wen', S1218Wen2} | []]] -> case 'Tianjiupai.Card':'wen_equal'(S1217Wen1, S1218Wen2) of true -> begin {_, S1219Wen0} = 'Tianjiupai.Inning':'wen_max'(S1216ExposedWen), begin S1220NewOne = case 'Tianjiupai.Card':'wen_greater'(S1217Wen1, S1219Wen0) of true -> {'open', S1217Wen1}; false -> 'closed' end, {'ok', {'double_wen', 'Tianjiupai.Inning':'expose'(S1216ExposedWen, S1220NewOne)}} end end; false -> {'ok', {'double_wen', 'Tianjiupai.Inning':'expose'(S1216ExposedWen, 'closed')}} end; [_ | [_ | []]] -> {'ok', {'double_wen', 'Tianjiupai.Inning':'expose'(S1216ExposedWen, 'closed')}}; _ -> 'error' end; {'double_wu', S1221ExposedWunum} -> case S1204SubmittedCards of [{'wu', S1222Wu1} | [{'wu', S1223Wu2} | []]] -> case 'Tianjiupai.Card':'wu_equal'(S1222Wu1, S1223Wu2) of true -> begin S1224Wunum1 = maps:get(number, S1222Wu1), begin {_, S1225Wunum0} = 'Tianjiupai.Inning':'wu_number_max'(S1221ExposedWunum), begin S1226NewOne = case 'Tianjiupai.Card':'wu_number_greater'(S1224Wunum1, S1225Wunum0) of true -> {'open', S1224Wunum1}; false -> 'closed' end, {'ok', {'double_wu', 'Tianjiupai.Inning':'expose'(S1221ExposedWunum, S1226NewOne)}} end end end; false -> {'ok', {'double_wu', 'Tianjiupai.Inning':'expose'(S1221ExposedWunum, 'closed')}} end; [_ | [_ | []]] -> {'ok', {'double_wu', 'Tianjiupai.Inning':'expose'(S1221ExposedWunum, 'closed')}}; _ -> 'error' end; {'double_both', S1227ExposedBigd} -> case 'Tianjiupai.Card':'sort'(S1204SubmittedCards) of [{'wen', S1228Wen} | [{'wu', S1229Wu} | []]] -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1228Wen, maps:get(number, S1229Wu)) of {'ok', S1230Big} -> begin {_, S1231Bigd0} = 'Tianjiupai.Inning':'big_with_design_max'(S1227ExposedBigd), begin S1232NewOne = case 'Tianjiupai.Card':'big_greater'(S1230Big, maps:get(main, S1231Bigd0)) of true -> {'open', #{design => maps:get(design, S1229Wu), main => S1230Big}}; false -> 'closed' end, {'ok', {'double_both', 'Tianjiupai.Inning':'expose'(S1227ExposedBigd, S1232NewOne)}} end end; 'error' -> {'ok', {'double_both', 'Tianjiupai.Inning':'expose'(S1227ExposedBigd, 'closed')}} end; [_ | [_ | []]] -> {'ok', {'double_both', 'Tianjiupai.Inning':'expose'(S1227ExposedBigd, 'closed')}}; _ -> 'error' end; {'triple_wen', S1233ExposedBigd} -> case 'Tianjiupai.Card':'sort'(S1204SubmittedCards) of [{'wen', S1234Wen1} | [{'wen', S1235Wen2} | [{'wu', S1236Wu} | []]]] -> case 'Tianjiupai.Card':'wen_equal'(S1234Wen1, S1235Wen2) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1234Wen1, maps:get(number, S1236Wu)) of {'ok', S1237Big} -> begin {_, S1238Bigd0} = 'Tianjiupai.Inning':'big_with_design_max'(S1233ExposedBigd), begin S1239NewOne = case 'Tianjiupai.Card':'big_greater'(S1237Big, maps:get(main, S1238Bigd0)) of true -> {'open', #{design => maps:get(design, S1236Wu), main => S1237Big}}; false -> 'closed' end, {'ok', {'triple_wen', 'Tianjiupai.Inning':'expose'(S1233ExposedBigd, S1239NewOne)}} end end; 'error' -> {'ok', {'triple_wen', 'Tianjiupai.Inning':'expose'(S1233ExposedBigd, 'closed')}} end; false -> {'ok', {'triple_wen', 'Tianjiupai.Inning':'expose'(S1233ExposedBigd, 'closed')}} end; [_ | [_ | [_ | []]]] -> {'ok', {'triple_wen', 'Tianjiupai.Inning':'expose'(S1233ExposedBigd, 'closed')}}; _ -> 'error' end; {'triple_wu', S1240ExposedBig} -> case 'Tianjiupai.Card':'sort'(S1204SubmittedCards) of [{'wen', S1241Wen} | [{'wu', S1242Wu1} | [{'wu', S1243Wu2} | []]]] -> case 'Tianjiupai.Card':'wu_equal'(S1242Wu1, S1243Wu2) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1241Wen, maps:get(number, S1242Wu1)) of {'ok', S1244Big} -> begin {_, S1245Big0} = 'Tianjiupai.Inning':'big_max'(S1240ExposedBig), begin S1246NewOne = case 'Tianjiupai.Card':'big_greater'(S1244Big, S1245Big0) of true -> {'open', S1244Big}; false -> 'closed' end, {'ok', {'triple_wu', 'Tianjiupai.Inning':'expose'(S1240ExposedBig, S1246NewOne)}} end end; 'error' -> {'ok', {'triple_wu', 'Tianjiupai.Inning':'expose'(S1240ExposedBig, 'closed')}} end; false -> {'ok', {'triple_wu', 'Tianjiupai.Inning':'expose'(S1240ExposedBig, 'closed')}} end; [_ | [_ | [_ | []]]] -> {'ok', {'triple_wu', 'Tianjiupai.Inning':'expose'(S1240ExposedBig, 'closed')}}; _ -> 'error' end; {'quadruple', S1247ExposedBig} -> case 'Tianjiupai.Card':'sort'(S1204SubmittedCards) of [{'wen', S1248Wen1} | [{'wen', S1249Wen2} | [{'wu', S1250Wu1} | [{'wu', S1251Wu2} | []]]]] -> case ('Tianjiupai.Card':'wen_equal'(S1248Wen1, S1249Wen2) and 'Tianjiupai.Card':'wu_equal'(S1250Wu1, S1251Wu2)) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1248Wen1, maps:get(number, S1250Wu1)) of {'ok', S1252Big} -> begin {_, S1253Big0} = 'Tianjiupai.Inning':'big_max'(S1247ExposedBig), begin S1254NewOne = case 'Tianjiupai.Card':'big_greater'(S1252Big, S1253Big0) of true -> {'open', S1252Big}; false -> 'closed' end, {'ok', {'quadruple', 'Tianjiupai.Inning':'expose'(S1247ExposedBig, S1254NewOne)}} end end; 'error' -> {'ok', {'quadruple', 'Tianjiupai.Inning':'expose'(S1247ExposedBig, 'closed')}} end; false -> {'ok', {'quadruple', 'Tianjiupai.Inning':'expose'(S1247ExposedBig, 'closed')}} end; [_ | [_ | [_ | [_ | []]]]] -> {'ok', {'quadruple', 'Tianjiupai.Inning':'expose'(S1247ExposedBig, 'closed')}}; _ -> 'error' end end.
'get_winner'(S1256Table) -> case S1256Table of {'wuzun', S1257Exposed} -> begin 'wuzun_unit' = maps:get(first, S1257Exposed), begin ['closed' | ['closed' | ['closed' | []]]] = maps:get(subsequent, S1257Exposed), {0, [{'wu', #{design => true, number => 3}} | [{'wu', #{design => true, number => 6}} | []]], {'ok', 'zhizun'}} end end; {'wenzun', S1258Exposed} -> begin 'wenzun_minor' = maps:get(first, S1258Exposed), begin S1259MajorOrCloseds = maps:get(subsequent, S1258Exposed), begin S1261Ns = 'SesterlStdlib.List':'map'(fun(S1260X) -> case S1260X of {'open', 'wenzun_major'} -> 2; 'closed' -> 1 end end, S1259MajorOrCloseds), begin {S1264TrickIndex, S1265OneOrTwo} = 'Tianjiupai.Inning':'max_with_index'(fun(S1262N1, S1263N2) -> (S1262N1 > S1263N2) end, [1 | S1261Ns]), case S1265OneOrTwo of 1 -> {0, [{'wen', 1} | [{'wen', 1} | []]], {'ok', 'zhizun'}}; 2 -> {S1264TrickIndex, [{'wen', 2} | [{'wen', 2} | []]], {'ok', 'zhizun'}} end end end end end; {'single_wen', S1266WenExposed} -> begin {S1267TrickIndex, S1268Wen} = 'Tianjiupai.Inning':'wen_max'(S1266WenExposed), begin S1269SpecialOpt = case {maps:get(first, S1266WenExposed), S1268Wen} of {1, 1} -> {'ok', 'yaojie'}; {1, 2} -> {'ok', 'yaojie'}; _ -> 'error' end, {S1267TrickIndex, [{'wen', S1268Wen} | []], S1269SpecialOpt} end end; {'single_wu', S1270WuExposed} -> begin {S1271TrickIndex, S1272Wu} = 'Tianjiupai.Inning':'wu_max'(S1270WuExposed), begin S1273SpecialOpt = case {maps:get(number, maps:get(first, S1270WuExposed)), maps:get(number, S1272Wu)} of {3, 3} -> {'ok', 'yaojie'}; {3, 6} -> {'ok', 'yaojie'}; _ -> 'error' end, {S1271TrickIndex, [{'wu', S1272Wu} | []], S1273SpecialOpt} end end; {'double_wen', S1274WenExposed} -> begin {S1275TrickIndex, S1276Wen} = 'Tianjiupai.Inning':'wen_max'(S1274WenExposed), {S1275TrickIndex, [{'wen', S1276Wen} | [{'wen', S1276Wen} | []]], 'error'} end; {'double_wu', S1277WunumExposed} -> begin {S1278TrickIndex, S1279Wunum} = 'Tianjiupai.Inning':'wu_number_max'(S1277WunumExposed), {S1278TrickIndex, [{'wu', #{design => false, number => S1279Wunum}} | [{'wu', #{design => true, number => S1279Wunum}} | []]], 'error'} end; {'double_both', S1280BigdExposed} -> begin {S1281TrickIndex, S1282Bigd} = 'Tianjiupai.Inning':'big_with_design_max'(S1280BigdExposed), begin {S1283Wen, S1284Wunum} = 'Tianjiupai.Card':'big_to_wen_and_wu'(maps:get(main, S1282Bigd)), {S1281TrickIndex, [{'wen', S1283Wen} | [{'wu', #{design => maps:get(design, S1282Bigd), number => S1284Wunum}} | []]], 'error'} end end; {'triple_wen', S1285BigdExposed} -> begin {S1286TrickIndex, S1287Bigd} = 'Tianjiupai.Inning':'big_with_design_max'(S1285BigdExposed), begin {S1288Wen, S1289Wunum} = 'Tianjiupai.Card':'big_to_wen_and_wu'(maps:get(main, S1287Bigd)), {S1286TrickIndex, [{'wen', S1288Wen} | [{'wen', S1288Wen} | [{'wu', #{design => maps:get(design, S1287Bigd), number => S1289Wunum}} | []]]], 'error'} end end; {'triple_wu', S1290BigExposed} -> begin {S1291TrickIndex, S1292Big} = 'Tianjiupai.Inning':'big_max'(S1290BigExposed), begin {S1293Wen, S1294Wunum} = 'Tianjiupai.Card':'big_to_wen_and_wu'(S1292Big), {S1291TrickIndex, [{'wen', S1293Wen} | [{'wu', #{design => false, number => S1294Wunum}} | [{'wu', #{design => true, number => S1294Wunum}} | []]]], 'error'} end end; {'quadruple', S1295BigExposed} -> begin {S1296TrickIndex, S1297Big} = 'Tianjiupai.Inning':'big_max'(S1295BigExposed), begin {S1298Wen, S1299Wunum} = 'Tianjiupai.Card':'big_to_wen_and_wu'(S1297Big), {S1296TrickIndex, [{'wen', S1298Wen} | [{'wen', S1298Wen} | [{'wu', #{design => false, number => S1299Wunum}} | [{'wu', #{design => true, number => S1299Wunum}} | []]]]], {'ok', 'sidahe'}} end end end.
'check_last_submission_is_open'(S1301Table) -> begin S1303F = fun(S1302Exposed) -> case 'SesterlStdlib.List':'reverse'(maps:get(subsequent, S1302Exposed)) of [] -> true; [{'open', _} | _] -> true; ['closed' | _] -> false end end, case S1301Table of {'wuzun', S1304Exposed} -> S1303F(S1304Exposed); {'wenzun', S1305Exposed} -> S1303F(S1305Exposed); {'single_wen', S1306Exposed} -> S1303F(S1306Exposed); {'single_wu', S1307Exposed} -> S1303F(S1307Exposed); {'double_wen', S1308Exposed} -> S1303F(S1308Exposed); {'double_wu', S1309Exposed} -> S1303F(S1309Exposed); {'double_both', S1310Exposed} -> S1303F(S1310Exposed); {'triple_wen', S1311Exposed} -> S1303F(S1311Exposed); {'triple_wu', S1312Exposed} -> S1303F(S1312Exposed); {'quadruple', S1313Exposed} -> S1303F(S1313Exposed) end end.
'submit'(S1315SubmitterSeat, S1316SubmittedCards, S1317Inning) -> begin S1318StartSeat = maps:get(starts_at, S1317Inning), begin S1319Table0 = maps:get(table, S1317Inning), begin S1320Players0 = maps:get(players, S1317Inning), begin S1321N0 = 'Tianjiupai.Inning':'table_length'(S1319Table0), begin {S1322NumGained0, S1323QizhijieAchieverSeatOpt} = 'Tianjiupai.Inning':'count_gained'(S1320Players0), begin S1324NumSubmittedCards = 'SesterlStdlib.List':'length'(S1316SubmittedCards), case ((S1321N0 < 4) and ((S1322NumGained0 < 8) and ((0 < S1324NumSubmittedCards) and (S1324NumSubmittedCards =< 4)))) of true -> case 'Tianjiupai.Quad':'seat_equal'(S1315SubmitterSeat, 'Tianjiupai.Quad':'advance_seat'(S1318StartSeat, S1321N0)) of true -> begin S1325Submitter0 = 'Tianjiupai.Quad':'access'(S1315SubmitterSeat, S1320Players0), begin S1326SubmitterHand0 = maps:get(hand, S1325Submitter0), begin S1327SubmitterGained0 = maps:get(gained, S1325Submitter0), case 'Tianjiupai.Inning':'separate_submitted_cards'(S1326SubmitterHand0, S1316SubmittedCards) of {'ok', S1328SubmitterHand1} -> begin S1329Players1 = 'Tianjiupai.Quad':'update'(S1315SubmitterSeat, maps:put(hand, S1328SubmitterHand1, S1325Submitter0), S1320Players0), begin S1330Res = case ((S1322NumGained0 == 7) and (S1324NumSubmittedCards == 1)) of true -> case S1323QizhijieAchieverSeatOpt of {'ok', _} -> 'Tianjiupai.Inning':'update_table'(S1316SubmittedCards, S1319Table0); 'error' -> case S1327SubmitterGained0 of [] -> 'Tianjiupai.Inning':'append_closed_to_table'(S1319Table0); [_ | _] -> 'Tianjiupai.Inning':'update_table'(S1316SubmittedCards, S1319Table0) end end; false -> 'Tianjiupai.Inning':'update_table'(S1316SubmittedCards, S1319Table0) end, begin {'ok', S1331Table1} = S1330Res, begin S1332IsFront = 'Tianjiupai.Inning':'check_last_submission_is_open'(S1331Table1), begin S1333NumGained1 = (S1322NumGained0 + S1324NumSubmittedCards), case (S1321N0 == 3) of true -> begin {S1334WinnerTrickIndex, S1335Cards, S1336SpecialOpt} = 'Tianjiupai.Inning':'get_winner'(S1331Table1), begin S1337WinnerSeat = 'Tianjiupai.Quad':'advance_seat'(S1318StartSeat, S1334WinnerTrickIndex), begin S1338Winner = 'Tianjiupai.Quad':'access'(S1337WinnerSeat, S1329Players1), begin S1339WinnerGained = 'SesterlStdlib.List':'append'(maps:get(gained, S1338Winner), S1335Cards), begin S1340Players2 = 'Tianjiupai.Quad':'update'(S1337WinnerSeat, maps:put(gained, S1339WinnerGained, S1338Winner), S1329Players1), case (S1333NumGained1 == 8) of true -> begin S1342GainedQuad = 'Tianjiupai.Quad':'map'(fun(S1341P) -> maps:get(gained, S1341P) end, S1340Players2), case S1323QizhijieAchieverSeatOpt of {'ok', S1343QizhijieAchieverSeat} -> begin S1344SpecialEnd = case 'Tianjiupai.Quad':'seat_equal'(S1343QizhijieAchieverSeat, S1337WinnerSeat) of true -> 'inning_end_with_bazhijie'; false -> 'inning_end_with_qizhijie' end, {'ok', {{'wins_inning', S1343QizhijieAchieverSeat, S1331Table1, S1342GainedQuad, {'ok', S1344SpecialEnd}}, S1332IsFront}} end; 'error' -> begin S1346SpecialEndOpt = case ('SesterlStdlib.List':'length'(S1339WinnerGained) == 8) of true -> {'ok', 'inning_end_with_bazhijie'}; false -> 'SesterlStdlib.Option':'map'(fun(S1345Special) -> case S1345Special of 'zhizun' -> 'inning_end_with_zhizun'; 'sidahe' -> 'inning_end_with_sidahe'; 'yaojie' -> 'inning_end_with_yaojie' end end, S1336SpecialOpt) end, {'ok', {{'wins_inning', S1337WinnerSeat, S1331Table1, S1342GainedQuad, S1346SpecialEndOpt}, S1332IsFront}} end end end; false -> begin S1347Inning1 = #{players => S1340Players2, starts_at => S1337WinnerSeat, table => 'starting'}, begin S1349SpecialTrickOpt = 'SesterlStdlib.Option':'bind'(S1336SpecialOpt, fun(S1348Special) -> case S1348Special of 'zhizun' -> {'ok', 'trick_end_with_zhizun'}; 'sidahe' -> {'ok', 'trick_end_with_sidahe'}; 'yaojie' -> 'error' end end), {'ok', {{'wins_trick', S1337WinnerSeat, S1331Table1, 'Tianjiupai.Card':'sort'(S1328SubmitterHand1), S1349SpecialTrickOpt, S1347Inning1}, S1332IsFront}} end end end end end end end end; false -> begin S1350Inning = #{players => S1329Players1, starts_at => S1318StartSeat, table => S1331Table1}, {'ok', {{'continues', S1350Inning}, S1332IsFront}} end end end end end end end; 'error' -> 'error' end end end end; false -> 'error' end; false -> 'error' end end end end end end end.
