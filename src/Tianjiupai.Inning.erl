-module('Tianjiupai.Inning').
-export(['all_cards'/0, 'shuffle_impl'/0, 'shuffle'/0, 'start'/1, 'observe'/2, 'table_length'/1, 'count_gained'/1, 'separate_submitted_cards'/2, 'append_closed_to_table'/1, 'zip_with_indices'/1, 'max_with_index'/2, 'num_max_scheme'/2, 'wen_max'/1, 'wu_max'/1, 'wu_number_max'/1, 'big_max'/1, 'big_with_design_max'/1, 'first_exposed'/1, 'make_starting_table'/1, 'expose'/2, 'update_table'/2, 'get_winner'/1, 'check_last_submission_is_open'/1, 'submit'/3]).
    all_cards() ->
        WenHalf = lists:map(fun(N) -> {wen, N} end, lists:seq(1, 11)),
        Wus =
            lists:map(
                fun({B, N}) -> {wu, #{design => B, number => N}} end,
                [
                    {true, 3},
                    {true, 5},
                    {false, 5},
                    {true, 6},
                    {true, 7},
                    {false, 7},
                    {true, 8},
                    {false, 8},
                    {true, 9},
                    {false, 9}
                ]),
        lists:append([WenHalf, WenHalf, Wus]).
  
    shuffle_impl() ->
        %% RandomlyIndexedCards :: [{float(), card()}]
        RandomlyIndexedCards =
            lists:map(
                fun(Card) ->
                    Index = rand:uniform(),
                    {Index, Card}
                end,
                all_cards()),
        SortedIndexedCards =
            lists:sort(
                fun({Index1, _}, {Index2, _}) ->
                    Index1 =< Index2
                end,
                RandomlyIndexedCards),
        Sorted0 = lists:map(fun({_, Card}) -> Card end, SortedIndexedCards),
        {Hand0, Sorted1} = lists:split(8, Sorted0),
        {Hand1, Sorted2} = lists:split(8, Sorted1),
        {Hand2, Sorted3} = lists:split(8, Sorted2),
        {Hand3, []}      = lists:split(8, Sorted3),
        {Hand0, Hand1, Hand2, Hand3}.
  
'shuffle'() -> 'Tianjiupai.Quad':'make'('Tianjiupai.Inning':'shuffle_impl'()).
'start'(S1021Seat) -> begin S1022HandQuad = 'Tianjiupai.Inning':'shuffle'(), #{players => 'Tianjiupai.Quad':'map'(fun(S1023Hand) -> #{gained => [], hand => S1023Hand} end, S1022HandQuad), starts_at => S1021Seat, table => 'starting'} end.
'observe'(S1025Seat, S1026Inning) -> begin S1027PlayerQuad = maps:get(players, S1026Inning), begin S1028You = 'Tianjiupai.Quad':'access'(S1025Seat, S1027PlayerQuad), #{gains => 'Tianjiupai.Quad':'map'(fun(S1029P) -> maps:get(gained, S1029P) end, S1027PlayerQuad), starts_at => maps:get(starts_at, S1026Inning), table => maps:get(table, S1026Inning), your_hand => 'Tianjiupai.Card':'sort'(maps:get(hand, S1028You))} end end.
'table_length'(S1031Table) -> case S1031Table of 'starting' -> 0; {'wuzun', S1032E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1032E))); {'wenzun', S1033E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1033E))); {'single_wen', S1034E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1034E))); {'single_wu', S1035E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1035E))); {'double_wen', S1036E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1036E))); {'double_wu', S1037E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1037E))); {'double_both', S1038E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1038E))); {'triple_wen', S1039E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1039E))); {'triple_wu', S1040E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1040E))); {'quadruple', S1041E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1041E))) end.
'count_gained'(S1043Players) -> begin S1045Ns = 'Tianjiupai.Quad':'decompose'('Tianjiupai.Quad':'map'(fun(S1044P) -> 'SesterlStdlib.List':'length'(maps:get(gained, S1044P)) end, S1043Players)), begin S1046QizhijieAchieverSeatOpt = case S1045Ns of {7, _, _, _} -> {'ok', 'seat_a'}; {_, 7, _, _} -> {'ok', 'seat_b'}; {_, _, 7, _} -> {'ok', 'seat_c'}; {_, _, _, 7} -> {'ok', 'seat_d'}; _ -> 'error' end, begin S1051NumGained = begin {S1047N0, S1048N1, S1049N2, S1050N3} = S1045Ns, (S1047N0 + (S1048N1 + (S1049N2 + S1050N3))) end, {S1051NumGained, S1046QizhijieAchieverSeatOpt} end end end.
    separate_submitted_cards(SubmitterHand0, SubmittedCards) ->
        SubmitterHand1 = SubmitterHand0 -- SubmittedCards,
        case erlang:length(SubmitterHand1) + erlang:length(SubmittedCards) =:= erlang:length(SubmitterHand0) of
            true  -> {ok, SubmitterHand1};
            false -> error
        end.
  
'append_closed_to_table'(S1054Table) -> begin S1056F = fun(S1055E) -> #{first => maps:get(first, S1055E), subsequent => 'SesterlStdlib.List':'append'(maps:get(subsequent, S1055E), ['closed' | []])} end, case S1054Table of 'starting' -> 'error'; {'wuzun', S1057E} -> {'ok', {'wuzun', S1056F(S1057E)}}; {'wenzun', S1058E} -> {'ok', {'wenzun', S1056F(S1058E)}}; {'single_wen', S1059E} -> {'ok', {'single_wen', S1056F(S1059E)}}; {'single_wu', S1060E} -> {'ok', {'single_wu', S1056F(S1060E)}}; {'double_wen', S1061E} -> {'ok', {'double_wen', S1056F(S1061E)}}; {'double_wu', S1062E} -> {'ok', {'double_wu', S1056F(S1062E)}}; {'double_both', S1063E} -> {'ok', {'double_both', S1056F(S1063E)}}; {'triple_wen', S1064E} -> {'ok', {'triple_wen', S1056F(S1064E)}}; {'triple_wu', S1065E} -> {'ok', {'triple_wu', S1056F(S1065E)}}; {'quadruple', S1066E} -> {'ok', {'quadruple', S1056F(S1066E)}} end end.
    zip_with_indices(Xs) ->
        lists:zip(lists:seq(0, erlang:length(Xs) - 1), Xs).
  
    max_with_index(Greater, Xs) ->
        Pairs = zip_with_indices(Xs),
        case
            lists:sort(
               fun({_, X1}, {_, X2}) -> Greater(X1, X2) orelse X1 =:= X2 end,
               Pairs)
        of
            [Pair | _] -> Pair
        end.
  
'num_max_scheme'(S1070Greater, S1071Exposed) -> begin S1072X0 = maps:get(first, S1071Exposed), begin S1073XOrCloseds = maps:get(subsequent, S1071Exposed), begin {S1078TrickIndex, {'open', S1079X}} = 'Tianjiupai.Inning':'max_with_index'(fun(S1074Xo1, S1075Xo2) -> case {S1074Xo1, S1075Xo2} of {{'open', S1076X1}, {'open', S1077X2}} -> S1070Greater(S1076X1, S1077X2); {{'open', _}, 'closed'} -> true; _ -> false end end, [{'open', S1072X0} | S1073XOrCloseds]), {S1078TrickIndex, S1079X} end end end.
'wen_max'(S1081WenExposed) -> 'Tianjiupai.Inning':'num_max_scheme'((fun 'Tianjiupai.Card':'wen_greater'/2), S1081WenExposed).
'wu_max'(S1083WuExposed) -> 'Tianjiupai.Inning':'num_max_scheme'((fun 'Tianjiupai.Card':'wu_greater'/2), S1083WuExposed).
'wu_number_max'(S1085WunumExposed) -> 'Tianjiupai.Inning':'num_max_scheme'((fun 'Tianjiupai.Card':'wu_number_greater'/2), S1085WunumExposed).
'big_max'(S1087BigExposed) -> begin S1088Big0 = maps:get(first, S1087BigExposed), begin S1089BigOrCloseds = maps:get(subsequent, S1087BigExposed), begin {S1094TrickIndex, {'open', S1095Big}} = 'Tianjiupai.Inning':'max_with_index'(fun(S1090Bo1, S1091Bo2) -> case {S1090Bo1, S1091Bo2} of {{'open', S1092Big1}, {'open', S1093Big2}} -> 'Tianjiupai.Card':'big_greater'(S1092Big1, S1093Big2); {{'open', _}, 'closed'} -> true; _ -> false end end, [{'open', S1088Big0} | S1089BigOrCloseds]), {S1094TrickIndex, S1095Big} end end end.
'big_with_design_max'(S1097BigdExposed) -> begin S1098Bigd0 = maps:get(first, S1097BigdExposed), begin S1099BigdOrCloseds = maps:get(subsequent, S1097BigdExposed), begin {S1104TrickIndex, {'open', S1105Bigd}} = 'Tianjiupai.Inning':'max_with_index'(fun(S1100Bo1, S1101Bo2) -> case {S1100Bo1, S1101Bo2} of {{'open', S1102Bigd1}, {'open', S1103Bigd2}} -> 'Tianjiupai.Card':'big_greater'(maps:get(main, S1102Bigd1), maps:get(main, S1103Bigd2)); {{'open', _}, 'closed'} -> true; _ -> false end end, [{'open', S1098Bigd0} | S1099BigdOrCloseds]), {S1104TrickIndex, S1105Bigd} end end end.
'first_exposed'(S1107X) -> #{first => S1107X, subsequent => []}.
'make_starting_table'(S1109SubmittedCards) -> case 'Tianjiupai.Card':'sort'(S1109SubmittedCards) of [{'wen', 1} | [{'wen', 1} | []]] -> {'ok', {'wenzun', 'Tianjiupai.Inning':'first_exposed'('wenzun_minor')}}; [{'wen', S1110Wen} | []] -> {'ok', {'single_wen', 'Tianjiupai.Inning':'first_exposed'(S1110Wen)}}; [{'wu', S1111Wu} | []] -> {'ok', {'single_wu', 'Tianjiupai.Inning':'first_exposed'(S1111Wu)}}; [{'wen', S1112Wen1} | [{'wen', S1113Wen2} | []]] -> case 'Tianjiupai.Card':'wen_equal'(S1112Wen1, S1113Wen2) of true -> {'ok', {'double_wen', 'Tianjiupai.Inning':'first_exposed'(S1112Wen1)}}; false -> 'error' end; [{'wu', S1114Wu1} | [{'wu', S1115Wu2} | []]] -> case 'Tianjiupai.Card':'wu_equal'(S1114Wu1, S1115Wu2) of true -> {'ok', {'double_wu', 'Tianjiupai.Inning':'first_exposed'(maps:get(number, S1114Wu1))}}; false -> case ((maps:get(number, S1114Wu1) == 3) and (maps:get(number, S1115Wu2) == 6)) of true -> {'ok', {'wuzun', 'Tianjiupai.Inning':'first_exposed'('wuzun_unit')}}; false -> 'error' end end; [{'wen', S1116Wen} | [{'wu', S1117Wu} | []]] -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1116Wen, maps:get(number, S1117Wu)) of {'ok', S1118Big} -> {'ok', {'double_both', 'Tianjiupai.Inning':'first_exposed'(#{design => maps:get(design, S1117Wu), main => S1118Big})}}; 'error' -> 'error' end; [{'wen', S1119Wen1} | [{'wen', S1120Wen2} | [{'wu', S1121Wu} | []]]] -> case 'Tianjiupai.Card':'wen_equal'(S1119Wen1, S1120Wen2) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1119Wen1, maps:get(number, S1121Wu)) of {'ok', S1122Big} -> {'ok', {'triple_wen', 'Tianjiupai.Inning':'first_exposed'(#{design => maps:get(design, S1121Wu), main => S1122Big})}}; 'error' -> 'error' end; false -> 'error' end; [{'wen', S1123Wen} | [{'wu', S1124Wu1} | [{'wu', S1125Wu2} | []]]] -> case 'Tianjiupai.Card':'wu_equal'(S1124Wu1, S1125Wu2) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1123Wen, maps:get(number, S1124Wu1)) of {'ok', S1126Big} -> {'ok', {'triple_wu', 'Tianjiupai.Inning':'first_exposed'(S1126Big)}}; 'error' -> 'error' end; false -> 'error' end; [{'wen', S1127Wen1} | [{'wen', S1128Wen2} | [{'wu', S1129Wu1} | [{'wu', S1130Wu2} | []]]]] -> case ('Tianjiupai.Card':'wen_equal'(S1127Wen1, S1128Wen2) and 'Tianjiupai.Card':'wu_equal'(S1129Wu1, S1130Wu2)) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1127Wen1, maps:get(number, S1129Wu1)) of {'ok', S1131Big} -> {'ok', {'quadruple', 'Tianjiupai.Inning':'first_exposed'(S1131Big)}}; 'error' -> 'error' end; false -> 'error' end; _ -> 'error' end.
'expose'(S1133XExposed, S1134XNew) -> #{first => maps:get(first, S1133XExposed), subsequent => 'SesterlStdlib.List':'append'(maps:get(subsequent, S1133XExposed), [S1134XNew | []])}.
'update_table'(S1136SubmittedCards, S1137Table) -> case S1137Table of 'starting' -> 'Tianjiupai.Inning':'make_starting_table'(S1136SubmittedCards); {'wuzun', S1138ExposedOk} -> case S1136SubmittedCards of [_ | [_ | []]] -> {'ok', {'wuzun', 'Tianjiupai.Inning':'expose'(S1138ExposedOk, 'closed')}}; _ -> 'error' end; {'wenzun', S1139Exposed} -> case S1136SubmittedCards of [{'wen', 2} | [{'wen', 2} | []]] -> {'ok', {'wenzun', 'Tianjiupai.Inning':'expose'(S1139Exposed, {'open', 'wenzun_major'})}}; [_ | [_ | []]] -> {'ok', {'wenzun', 'Tianjiupai.Inning':'expose'(S1139Exposed, 'closed')}}; _ -> 'error' end; {'single_wen', S1140ExposedWen} -> case S1136SubmittedCards of [{'wen', S1141Wen} | []] -> begin {_, S1142Wen0} = 'Tianjiupai.Inning':'wen_max'(S1140ExposedWen), begin S1143NewOne = case 'Tianjiupai.Card':'wen_greater'(S1141Wen, S1142Wen0) of true -> {'open', S1141Wen}; false -> 'closed' end, {'ok', {'single_wen', 'Tianjiupai.Inning':'expose'(S1140ExposedWen, S1143NewOne)}} end end; [_ | []] -> {'ok', {'single_wen', 'Tianjiupai.Inning':'expose'(S1140ExposedWen, 'closed')}}; _ -> 'error' end; {'single_wu', S1144ExposedWu} -> case S1136SubmittedCards of [{'wu', S1145Wu} | []] -> begin {_, S1146Wu0} = 'Tianjiupai.Inning':'wu_max'(S1144ExposedWu), begin S1147NewOne = case 'Tianjiupai.Card':'wu_greater'(S1145Wu, S1146Wu0) of true -> {'open', S1145Wu}; false -> 'closed' end, {'ok', {'single_wu', 'Tianjiupai.Inning':'expose'(S1144ExposedWu, S1147NewOne)}} end end; [_ | []] -> {'ok', {'single_wu', 'Tianjiupai.Inning':'expose'(S1144ExposedWu, 'closed')}}; _ -> 'error' end; {'double_wen', S1148ExposedWen} -> case S1136SubmittedCards of [{'wen', S1149Wen1} | [{'wen', S1150Wen2} | []]] -> case 'Tianjiupai.Card':'wen_equal'(S1149Wen1, S1150Wen2) of true -> begin {_, S1151Wen0} = 'Tianjiupai.Inning':'wen_max'(S1148ExposedWen), begin S1152NewOne = case 'Tianjiupai.Card':'wen_greater'(S1149Wen1, S1151Wen0) of true -> {'open', S1149Wen1}; false -> 'closed' end, {'ok', {'double_wen', 'Tianjiupai.Inning':'expose'(S1148ExposedWen, S1152NewOne)}} end end; false -> {'ok', {'double_wen', 'Tianjiupai.Inning':'expose'(S1148ExposedWen, 'closed')}} end; [_ | [_ | []]] -> {'ok', {'double_wen', 'Tianjiupai.Inning':'expose'(S1148ExposedWen, 'closed')}}; _ -> 'error' end; {'double_wu', S1153ExposedWunum} -> case S1136SubmittedCards of [{'wu', S1154Wu1} | [{'wu', S1155Wu2} | []]] -> case 'Tianjiupai.Card':'wu_equal'(S1154Wu1, S1155Wu2) of true -> begin S1156Wunum1 = maps:get(number, S1154Wu1), begin {_, S1157Wunum0} = 'Tianjiupai.Inning':'wu_number_max'(S1153ExposedWunum), begin S1158NewOne = case 'Tianjiupai.Card':'wu_number_greater'(S1156Wunum1, S1157Wunum0) of true -> {'open', S1156Wunum1}; false -> 'closed' end, {'ok', {'double_wu', 'Tianjiupai.Inning':'expose'(S1153ExposedWunum, S1158NewOne)}} end end end; false -> {'ok', {'double_wu', 'Tianjiupai.Inning':'expose'(S1153ExposedWunum, 'closed')}} end; [_ | [_ | []]] -> {'ok', {'double_wu', 'Tianjiupai.Inning':'expose'(S1153ExposedWunum, 'closed')}}; _ -> 'error' end; {'double_both', S1159ExposedBigd} -> case 'Tianjiupai.Card':'sort'(S1136SubmittedCards) of [{'wen', S1160Wen} | [{'wu', S1161Wu} | []]] -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1160Wen, maps:get(number, S1161Wu)) of {'ok', S1162Big} -> begin {_, S1163Bigd0} = 'Tianjiupai.Inning':'big_with_design_max'(S1159ExposedBigd), begin S1164NewOne = case 'Tianjiupai.Card':'big_greater'(S1162Big, maps:get(main, S1163Bigd0)) of true -> {'open', #{design => maps:get(design, S1161Wu), main => S1162Big}}; false -> 'closed' end, {'ok', {'double_both', 'Tianjiupai.Inning':'expose'(S1159ExposedBigd, S1164NewOne)}} end end; 'error' -> {'ok', {'double_both', 'Tianjiupai.Inning':'expose'(S1159ExposedBigd, 'closed')}} end; [_ | [_ | []]] -> {'ok', {'double_both', 'Tianjiupai.Inning':'expose'(S1159ExposedBigd, 'closed')}}; _ -> 'error' end; {'triple_wen', S1165ExposedBigd} -> case 'Tianjiupai.Card':'sort'(S1136SubmittedCards) of [{'wen', S1166Wen1} | [{'wen', S1167Wen2} | [{'wu', S1168Wu} | []]]] -> case 'Tianjiupai.Card':'wen_equal'(S1166Wen1, S1167Wen2) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1166Wen1, maps:get(number, S1168Wu)) of {'ok', S1169Big} -> begin {_, S1170Bigd0} = 'Tianjiupai.Inning':'big_with_design_max'(S1165ExposedBigd), begin S1171NewOne = case 'Tianjiupai.Card':'big_greater'(S1169Big, maps:get(main, S1170Bigd0)) of true -> {'open', #{design => maps:get(design, S1168Wu), main => S1169Big}}; false -> 'closed' end, {'ok', {'triple_wen', 'Tianjiupai.Inning':'expose'(S1165ExposedBigd, S1171NewOne)}} end end; 'error' -> {'ok', {'triple_wen', 'Tianjiupai.Inning':'expose'(S1165ExposedBigd, 'closed')}} end; false -> {'ok', {'triple_wen', 'Tianjiupai.Inning':'expose'(S1165ExposedBigd, 'closed')}} end; [_ | [_ | [_ | []]]] -> {'ok', {'triple_wen', 'Tianjiupai.Inning':'expose'(S1165ExposedBigd, 'closed')}}; _ -> 'error' end; {'triple_wu', S1172ExposedBig} -> case 'Tianjiupai.Card':'sort'(S1136SubmittedCards) of [{'wen', S1173Wen} | [{'wu', S1174Wu1} | [{'wu', S1175Wu2} | []]]] -> case 'Tianjiupai.Card':'wu_equal'(S1174Wu1, S1175Wu2) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1173Wen, maps:get(number, S1174Wu1)) of {'ok', S1176Big} -> begin {_, S1177Big0} = 'Tianjiupai.Inning':'big_max'(S1172ExposedBig), begin S1178NewOne = case 'Tianjiupai.Card':'big_greater'(S1176Big, S1177Big0) of true -> {'open', S1176Big}; false -> 'closed' end, {'ok', {'triple_wu', 'Tianjiupai.Inning':'expose'(S1172ExposedBig, S1178NewOne)}} end end; 'error' -> {'ok', {'triple_wu', 'Tianjiupai.Inning':'expose'(S1172ExposedBig, 'closed')}} end; false -> {'ok', {'triple_wu', 'Tianjiupai.Inning':'expose'(S1172ExposedBig, 'closed')}} end; [_ | [_ | [_ | []]]] -> {'ok', {'triple_wu', 'Tianjiupai.Inning':'expose'(S1172ExposedBig, 'closed')}}; _ -> 'error' end; {'quadruple', S1179ExposedBig} -> case 'Tianjiupai.Card':'sort'(S1136SubmittedCards) of [{'wen', S1180Wen1} | [{'wen', S1181Wen2} | [{'wu', S1182Wu1} | [{'wu', S1183Wu2} | []]]]] -> case ('Tianjiupai.Card':'wen_equal'(S1180Wen1, S1181Wen2) and 'Tianjiupai.Card':'wu_equal'(S1182Wu1, S1183Wu2)) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1180Wen1, maps:get(number, S1182Wu1)) of {'ok', S1184Big} -> begin {_, S1185Big0} = 'Tianjiupai.Inning':'big_max'(S1179ExposedBig), begin S1186NewOne = case 'Tianjiupai.Card':'big_greater'(S1184Big, S1185Big0) of true -> {'open', S1184Big}; false -> 'closed' end, {'ok', {'quadruple', 'Tianjiupai.Inning':'expose'(S1179ExposedBig, S1186NewOne)}} end end; 'error' -> {'ok', {'quadruple', 'Tianjiupai.Inning':'expose'(S1179ExposedBig, 'closed')}} end; false -> {'ok', {'quadruple', 'Tianjiupai.Inning':'expose'(S1179ExposedBig, 'closed')}} end; [_ | [_ | [_ | [_ | []]]]] -> {'ok', {'quadruple', 'Tianjiupai.Inning':'expose'(S1179ExposedBig, 'closed')}}; _ -> 'error' end end.
'get_winner'(S1188Table) -> case S1188Table of {'wuzun', S1189Exposed} -> begin 'wuzun_unit' = maps:get(first, S1189Exposed), begin ['closed' | ['closed' | ['closed' | []]]] = maps:get(subsequent, S1189Exposed), {0, [{'wu', #{design => true, number => 3}} | [{'wu', #{design => true, number => 6}} | []]], {'ok', 'zhizun'}} end end; {'wenzun', S1190Exposed} -> begin 'wenzun_minor' = maps:get(first, S1190Exposed), begin S1191MajorOrCloseds = maps:get(subsequent, S1190Exposed), begin S1193Ns = 'SesterlStdlib.List':'map'(fun(S1192X) -> case S1192X of {'open', 'wenzun_major'} -> 2; 'closed' -> 1 end end, S1191MajorOrCloseds), begin {S1196TrickIndex, S1197OneOrTwo} = 'Tianjiupai.Inning':'max_with_index'(fun(S1194N1, S1195N2) -> (S1194N1 > S1195N2) end, [1 | S1193Ns]), case S1197OneOrTwo of 1 -> {0, [{'wen', 1} | [{'wen', 1} | []]], {'ok', 'zhizun'}}; 2 -> {S1196TrickIndex, [{'wen', 2} | [{'wen', 2} | []]], {'ok', 'zhizun'}} end end end end end; {'single_wen', S1198WenExposed} -> begin {S1199TrickIndex, S1200Wen} = 'Tianjiupai.Inning':'wen_max'(S1198WenExposed), begin S1201SpecialOpt = case {maps:get(first, S1198WenExposed), S1200Wen} of {1, 1} -> {'ok', 'yaojie'}; {1, 2} -> {'ok', 'yaojie'}; _ -> 'error' end, {S1199TrickIndex, [{'wen', S1200Wen} | []], S1201SpecialOpt} end end; {'single_wu', S1202WuExposed} -> begin {S1203TrickIndex, S1204Wu} = 'Tianjiupai.Inning':'wu_max'(S1202WuExposed), begin S1205SpecialOpt = case {maps:get(number, maps:get(first, S1202WuExposed)), maps:get(number, S1204Wu)} of {3, 3} -> {'ok', 'yaojie'}; {3, 6} -> {'ok', 'yaojie'}; _ -> 'error' end, {S1203TrickIndex, [{'wu', S1204Wu} | []], S1205SpecialOpt} end end; {'double_wen', S1206WenExposed} -> begin {S1207TrickIndex, S1208Wen} = 'Tianjiupai.Inning':'wen_max'(S1206WenExposed), {S1207TrickIndex, [{'wen', S1208Wen} | [{'wen', S1208Wen} | []]], 'error'} end; {'double_wu', S1209WunumExposed} -> begin {S1210TrickIndex, S1211Wunum} = 'Tianjiupai.Inning':'wu_number_max'(S1209WunumExposed), {S1210TrickIndex, [{'wu', #{design => false, number => S1211Wunum}} | [{'wu', #{design => true, number => S1211Wunum}} | []]], 'error'} end; {'double_both', S1212BigdExposed} -> begin {S1213TrickIndex, S1214Bigd} = 'Tianjiupai.Inning':'big_with_design_max'(S1212BigdExposed), begin {S1215Wen, S1216Wunum} = 'Tianjiupai.Card':'big_to_wen_and_wu'(maps:get(main, S1214Bigd)), {S1213TrickIndex, [{'wen', S1215Wen} | [{'wu', #{design => maps:get(design, S1214Bigd), number => S1216Wunum}} | []]], 'error'} end end; {'triple_wen', S1217BigdExposed} -> begin {S1218TrickIndex, S1219Bigd} = 'Tianjiupai.Inning':'big_with_design_max'(S1217BigdExposed), begin {S1220Wen, S1221Wunum} = 'Tianjiupai.Card':'big_to_wen_and_wu'(maps:get(main, S1219Bigd)), {S1218TrickIndex, [{'wen', S1220Wen} | [{'wen', S1220Wen} | [{'wu', #{design => maps:get(design, S1219Bigd), number => S1221Wunum}} | []]]], 'error'} end end; {'triple_wu', S1222BigExposed} -> begin {S1223TrickIndex, S1224Big} = 'Tianjiupai.Inning':'big_max'(S1222BigExposed), begin {S1225Wen, S1226Wunum} = 'Tianjiupai.Card':'big_to_wen_and_wu'(S1224Big), {S1223TrickIndex, [{'wen', S1225Wen} | [{'wu', #{design => false, number => S1226Wunum}} | [{'wu', #{design => true, number => S1226Wunum}} | []]]], 'error'} end end; {'quadruple', S1227BigExposed} -> begin {S1228TrickIndex, S1229Big} = 'Tianjiupai.Inning':'big_max'(S1227BigExposed), begin {S1230Wen, S1231Wunum} = 'Tianjiupai.Card':'big_to_wen_and_wu'(S1229Big), {S1228TrickIndex, [{'wen', S1230Wen} | [{'wen', S1230Wen} | [{'wu', #{design => false, number => S1231Wunum}} | [{'wu', #{design => true, number => S1231Wunum}} | []]]]], {'ok', 'sidahe'}} end end end.
'check_last_submission_is_open'(S1233Table) -> begin S1235F = fun(S1234Exposed) -> case 'SesterlStdlib.List':'reverse'(maps:get(subsequent, S1234Exposed)) of [] -> true; [{'open', _} | _] -> true; ['closed' | _] -> false end end, case S1233Table of {'wuzun', S1236Exposed} -> S1235F(S1236Exposed); {'wenzun', S1237Exposed} -> S1235F(S1237Exposed); {'single_wen', S1238Exposed} -> S1235F(S1238Exposed); {'single_wu', S1239Exposed} -> S1235F(S1239Exposed); {'double_wen', S1240Exposed} -> S1235F(S1240Exposed); {'double_wu', S1241Exposed} -> S1235F(S1241Exposed); {'double_both', S1242Exposed} -> S1235F(S1242Exposed); {'triple_wen', S1243Exposed} -> S1235F(S1243Exposed); {'triple_wu', S1244Exposed} -> S1235F(S1244Exposed); {'quadruple', S1245Exposed} -> S1235F(S1245Exposed) end end.
'submit'(S1247SubmitterSeat, S1248SubmittedCards, S1249Inning) -> begin S1250StartSeat = maps:get(starts_at, S1249Inning), begin S1251Table0 = maps:get(table, S1249Inning), begin S1252Players0 = maps:get(players, S1249Inning), begin S1253N0 = 'Tianjiupai.Inning':'table_length'(S1251Table0), begin {S1254NumGained0, S1255QizhijieAchieverSeatOpt} = 'Tianjiupai.Inning':'count_gained'(S1252Players0), begin S1256NumSubmittedCards = 'SesterlStdlib.List':'length'(S1248SubmittedCards), case ((S1253N0 < 4) and ((S1254NumGained0 < 8) and ((0 < S1256NumSubmittedCards) and (S1256NumSubmittedCards =< 4)))) of true -> case 'Tianjiupai.Quad':'seat_equal'(S1247SubmitterSeat, 'Tianjiupai.Quad':'advance_seat'(S1250StartSeat, S1253N0)) of true -> begin S1257Submitter0 = 'Tianjiupai.Quad':'access'(S1247SubmitterSeat, S1252Players0), begin S1258SubmitterHand0 = maps:get(hand, S1257Submitter0), begin S1259SubmitterGained0 = maps:get(gained, S1257Submitter0), case 'Tianjiupai.Inning':'separate_submitted_cards'(S1258SubmitterHand0, S1248SubmittedCards) of {'ok', S1260SubmitterHand1} -> begin S1261Players1 = 'Tianjiupai.Quad':'update'(S1247SubmitterSeat, maps:put(hand, S1260SubmitterHand1, S1257Submitter0), S1252Players0), begin S1262Res = case ((S1254NumGained0 == 7) and (S1256NumSubmittedCards == 1)) of true -> case S1255QizhijieAchieverSeatOpt of {'ok', _} -> 'Tianjiupai.Inning':'update_table'(S1248SubmittedCards, S1251Table0); 'error' -> case S1259SubmitterGained0 of [] -> 'Tianjiupai.Inning':'append_closed_to_table'(S1251Table0); [_ | _] -> 'Tianjiupai.Inning':'update_table'(S1248SubmittedCards, S1251Table0) end end; false -> 'Tianjiupai.Inning':'update_table'(S1248SubmittedCards, S1251Table0) end, begin {'ok', S1263Table1} = S1262Res, begin S1264IsFront = 'Tianjiupai.Inning':'check_last_submission_is_open'(S1263Table1), begin S1265NumGained1 = (S1254NumGained0 + S1256NumSubmittedCards), case (S1253N0 == 3) of true -> begin {S1266WinnerTrickIndex, S1267Cards, S1268SpecialOpt} = 'Tianjiupai.Inning':'get_winner'(S1263Table1), begin S1269WinnerSeat = 'Tianjiupai.Quad':'advance_seat'(S1250StartSeat, S1266WinnerTrickIndex), begin S1270Winner = 'Tianjiupai.Quad':'access'(S1269WinnerSeat, S1261Players1), begin S1271WinnerGained = 'SesterlStdlib.List':'append'(maps:get(gained, S1270Winner), S1267Cards), begin S1272Players2 = 'Tianjiupai.Quad':'update'(S1269WinnerSeat, maps:put(gained, S1271WinnerGained, S1270Winner), S1261Players1), case (S1265NumGained1 == 8) of true -> begin S1274GainedQuad = 'Tianjiupai.Quad':'map'(fun(S1273P) -> maps:get(gained, S1273P) end, S1272Players2), case S1255QizhijieAchieverSeatOpt of {'ok', S1275QizhijieAchieverSeat} -> begin S1276SpecialEnd = case 'Tianjiupai.Quad':'seat_equal'(S1275QizhijieAchieverSeat, S1269WinnerSeat) of true -> 'inning_end_with_bazhijie'; false -> 'inning_end_with_qizhijie' end, {'ok', {{'wins_inning', S1275QizhijieAchieverSeat, S1263Table1, S1274GainedQuad, {'ok', S1276SpecialEnd}}, S1264IsFront}} end; 'error' -> begin S1278SpecialEndOpt = case ('SesterlStdlib.List':'length'(S1271WinnerGained) == 8) of true -> {'ok', 'inning_end_with_bazhijie'}; false -> 'SesterlStdlib.Option':'map'(fun(S1277Special) -> case S1277Special of 'zhizun' -> 'inning_end_with_zhizun'; 'sidahe' -> 'inning_end_with_sidahe'; 'yaojie' -> 'inning_end_with_yaojie' end end, S1268SpecialOpt) end, {'ok', {{'wins_inning', S1269WinnerSeat, S1263Table1, S1274GainedQuad, S1278SpecialEndOpt}, S1264IsFront}} end end end; false -> begin S1279Inning1 = #{players => S1272Players2, starts_at => S1269WinnerSeat, table => 'starting'}, begin S1281SpecialTrickOpt = 'SesterlStdlib.Option':'bind'(S1268SpecialOpt, fun(S1280Special) -> case S1280Special of 'zhizun' -> {'ok', 'trick_end_with_zhizun'}; 'sidahe' -> {'ok', 'trick_end_with_sidahe'}; 'yaojie' -> 'error' end end), {'ok', {{'wins_trick', S1269WinnerSeat, S1263Table1, 'Tianjiupai.Card':'sort'(S1260SubmitterHand1), S1281SpecialTrickOpt, S1279Inning1}, S1264IsFront}} end end end end end end end end; false -> begin S1282Inning = #{players => S1261Players1, starts_at => S1250StartSeat, table => S1263Table1}, {'ok', {{'continues', S1282Inning}, S1264IsFront}} end end end end end end end; 'error' -> 'error' end end end end; false -> 'error' end; false -> 'error' end end end end end end end.
