-module('Tianjiupai.Inning').
-export(['all_cards'/0, 'shuffle_impl'/0, 'shuffle'/0, 'start'/1, 'observe'/2, 'table_length'/1, 'count_gained'/1, 'separate_submitted_cards'/2, 'append_closed_to_table'/1, 'zip_with_indices'/1, 'max_with_index'/2, 'num_max_scheme'/2, 'wen_max'/1, 'wu_max'/1, 'wu_number_max'/1, 'big_max'/1, 'big_with_design_max'/1, 'first_exposed'/1, 'make_starting_table'/1, 'expose'/2, 'update_table'/2, 'get_winner'/1, 'check_last_submission_is_open'/1, 'submit'/3]).
    all_cards() ->
        WenHalf = lists:map(fun(N) -> {wen, N} end, lists:seq(1, 11)),
        Wus =
            lists:map(
                fun({B, N}) -> {wu, #{design => B, number => N}} end,
                [
                    {true, 3},
                    {true, 5},
                    {false, 5},
                    {true, 6},
                    {true, 7},
                    {false, 7},
                    {true, 8},
                    {false, 8},
                    {true, 9},
                    {false, 9}
                ]),
        lists:append([WenHalf, WenHalf, Wus]).
  
    shuffle_impl() ->
        %% RandomlyIndexedCards :: [{float(), card()}]
        RandomlyIndexedCards =
            lists:map(
                fun(Card) ->
                    Index = rand:uniform(),
                    {Index, Card}
                end,
                all_cards()),
        SortedIndexedCards =
            lists:sort(
                fun({Index1, _}, {Index2, _}) ->
                    Index1 =< Index2
                end,
                RandomlyIndexedCards),
        Sorted0 = lists:map(fun({_, Card}) -> Card end, SortedIndexedCards),
        {Hand0, Sorted1} = lists:split(8, Sorted0),
        {Hand1, Sorted2} = lists:split(8, Sorted1),
        {Hand2, Sorted3} = lists:split(8, Sorted2),
        {Hand3, []}      = lists:split(8, Sorted3),
        {Hand0, Hand1, Hand2, Hand3}.
  
'shuffle'() -> 'Tianjiupai.Quad':'make'('Tianjiupai.Inning':'shuffle_impl'()).
'start'(S1086Seat) -> begin S1087HandQuad = 'Tianjiupai.Inning':'shuffle'(), #{players => 'Tianjiupai.Quad':'map'(fun(S1088Hand) -> #{gained => [], hand => S1088Hand} end, S1087HandQuad), starts_at => S1086Seat, table => 'starting'} end.
'observe'(S1090Seat, S1091Inning) -> begin S1092PlayerQuad = maps:get(players, S1091Inning), begin S1093You = 'Tianjiupai.Quad':'access'(S1090Seat, S1092PlayerQuad), #{gains => 'Tianjiupai.Quad':'map'(fun(S1094P) -> maps:get(gained, S1094P) end, S1092PlayerQuad), starts_at => maps:get(starts_at, S1091Inning), table => maps:get(table, S1091Inning), your_hand => 'Tianjiupai.Card':'sort'(maps:get(hand, S1093You))} end end.
'table_length'(S1096Table) -> case S1096Table of 'starting' -> 0; {'wuzun', S1097E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1097E))); {'wenzun', S1098E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1098E))); {'single_wen', S1099E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1099E))); {'single_wu', S1100E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1100E))); {'double_wen', S1101E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1101E))); {'double_wu', S1102E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1102E))); {'double_both', S1103E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1103E))); {'triple_wen', S1104E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1104E))); {'triple_wu', S1105E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1105E))); {'quadruple', S1106E} -> (1 + 'SesterlStdlib.List':'length'(maps:get(subsequent, S1106E))) end.
'count_gained'(S1108Players) -> begin S1110Ns = 'Tianjiupai.Quad':'decompose'('Tianjiupai.Quad':'map'(fun(S1109P) -> 'SesterlStdlib.List':'length'(maps:get(gained, S1109P)) end, S1108Players)), begin S1111QizhijieAchieverSeatOpt = case S1110Ns of {7, _, _, _} -> {'ok', 'seat_a'}; {_, 7, _, _} -> {'ok', 'seat_b'}; {_, _, 7, _} -> {'ok', 'seat_c'}; {_, _, _, 7} -> {'ok', 'seat_d'}; _ -> 'error' end, begin S1116NumGained = begin {S1112N0, S1113N1, S1114N2, S1115N3} = S1110Ns, (S1112N0 + (S1113N1 + (S1114N2 + S1115N3))) end, {S1116NumGained, S1111QizhijieAchieverSeatOpt} end end end.
    separate_submitted_cards(SubmitterHand0, SubmittedCards) ->
        SubmitterHand1 = SubmitterHand0 -- SubmittedCards,
        case erlang:length(SubmitterHand1) + erlang:length(SubmittedCards) =:= erlang:length(SubmitterHand0) of
            true  -> {ok, SubmitterHand1};
            false -> error
        end.
  
'append_closed_to_table'(S1119Table) -> begin S1121F = fun(S1120E) -> #{first => maps:get(first, S1120E), subsequent => 'SesterlStdlib.List':'append'(maps:get(subsequent, S1120E), ['closed' | []])} end, case S1119Table of 'starting' -> 'error'; {'wuzun', S1122E} -> {'ok', {'wuzun', S1121F(S1122E)}}; {'wenzun', S1123E} -> {'ok', {'wenzun', S1121F(S1123E)}}; {'single_wen', S1124E} -> {'ok', {'single_wen', S1121F(S1124E)}}; {'single_wu', S1125E} -> {'ok', {'single_wu', S1121F(S1125E)}}; {'double_wen', S1126E} -> {'ok', {'double_wen', S1121F(S1126E)}}; {'double_wu', S1127E} -> {'ok', {'double_wu', S1121F(S1127E)}}; {'double_both', S1128E} -> {'ok', {'double_both', S1121F(S1128E)}}; {'triple_wen', S1129E} -> {'ok', {'triple_wen', S1121F(S1129E)}}; {'triple_wu', S1130E} -> {'ok', {'triple_wu', S1121F(S1130E)}}; {'quadruple', S1131E} -> {'ok', {'quadruple', S1121F(S1131E)}} end end.
    zip_with_indices(Xs) ->
        lists:zip(lists:seq(0, erlang:length(Xs) - 1), Xs).
  
    max_with_index(Greater, Xs) ->
        Pairs = zip_with_indices(Xs),
        case
            lists:sort(
               fun({_, X1}, {_, X2}) -> Greater(X1, X2) orelse X1 =:= X2 end,
               Pairs)
        of
            [Pair | _] -> Pair
        end.
  
'num_max_scheme'(S1135Greater, S1136Exposed) -> begin S1137X0 = maps:get(first, S1136Exposed), begin S1138XOrCloseds = maps:get(subsequent, S1136Exposed), begin {S1143TrickIndex, {'open', S1144X}} = 'Tianjiupai.Inning':'max_with_index'(fun(S1139Xo1, S1140Xo2) -> case {S1139Xo1, S1140Xo2} of {{'open', S1141X1}, {'open', S1142X2}} -> S1135Greater(S1141X1, S1142X2); {{'open', _}, 'closed'} -> true; _ -> false end end, [{'open', S1137X0} | S1138XOrCloseds]), {S1143TrickIndex, S1144X} end end end.
'wen_max'(S1146WenExposed) -> 'Tianjiupai.Inning':'num_max_scheme'((fun 'Tianjiupai.Card':'wen_greater'/2), S1146WenExposed).
'wu_max'(S1148WuExposed) -> 'Tianjiupai.Inning':'num_max_scheme'((fun 'Tianjiupai.Card':'wu_greater'/2), S1148WuExposed).
'wu_number_max'(S1150WunumExposed) -> 'Tianjiupai.Inning':'num_max_scheme'((fun 'Tianjiupai.Card':'wu_number_greater'/2), S1150WunumExposed).
'big_max'(S1152BigExposed) -> begin S1153Big0 = maps:get(first, S1152BigExposed), begin S1154BigOrCloseds = maps:get(subsequent, S1152BigExposed), begin {S1159TrickIndex, {'open', S1160Big}} = 'Tianjiupai.Inning':'max_with_index'(fun(S1155Bo1, S1156Bo2) -> case {S1155Bo1, S1156Bo2} of {{'open', S1157Big1}, {'open', S1158Big2}} -> 'Tianjiupai.Card':'big_greater'(S1157Big1, S1158Big2); {{'open', _}, 'closed'} -> true; _ -> false end end, [{'open', S1153Big0} | S1154BigOrCloseds]), {S1159TrickIndex, S1160Big} end end end.
'big_with_design_max'(S1162BigdExposed) -> begin S1163Bigd0 = maps:get(first, S1162BigdExposed), begin S1164BigdOrCloseds = maps:get(subsequent, S1162BigdExposed), begin {S1169TrickIndex, {'open', S1170Bigd}} = 'Tianjiupai.Inning':'max_with_index'(fun(S1165Bo1, S1166Bo2) -> case {S1165Bo1, S1166Bo2} of {{'open', S1167Bigd1}, {'open', S1168Bigd2}} -> 'Tianjiupai.Card':'big_greater'(maps:get(main, S1167Bigd1), maps:get(main, S1168Bigd2)); {{'open', _}, 'closed'} -> true; _ -> false end end, [{'open', S1163Bigd0} | S1164BigdOrCloseds]), {S1169TrickIndex, S1170Bigd} end end end.
'first_exposed'(S1172X) -> #{first => S1172X, subsequent => []}.
'make_starting_table'(S1174SubmittedCards) -> case 'Tianjiupai.Card':'sort'(S1174SubmittedCards) of [{'wen', 1} | [{'wen', 1} | []]] -> {'ok', {'wenzun', 'Tianjiupai.Inning':'first_exposed'('wenzun_minor')}}; [{'wen', S1175Wen} | []] -> {'ok', {'single_wen', 'Tianjiupai.Inning':'first_exposed'(S1175Wen)}}; [{'wu', S1176Wu} | []] -> {'ok', {'single_wu', 'Tianjiupai.Inning':'first_exposed'(S1176Wu)}}; [{'wen', S1177Wen1} | [{'wen', S1178Wen2} | []]] -> case 'Tianjiupai.Card':'wen_equal'(S1177Wen1, S1178Wen2) of true -> {'ok', {'double_wen', 'Tianjiupai.Inning':'first_exposed'(S1177Wen1)}}; false -> 'error' end; [{'wu', S1179Wu1} | [{'wu', S1180Wu2} | []]] -> case 'Tianjiupai.Card':'wu_equal'(S1179Wu1, S1180Wu2) of true -> {'ok', {'double_wu', 'Tianjiupai.Inning':'first_exposed'(maps:get(number, S1179Wu1))}}; false -> case ((maps:get(number, S1179Wu1) == 3) and (maps:get(number, S1180Wu2) == 6)) of true -> {'ok', {'wuzun', 'Tianjiupai.Inning':'first_exposed'('wuzun_unit')}}; false -> 'error' end end; [{'wen', S1181Wen} | [{'wu', S1182Wu} | []]] -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1181Wen, maps:get(number, S1182Wu)) of {'ok', S1183Big} -> {'ok', {'double_both', 'Tianjiupai.Inning':'first_exposed'(#{design => maps:get(design, S1182Wu), main => S1183Big})}}; 'error' -> 'error' end; [{'wen', S1184Wen1} | [{'wen', S1185Wen2} | [{'wu', S1186Wu} | []]]] -> case 'Tianjiupai.Card':'wen_equal'(S1184Wen1, S1185Wen2) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1184Wen1, maps:get(number, S1186Wu)) of {'ok', S1187Big} -> {'ok', {'triple_wen', 'Tianjiupai.Inning':'first_exposed'(#{design => maps:get(design, S1186Wu), main => S1187Big})}}; 'error' -> 'error' end; false -> 'error' end; [{'wen', S1188Wen} | [{'wu', S1189Wu1} | [{'wu', S1190Wu2} | []]]] -> case 'Tianjiupai.Card':'wu_equal'(S1189Wu1, S1190Wu2) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1188Wen, maps:get(number, S1189Wu1)) of {'ok', S1191Big} -> {'ok', {'triple_wu', 'Tianjiupai.Inning':'first_exposed'(S1191Big)}}; 'error' -> 'error' end; false -> 'error' end; [{'wen', S1192Wen1} | [{'wen', S1193Wen2} | [{'wu', S1194Wu1} | [{'wu', S1195Wu2} | []]]]] -> case ('Tianjiupai.Card':'wen_equal'(S1192Wen1, S1193Wen2) and 'Tianjiupai.Card':'wu_equal'(S1194Wu1, S1195Wu2)) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1192Wen1, maps:get(number, S1194Wu1)) of {'ok', S1196Big} -> {'ok', {'quadruple', 'Tianjiupai.Inning':'first_exposed'(S1196Big)}}; 'error' -> 'error' end; false -> 'error' end; _ -> 'error' end.
'expose'(S1198XExposed, S1199XNew) -> #{first => maps:get(first, S1198XExposed), subsequent => 'SesterlStdlib.List':'append'(maps:get(subsequent, S1198XExposed), [S1199XNew | []])}.
'update_table'(S1201SubmittedCards, S1202Table) -> case S1202Table of 'starting' -> 'Tianjiupai.Inning':'make_starting_table'(S1201SubmittedCards); {'wuzun', S1203ExposedOk} -> case S1201SubmittedCards of [_ | [_ | []]] -> {'ok', {'wuzun', 'Tianjiupai.Inning':'expose'(S1203ExposedOk, 'closed')}}; _ -> 'error' end; {'wenzun', S1204Exposed} -> case S1201SubmittedCards of [{'wen', 2} | [{'wen', 2} | []]] -> {'ok', {'wenzun', 'Tianjiupai.Inning':'expose'(S1204Exposed, {'open', 'wenzun_major'})}}; [_ | [_ | []]] -> {'ok', {'wenzun', 'Tianjiupai.Inning':'expose'(S1204Exposed, 'closed')}}; _ -> 'error' end; {'single_wen', S1205ExposedWen} -> case S1201SubmittedCards of [{'wen', S1206Wen} | []] -> begin {_, S1207Wen0} = 'Tianjiupai.Inning':'wen_max'(S1205ExposedWen), begin S1208NewOne = case 'Tianjiupai.Card':'wen_greater'(S1206Wen, S1207Wen0) of true -> {'open', S1206Wen}; false -> 'closed' end, {'ok', {'single_wen', 'Tianjiupai.Inning':'expose'(S1205ExposedWen, S1208NewOne)}} end end; [_ | []] -> {'ok', {'single_wen', 'Tianjiupai.Inning':'expose'(S1205ExposedWen, 'closed')}}; _ -> 'error' end; {'single_wu', S1209ExposedWu} -> case S1201SubmittedCards of [{'wu', S1210Wu} | []] -> begin {_, S1211Wu0} = 'Tianjiupai.Inning':'wu_max'(S1209ExposedWu), begin S1212NewOne = case 'Tianjiupai.Card':'wu_greater'(S1210Wu, S1211Wu0) of true -> {'open', S1210Wu}; false -> 'closed' end, {'ok', {'single_wu', 'Tianjiupai.Inning':'expose'(S1209ExposedWu, S1212NewOne)}} end end; [_ | []] -> {'ok', {'single_wu', 'Tianjiupai.Inning':'expose'(S1209ExposedWu, 'closed')}}; _ -> 'error' end; {'double_wen', S1213ExposedWen} -> case S1201SubmittedCards of [{'wen', S1214Wen1} | [{'wen', S1215Wen2} | []]] -> case 'Tianjiupai.Card':'wen_equal'(S1214Wen1, S1215Wen2) of true -> begin {_, S1216Wen0} = 'Tianjiupai.Inning':'wen_max'(S1213ExposedWen), begin S1217NewOne = case 'Tianjiupai.Card':'wen_greater'(S1214Wen1, S1216Wen0) of true -> {'open', S1214Wen1}; false -> 'closed' end, {'ok', {'double_wen', 'Tianjiupai.Inning':'expose'(S1213ExposedWen, S1217NewOne)}} end end; false -> {'ok', {'double_wen', 'Tianjiupai.Inning':'expose'(S1213ExposedWen, 'closed')}} end; [_ | [_ | []]] -> {'ok', {'double_wen', 'Tianjiupai.Inning':'expose'(S1213ExposedWen, 'closed')}}; _ -> 'error' end; {'double_wu', S1218ExposedWunum} -> case S1201SubmittedCards of [{'wu', S1219Wu1} | [{'wu', S1220Wu2} | []]] -> case 'Tianjiupai.Card':'wu_equal'(S1219Wu1, S1220Wu2) of true -> begin S1221Wunum1 = maps:get(number, S1219Wu1), begin {_, S1222Wunum0} = 'Tianjiupai.Inning':'wu_number_max'(S1218ExposedWunum), begin S1223NewOne = case 'Tianjiupai.Card':'wu_number_greater'(S1221Wunum1, S1222Wunum0) of true -> {'open', S1221Wunum1}; false -> 'closed' end, {'ok', {'double_wu', 'Tianjiupai.Inning':'expose'(S1218ExposedWunum, S1223NewOne)}} end end end; false -> {'ok', {'double_wu', 'Tianjiupai.Inning':'expose'(S1218ExposedWunum, 'closed')}} end; [_ | [_ | []]] -> {'ok', {'double_wu', 'Tianjiupai.Inning':'expose'(S1218ExposedWunum, 'closed')}}; _ -> 'error' end; {'double_both', S1224ExposedBigd} -> case 'Tianjiupai.Card':'sort'(S1201SubmittedCards) of [{'wen', S1225Wen} | [{'wu', S1226Wu} | []]] -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1225Wen, maps:get(number, S1226Wu)) of {'ok', S1227Big} -> begin {_, S1228Bigd0} = 'Tianjiupai.Inning':'big_with_design_max'(S1224ExposedBigd), begin S1229NewOne = case 'Tianjiupai.Card':'big_greater'(S1227Big, maps:get(main, S1228Bigd0)) of true -> {'open', #{design => maps:get(design, S1226Wu), main => S1227Big}}; false -> 'closed' end, {'ok', {'double_both', 'Tianjiupai.Inning':'expose'(S1224ExposedBigd, S1229NewOne)}} end end; 'error' -> {'ok', {'double_both', 'Tianjiupai.Inning':'expose'(S1224ExposedBigd, 'closed')}} end; [_ | [_ | []]] -> {'ok', {'double_both', 'Tianjiupai.Inning':'expose'(S1224ExposedBigd, 'closed')}}; _ -> 'error' end; {'triple_wen', S1230ExposedBigd} -> case 'Tianjiupai.Card':'sort'(S1201SubmittedCards) of [{'wen', S1231Wen1} | [{'wen', S1232Wen2} | [{'wu', S1233Wu} | []]]] -> case 'Tianjiupai.Card':'wen_equal'(S1231Wen1, S1232Wen2) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1231Wen1, maps:get(number, S1233Wu)) of {'ok', S1234Big} -> begin {_, S1235Bigd0} = 'Tianjiupai.Inning':'big_with_design_max'(S1230ExposedBigd), begin S1236NewOne = case 'Tianjiupai.Card':'big_greater'(S1234Big, maps:get(main, S1235Bigd0)) of true -> {'open', #{design => maps:get(design, S1233Wu), main => S1234Big}}; false -> 'closed' end, {'ok', {'triple_wen', 'Tianjiupai.Inning':'expose'(S1230ExposedBigd, S1236NewOne)}} end end; 'error' -> {'ok', {'triple_wen', 'Tianjiupai.Inning':'expose'(S1230ExposedBigd, 'closed')}} end; false -> {'ok', {'triple_wen', 'Tianjiupai.Inning':'expose'(S1230ExposedBigd, 'closed')}} end; [_ | [_ | [_ | []]]] -> {'ok', {'triple_wen', 'Tianjiupai.Inning':'expose'(S1230ExposedBigd, 'closed')}}; _ -> 'error' end; {'triple_wu', S1237ExposedBig} -> case 'Tianjiupai.Card':'sort'(S1201SubmittedCards) of [{'wen', S1238Wen} | [{'wu', S1239Wu1} | [{'wu', S1240Wu2} | []]]] -> case 'Tianjiupai.Card':'wu_equal'(S1239Wu1, S1240Wu2) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1238Wen, maps:get(number, S1239Wu1)) of {'ok', S1241Big} -> begin {_, S1242Big0} = 'Tianjiupai.Inning':'big_max'(S1237ExposedBig), begin S1243NewOne = case 'Tianjiupai.Card':'big_greater'(S1241Big, S1242Big0) of true -> {'open', S1241Big}; false -> 'closed' end, {'ok', {'triple_wu', 'Tianjiupai.Inning':'expose'(S1237ExposedBig, S1243NewOne)}} end end; 'error' -> {'ok', {'triple_wu', 'Tianjiupai.Inning':'expose'(S1237ExposedBig, 'closed')}} end; false -> {'ok', {'triple_wu', 'Tianjiupai.Inning':'expose'(S1237ExposedBig, 'closed')}} end; [_ | [_ | [_ | []]]] -> {'ok', {'triple_wu', 'Tianjiupai.Inning':'expose'(S1237ExposedBig, 'closed')}}; _ -> 'error' end; {'quadruple', S1244ExposedBig} -> case 'Tianjiupai.Card':'sort'(S1201SubmittedCards) of [{'wen', S1245Wen1} | [{'wen', S1246Wen2} | [{'wu', S1247Wu1} | [{'wu', S1248Wu2} | []]]]] -> case ('Tianjiupai.Card':'wen_equal'(S1245Wen1, S1246Wen2) and 'Tianjiupai.Card':'wu_equal'(S1247Wu1, S1248Wu2)) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S1245Wen1, maps:get(number, S1247Wu1)) of {'ok', S1249Big} -> begin {_, S1250Big0} = 'Tianjiupai.Inning':'big_max'(S1244ExposedBig), begin S1251NewOne = case 'Tianjiupai.Card':'big_greater'(S1249Big, S1250Big0) of true -> {'open', S1249Big}; false -> 'closed' end, {'ok', {'quadruple', 'Tianjiupai.Inning':'expose'(S1244ExposedBig, S1251NewOne)}} end end; 'error' -> {'ok', {'quadruple', 'Tianjiupai.Inning':'expose'(S1244ExposedBig, 'closed')}} end; false -> {'ok', {'quadruple', 'Tianjiupai.Inning':'expose'(S1244ExposedBig, 'closed')}} end; [_ | [_ | [_ | [_ | []]]]] -> {'ok', {'quadruple', 'Tianjiupai.Inning':'expose'(S1244ExposedBig, 'closed')}}; _ -> 'error' end end.
'get_winner'(S1253Table) -> case S1253Table of {'wuzun', S1254Exposed} -> begin 'wuzun_unit' = maps:get(first, S1254Exposed), begin ['closed' | ['closed' | ['closed' | []]]] = maps:get(subsequent, S1254Exposed), {0, [{'wu', #{design => true, number => 3}} | [{'wu', #{design => true, number => 6}} | []]], {'ok', 'zhizun'}} end end; {'wenzun', S1255Exposed} -> begin 'wenzun_minor' = maps:get(first, S1255Exposed), begin S1256MajorOrCloseds = maps:get(subsequent, S1255Exposed), begin S1258Ns = 'SesterlStdlib.List':'map'(fun(S1257X) -> case S1257X of {'open', 'wenzun_major'} -> 2; 'closed' -> 1 end end, S1256MajorOrCloseds), begin {S1261TrickIndex, S1262OneOrTwo} = 'Tianjiupai.Inning':'max_with_index'(fun(S1259N1, S1260N2) -> (S1259N1 > S1260N2) end, [1 | S1258Ns]), case S1262OneOrTwo of 1 -> {0, [{'wen', 1} | [{'wen', 1} | []]], {'ok', 'zhizun'}}; 2 -> {S1261TrickIndex, [{'wen', 2} | [{'wen', 2} | []]], {'ok', 'zhizun'}} end end end end end; {'single_wen', S1263WenExposed} -> begin {S1264TrickIndex, S1265Wen} = 'Tianjiupai.Inning':'wen_max'(S1263WenExposed), begin S1266SpecialOpt = case {maps:get(first, S1263WenExposed), S1265Wen} of {1, 1} -> {'ok', 'yaojie'}; {1, 2} -> {'ok', 'yaojie'}; _ -> 'error' end, {S1264TrickIndex, [{'wen', S1265Wen} | []], S1266SpecialOpt} end end; {'single_wu', S1267WuExposed} -> begin {S1268TrickIndex, S1269Wu} = 'Tianjiupai.Inning':'wu_max'(S1267WuExposed), begin S1270SpecialOpt = case {maps:get(number, maps:get(first, S1267WuExposed)), maps:get(number, S1269Wu)} of {3, 3} -> {'ok', 'yaojie'}; {3, 6} -> {'ok', 'yaojie'}; _ -> 'error' end, {S1268TrickIndex, [{'wu', S1269Wu} | []], S1270SpecialOpt} end end; {'double_wen', S1271WenExposed} -> begin {S1272TrickIndex, S1273Wen} = 'Tianjiupai.Inning':'wen_max'(S1271WenExposed), {S1272TrickIndex, [{'wen', S1273Wen} | [{'wen', S1273Wen} | []]], 'error'} end; {'double_wu', S1274WunumExposed} -> begin {S1275TrickIndex, S1276Wunum} = 'Tianjiupai.Inning':'wu_number_max'(S1274WunumExposed), {S1275TrickIndex, [{'wu', #{design => false, number => S1276Wunum}} | [{'wu', #{design => true, number => S1276Wunum}} | []]], 'error'} end; {'double_both', S1277BigdExposed} -> begin {S1278TrickIndex, S1279Bigd} = 'Tianjiupai.Inning':'big_with_design_max'(S1277BigdExposed), begin {S1280Wen, S1281Wunum} = 'Tianjiupai.Card':'big_to_wen_and_wu'(maps:get(main, S1279Bigd)), {S1278TrickIndex, [{'wen', S1280Wen} | [{'wu', #{design => maps:get(design, S1279Bigd), number => S1281Wunum}} | []]], 'error'} end end; {'triple_wen', S1282BigdExposed} -> begin {S1283TrickIndex, S1284Bigd} = 'Tianjiupai.Inning':'big_with_design_max'(S1282BigdExposed), begin {S1285Wen, S1286Wunum} = 'Tianjiupai.Card':'big_to_wen_and_wu'(maps:get(main, S1284Bigd)), {S1283TrickIndex, [{'wen', S1285Wen} | [{'wen', S1285Wen} | [{'wu', #{design => maps:get(design, S1284Bigd), number => S1286Wunum}} | []]]], 'error'} end end; {'triple_wu', S1287BigExposed} -> begin {S1288TrickIndex, S1289Big} = 'Tianjiupai.Inning':'big_max'(S1287BigExposed), begin {S1290Wen, S1291Wunum} = 'Tianjiupai.Card':'big_to_wen_and_wu'(S1289Big), {S1288TrickIndex, [{'wen', S1290Wen} | [{'wu', #{design => false, number => S1291Wunum}} | [{'wu', #{design => true, number => S1291Wunum}} | []]]], 'error'} end end; {'quadruple', S1292BigExposed} -> begin {S1293TrickIndex, S1294Big} = 'Tianjiupai.Inning':'big_max'(S1292BigExposed), begin {S1295Wen, S1296Wunum} = 'Tianjiupai.Card':'big_to_wen_and_wu'(S1294Big), {S1293TrickIndex, [{'wen', S1295Wen} | [{'wen', S1295Wen} | [{'wu', #{design => false, number => S1296Wunum}} | [{'wu', #{design => true, number => S1296Wunum}} | []]]]], {'ok', 'sidahe'}} end end end.
'check_last_submission_is_open'(S1298Table) -> begin S1300F = fun(S1299Exposed) -> case 'SesterlStdlib.List':'reverse'(maps:get(subsequent, S1299Exposed)) of [] -> true; [{'open', _} | _] -> true; ['closed' | _] -> false end end, case S1298Table of {'wuzun', S1301Exposed} -> S1300F(S1301Exposed); {'wenzun', S1302Exposed} -> S1300F(S1302Exposed); {'single_wen', S1303Exposed} -> S1300F(S1303Exposed); {'single_wu', S1304Exposed} -> S1300F(S1304Exposed); {'double_wen', S1305Exposed} -> S1300F(S1305Exposed); {'double_wu', S1306Exposed} -> S1300F(S1306Exposed); {'double_both', S1307Exposed} -> S1300F(S1307Exposed); {'triple_wen', S1308Exposed} -> S1300F(S1308Exposed); {'triple_wu', S1309Exposed} -> S1300F(S1309Exposed); {'quadruple', S1310Exposed} -> S1300F(S1310Exposed) end end.
'submit'(S1312SubmitterSeat, S1313SubmittedCards, S1314Inning) -> begin S1315StartSeat = maps:get(starts_at, S1314Inning), begin S1316Table0 = maps:get(table, S1314Inning), begin S1317Players0 = maps:get(players, S1314Inning), begin S1318N0 = 'Tianjiupai.Inning':'table_length'(S1316Table0), begin {S1319NumGained0, S1320QizhijieAchieverSeatOpt} = 'Tianjiupai.Inning':'count_gained'(S1317Players0), begin S1321NumSubmittedCards = 'SesterlStdlib.List':'length'(S1313SubmittedCards), case ((S1318N0 < 4) and ((S1319NumGained0 < 8) and ((0 < S1321NumSubmittedCards) and (S1321NumSubmittedCards =< 4)))) of true -> case 'Tianjiupai.Quad':'seat_equal'(S1312SubmitterSeat, 'Tianjiupai.Quad':'advance_seat'(S1315StartSeat, S1318N0)) of true -> begin S1322Submitter0 = 'Tianjiupai.Quad':'access'(S1312SubmitterSeat, S1317Players0), begin S1323SubmitterHand0 = maps:get(hand, S1322Submitter0), begin S1324SubmitterGained0 = maps:get(gained, S1322Submitter0), case 'Tianjiupai.Inning':'separate_submitted_cards'(S1323SubmitterHand0, S1313SubmittedCards) of {'ok', S1325SubmitterHand1} -> begin S1326Players1 = 'Tianjiupai.Quad':'update'(S1312SubmitterSeat, maps:put(hand, S1325SubmitterHand1, S1322Submitter0), S1317Players0), begin S1327Res = case ((S1319NumGained0 == 7) and (S1321NumSubmittedCards == 1)) of true -> case S1320QizhijieAchieverSeatOpt of {'ok', _} -> 'Tianjiupai.Inning':'update_table'(S1313SubmittedCards, S1316Table0); 'error' -> case S1324SubmitterGained0 of [] -> 'Tianjiupai.Inning':'append_closed_to_table'(S1316Table0); [_ | _] -> 'Tianjiupai.Inning':'update_table'(S1313SubmittedCards, S1316Table0) end end; false -> 'Tianjiupai.Inning':'update_table'(S1313SubmittedCards, S1316Table0) end, begin {'ok', S1328Table1} = S1327Res, begin S1329IsFront = 'Tianjiupai.Inning':'check_last_submission_is_open'(S1328Table1), begin S1330NumGained1 = (S1319NumGained0 + S1321NumSubmittedCards), case (S1318N0 == 3) of true -> begin {S1331WinnerTrickIndex, S1332Cards, S1333SpecialOpt} = 'Tianjiupai.Inning':'get_winner'(S1328Table1), begin S1334WinnerSeat = 'Tianjiupai.Quad':'advance_seat'(S1315StartSeat, S1331WinnerTrickIndex), begin S1335Winner = 'Tianjiupai.Quad':'access'(S1334WinnerSeat, S1326Players1), begin S1336WinnerGained = 'SesterlStdlib.List':'append'(maps:get(gained, S1335Winner), S1332Cards), begin S1337Players2 = 'Tianjiupai.Quad':'update'(S1334WinnerSeat, maps:put(gained, S1336WinnerGained, S1335Winner), S1326Players1), case (S1330NumGained1 == 8) of true -> begin S1339GainedQuad = 'Tianjiupai.Quad':'map'(fun(S1338P) -> maps:get(gained, S1338P) end, S1337Players2), case S1320QizhijieAchieverSeatOpt of {'ok', S1340QizhijieAchieverSeat} -> begin S1341SpecialEnd = case 'Tianjiupai.Quad':'seat_equal'(S1340QizhijieAchieverSeat, S1334WinnerSeat) of true -> 'inning_end_with_bazhijie'; false -> 'inning_end_with_qizhijie' end, {'ok', {{'wins_inning', S1340QizhijieAchieverSeat, S1328Table1, S1339GainedQuad, {'ok', S1341SpecialEnd}}, S1329IsFront}} end; 'error' -> begin S1343SpecialEndOpt = case ('SesterlStdlib.List':'length'(S1336WinnerGained) == 8) of true -> {'ok', 'inning_end_with_bazhijie'}; false -> 'SesterlStdlib.Option':'map'(fun(S1342Special) -> case S1342Special of 'zhizun' -> 'inning_end_with_zhizun'; 'sidahe' -> 'inning_end_with_sidahe'; 'yaojie' -> 'inning_end_with_yaojie' end end, S1333SpecialOpt) end, {'ok', {{'wins_inning', S1334WinnerSeat, S1328Table1, S1339GainedQuad, S1343SpecialEndOpt}, S1329IsFront}} end end end; false -> begin S1344Inning1 = #{players => S1337Players2, starts_at => S1334WinnerSeat, table => 'starting'}, begin S1346SpecialTrickOpt = 'SesterlStdlib.Option':'bind'(S1333SpecialOpt, fun(S1345Special) -> case S1345Special of 'zhizun' -> {'ok', 'trick_end_with_zhizun'}; 'sidahe' -> {'ok', 'trick_end_with_sidahe'}; 'yaojie' -> 'error' end end), {'ok', {{'wins_trick', S1334WinnerSeat, S1328Table1, 'Tianjiupai.Card':'sort'(S1325SubmitterHand1), S1346SpecialTrickOpt, S1344Inning1}, S1329IsFront}} end end end end end end end end; false -> begin S1347Inning = #{players => S1326Players1, starts_at => S1315StartSeat, table => S1328Table1}, {'ok', {{'continues', S1347Inning}, S1329IsFront}} end end end end end end end; 'error' -> 'error' end end end end; false -> 'error' end; false -> 'error' end end end end end end end.
