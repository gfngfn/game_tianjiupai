import Models

module Quad = struct
  open Models

  type seat = Models.seat

  val seat_equal : fun(seat, seat) -> bool = external 2 ```
    seat_equal(S1, S2) ->
        S1 =:= S2.
  ```

  val the_other_seats(seat) : list<seat> =
    case seat of
    | SeatA -> [SeatB, SeatC, SeatD]
    | SeatB -> [SeatC, SeatD, SeatA]
    | SeatC -> [SeatD, SeatA, SeatB]
    | SeatD -> [SeatA, SeatB, SeatC]
    end

  val rec advance_seat(s, n) =
    if n < 0 then
      advance_seat(s, n + 4)
    else if n == 0 then
      s
    else
      let s =
        case s of
        | SeatA -> SeatB
        | SeatB -> SeatC
        | SeatC -> SeatD
        | SeatD -> SeatA
        end
      in
      advance_seat(s, n - 1)

  type t<$a> = Models.per_seat<$a>

  val decompose(quad) =
    {quad.east, quad.south, quad.west, quad.north}

  val make(x) =
    let {x0, x1, x2, x3} = x in
    { east = x0, south = x1, west = x2, north = x3 }

  val to_list<$a>(quad : t<$a>) : list<$a> =
    let {x0, x1, x2, x3} = decompose(quad) in
    [x0, x1, x2, x3]

  val access<$a>(seat : seat, quad : t<$a>) : $a =
    let {x0, x1, x2, x3} = decompose(quad) in
    case seat of
    | SeatA -> x0
    | SeatB -> x1
    | SeatC -> x2
    | SeatD -> x3
    end

  val update<$a>(seat : seat, x_new : $a, quad : t<$a>) : t<$a> =
    let {x0, x1, x2, x3} = decompose(quad) in
    let x =
      case seat of
      | SeatA -> {x_new, x1, x2, x3}
      | SeatB -> {x0, x_new, x2, x3}
      | SeatC -> {x0, x1, x_new, x3}
      | SeatD -> {x0, x1, x2, x_new}
      end
    in
    make(x)

  val map<$a, $b>(f : fun($a) -> $b, quad : t<$a>) : t<$b> =
    let {x0, x1, x2, x3} = decompose(quad) in
    make({f(x0), f(x1), f(x2), f(x3)})

  val map_fold_effect<$m, $a, $b, $c>(f : fun($c, $a) -> [$m]{$c, $b}, acc : $c, quad : t<$a>) : [$m]{$c, t<$b>} = act
    let {x0, x1, x2, x3} = decompose(quad) in
    do {acc, y0} <- f(acc, x0) in
    do {acc, y1} <- f(acc, x1) in
    do {acc, y2} <- f(acc, x2) in
    do {acc, y3} <- f(acc, x3) in
    let quad = make({y0, y1, y2, y3}) in
    return({acc, quad})

  val find<$a>(f : fun($a) -> bool, quad : t<$a>) : option<{seat, $a}> =
    let {x0, x1, x2, x3} = decompose(quad) in
    case {f(x0), f(x1), f(x2), f(x3)} of
    | {true, _, _, _} -> Some({SeatA, x0})
    | {_, true, _, _} -> Some({SeatB, x1})
    | {_, _, true, _} -> Some({SeatC, x2})
    | {_, _, _, true} -> Some({SeatD, x3})
    | _               -> None
    end

end
