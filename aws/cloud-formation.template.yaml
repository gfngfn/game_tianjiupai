AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  "KeyName":
    Type: "AWS::EC2::KeyPair::KeyName"
  "InstanceTypeParameter":
    Description: "EC2 instance type"
    Type: "String"
    Default: "t2.micro"
    AllowedValues:
      - "t2.micro"
  "AMI":
    Description: "ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-20210621"
    Type: "String"
    Default: "ami-0827d8ed0295e3feb"
  "SSHLocation":
    Description: "An IP address range used for SSH to an EC2 instance"
    Type: "String"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    MinLength: "9"
    MaxLength: "18"
    Default: "0.0.0.0/0"

Resources:
  "VPC":
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.10.0.0/23"

  "InternetSubnet":
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: "10.10.0.0/23"
      AvailabilityZone: "ap-northeast-1a"
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: "VPC"

  "InternetGateway":
    Type: "AWS::EC2::InternetGateway"

  "InternetRouteTable":
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: "VPC"

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId:
        Ref: "VPC"
      InternetGatewayId:
        Ref: "InternetGateway"

  "InternetSubnetRouteTableAssociation":
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        Ref: "InternetRouteTable"
      SubnetId:
        Ref: "InternetSubnet"

  "InternetRoute":
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      RouteTableId:
        Ref: "InternetRouteTable"
      GatewayId:
        Ref: "InternetGateway"
    DependsOn: "VPCGatewayAttachment"

  "ServerInstance":
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId:
        Ref: "AMI"
      InstanceType:
        Ref: "InstanceTypeParameter"
      SecurityGroupIds:
        - Fn::GetAtt:
          - "ServerSecurityGroup"
          - "GroupId"
      SubnetId:
        Ref: "InternetSubnet"
      KeyName:
        Ref: "KeyName"
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            apt:
              "make": []
              "nginx": []
              "erlang": []
          files:
            "/home/ubuntu/install.sh":
              mode: "000755"
              owner: "root"
              group: "root"
              content: |
                #!/bin/bash
                set -xe
                /home/ubuntu/game_tianjiupai/pipeline.sh
                echo "==== Reboot after installation ===="
                sleep 10 && sudo reboot &
                exit 0

            "/etc/init.d/erlang-app":
              mode: "000755"
              owner: "root"
              group: "root"
              content: |
                #!/bin/bash
                set -xe
                APP_DIR=/home/ubuntu/game_tianjiupai/_build/prod/rel/tianjiupai
                APP_NAME=tianjiupai
                case "$1" in
                    start)
                        cd "${APP_DIR}"
                        "bin/${APP_NAME}" start
                        ;;
                    stop)
                        cd "${APP_DIR}"
                        "bin/${APP_NAME}" stop
                        ;;
                    *)
                        echo "cannot recognize '$1'"
                esac
                exit 0

          commands:
            "install_erlang":
              command: "/home/ubuntu/game_tianjiupai/install.sh > /home/ubuntu/install_log.txt"

  "ServerSecurityGroup":
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Enable HTTP via port 80 and 8080"
      VpcId:
        Ref: "VPC"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: "8080"
          ToPort: "8080"
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp:
            Ref: "SSHLocation"

Outputs:
  WebsiteURL:
    Value:
      Fn::Join:
        - ""
        - ["http://", {"Fn::GetAtt": ["ServerInstance", "PublicDnsName"]}]
