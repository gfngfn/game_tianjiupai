-module('Tianjiupai.Inning').
-export(['all_cards'/0, 'shuffle'/0, 'start'/1, 'observe'/2, 'table_length'/1, 'count_gained'/1, 'separate_submitted_cards'/2, 'append_closed_to_table'/1, 'zip_with_indices'/1, 'max_with_index'/2, 'num_max_scheme'/2, 'wen_max'/1, 'wu_max'/1, 'wu_number_max'/1, 'big_max'/1, 'big_with_design_max'/1, 'first_exposed'/1, 'make_starting_table'/1, 'expose'/2, 'update_table'/2, 'get_winner'/1, 'check_last_submission_is_open'/1, 'submit'/3]).

    all_cards() ->
        WenHalf = lists:map(fun(N) -> {wen, N} end, lists:seq(1, 11)),
        Wus =
            lists:map(
                fun({B, N}) -> {wu, #{design => B, number => N}} end,
                [
                    {true, 3},
                    {true, 5},
                    {false, 5},
                    {true, 6},
                    {true, 7},
                    {false, 7},
                    {true, 8},
                    {false, 8},
                    {true, 9},
                    {false, 9}
                ]),
        lists:append([WenHalf, WenHalf, Wus]).
  

    shuffle() ->
        %% RandomlyIndexedCards :: [{float(), card()}]
        RandomlyIndexedCards =
            lists:map(
                fun(Card) ->
                    Index = rand:uniform(),
                    {Index, Card}
                end,
                all_cards()),
        SortedIndexedCards =
            lists:sort(
                fun({Index1, _}, {Index2, _}) ->
                    Index1 =< Index2
                end,
                RandomlyIndexedCards),
        Sorted0 = lists:map(fun({_, Card}) -> Card end, SortedIndexedCards),
        {Hand0, Sorted1} = lists:split(8, Sorted0),
        {Hand1, Sorted2} = lists:split(8, Sorted1),
        {Hand2, Sorted3} = lists:split(8, Sorted2),
        {Hand3, []}      = lists:split(8, Sorted3),
        {Hand0, Hand1, Hand2, Hand3}.
  
'start'(S410Seat) -> begin S411HandQuad = 'Tianjiupai.Inning':'shuffle'(), #{players => 'Tianjiupai.Quad':'map'(fun(S412Hand) -> #{gained => [], hand => S412Hand} end, S411HandQuad), starts_at => S410Seat, table => 'starting'} end.
'observe'(S414Seat, S415Inning) -> begin S416PlayerQuad = maps:get(players, S415Inning), begin S417You = 'Tianjiupai.Quad':'access'(S414Seat, S416PlayerQuad), #{gains => 'Tianjiupai.Quad':'map'(fun(S418P) -> maps:get(gained, S418P) end, S416PlayerQuad), starts_at => maps:get(starts_at, S415Inning), table => maps:get(table, S415Inning), your_hand => 'Tianjiupai.Card':'sort'(maps:get(hand, S417You))} end end.

    table_length(Table) ->
        case Table of
            starting                 -> 0;
            {_Tag, {_X, XOrCloseds}} -> 1 + erlang:length(XOrCloseds)
        end.
  
'count_gained'(S421Players) -> begin {S423N0, S424N1, S425N2, S426N3} = 'Tianjiupai.Quad':'map'(fun(S422P) -> 'SesterlStdlib.List':'length'(maps:get(gained, S422P)) end, S421Players), (S423N0 + (S424N1 + (S425N2 + S426N3))) end.

    separate_submitted_cards(SubmitterHand0, SubmittedCards) ->
        SubmitterHand1 = SubmitterHand0 -- SubmittedCards,
        case erlang:length(SubmitterHand1) + erlang:length(SubmittedCards) =:= erlang:length(SubmitterHand0) of
            true  -> {ok, SubmitterHand1};
            false -> error
        end.
  

    append_closed_to_table(Table) ->
        case Table of
            {Tag, {X, XOrCloseds}} ->
            %% `Table0' must be other than `starting' here,
            %% Since the first submitter of a trick after the first trick
            %% must gain at least one card.
                {ok, {Tag, {X, XOrCloseds ++ [closed]}}};
            _ ->
                error
        end.
  

    zip_with_indices(Xs) ->
        lists:zip(lists:seq(0, erlang:length(Xs) - 1), Xs).
  

    max_with_index(Greater, Xs) ->
        Pairs = zip_with_indices(Xs),
        case
            lists:sort(
               fun({_, X1}, {_, X2}) -> Greater(X1, X2) orelse X1 =:= X2 end,
               Pairs)
        of
            [Pair | _] -> Pair
        end.
  
'num_max_scheme'(S432Greater, S433Exposed) -> begin {S434X0, S435XOrCloseds} = S433Exposed, begin {S440TrickIndex, {'open', S441X}} = 'Tianjiupai.Inning':'max_with_index'(fun(S436Xo1, S437Xo2) -> case {S436Xo1, S437Xo2} of {{'open', S438X1}, {'open', S439X2}} -> S432Greater(S438X1, S439X2); {{'open', _}, 'closed'} -> true; _ -> false end end, [{'open', S434X0} | S435XOrCloseds]), {S440TrickIndex, S441X} end end.
'wen_max'(S443WenExposed) -> 'Tianjiupai.Inning':'num_max_scheme'((fun 'Tianjiupai.Card':'wen_greater'/2), S443WenExposed).
'wu_max'(S445WuExposed) -> 'Tianjiupai.Inning':'num_max_scheme'((fun 'Tianjiupai.Card':'wu_greater'/2), S445WuExposed).
'wu_number_max'(S447WunumExposed) -> 'Tianjiupai.Inning':'num_max_scheme'((fun 'Tianjiupai.Card':'wu_number_greater'/2), S447WunumExposed).
'big_max'(S449BigExposed) -> begin {S450Big0, S451BigOrCloseds} = S449BigExposed, begin {S456TrickIndex, {'open', S457Big}} = 'Tianjiupai.Inning':'max_with_index'(fun(S452Bo1, S453Bo2) -> case {S452Bo1, S453Bo2} of {{'open', S454Big1}, {'open', S455Big2}} -> 'Tianjiupai.Card':'big_greater'(S454Big1, S455Big2); {{'open', _}, 'closed'} -> true; _ -> false end end, [{'open', S450Big0} | S451BigOrCloseds]), {S456TrickIndex, S457Big} end end.
'big_with_design_max'(S459BigdExposed) -> begin {S460Bigd0, S461BigdOrCloseds} = S459BigdExposed, begin {S466TrickIndex, {'open', S467Bigd}} = 'Tianjiupai.Inning':'max_with_index'(fun(S462Bo1, S463Bo2) -> case {S462Bo1, S463Bo2} of {{'open', S464Bigd1}, {'open', S465Bigd2}} -> 'Tianjiupai.Card':'big_greater'(maps:get(main, S464Bigd1), maps:get(main, S465Bigd2)); {{'open', _}, 'closed'} -> true; _ -> false end end, [{'open', S460Bigd0} | S461BigdOrCloseds]), {S466TrickIndex, S467Bigd} end end.
'first_exposed'(S469X) -> {S469X, []}.
'make_starting_table'(S471SubmittedCards) -> case 'Tianjiupai.Card':'sort'(S471SubmittedCards) of [{'wen', 1} | [{'wen', 1} | []]] -> {'ok', {'wenzun', 'Tianjiupai.Inning':'first_exposed'('minor')}}; [{'wen', S472Wen} | []] -> {'ok', {'single_wen', 'Tianjiupai.Inning':'first_exposed'(S472Wen)}}; [{'wu', S473Wu} | []] -> {'ok', {'single_wu', 'Tianjiupai.Inning':'first_exposed'(S473Wu)}}; [{'wen', S474Wen1} | [{'wen', S475Wen2} | []]] -> case 'Tianjiupai.Card':'wen_equal'(S474Wen1, S475Wen2) of true -> {'ok', {'double_wen', 'Tianjiupai.Inning':'first_exposed'(S474Wen1)}}; false -> 'error' end; [{'wu', S476Wu1} | [{'wu', S477Wu2} | []]] -> case 'Tianjiupai.Card':'wu_equal'(S476Wu1, S477Wu2) of true -> {'ok', {'double_wu', 'Tianjiupai.Inning':'first_exposed'(maps:get(number, S476Wu1))}}; false -> case ((maps:get(number, S476Wu1) == 3) and (maps:get(number, S477Wu2) == 6)) of true -> {'ok', {'wuzun', 'Tianjiupai.Inning':'first_exposed'(ok)}}; false -> 'error' end end; [{'wen', S478Wen} | [{'wu', S479Wu} | []]] -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S478Wen, maps:get(number, S479Wu)) of {'ok', S480Big} -> {'ok', {'double_both', 'Tianjiupai.Inning':'first_exposed'(#{design => maps:get(design, S479Wu), main => S480Big})}}; 'error' -> 'error' end; [{'wen', S481Wen1} | [{'wen', S482Wen2} | [{'wu', S483Wu} | []]]] -> case 'Tianjiupai.Card':'wen_equal'(S481Wen1, S482Wen2) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S481Wen1, maps:get(number, S483Wu)) of {'ok', S484Big} -> {'ok', {'triple_wen', 'Tianjiupai.Inning':'first_exposed'(#{design => maps:get(design, S483Wu), main => S484Big})}}; 'error' -> 'error' end; false -> 'error' end; [{'wen', S485Wen} | [{'wu', S486Wu1} | [{'wu', S487Wu2} | []]]] -> case 'Tianjiupai.Card':'wu_equal'(S486Wu1, S487Wu2) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S485Wen, maps:get(number, S486Wu1)) of {'ok', S488Big} -> {'ok', {'triple_wu', 'Tianjiupai.Inning':'first_exposed'(S488Big)}}; 'error' -> 'error' end; false -> 'error' end; [{'wen', S489Wen1} | [{'wen', S490Wen2} | [{'wu', S491Wu1} | [{'wu', S492Wu2} | []]]]] -> case ('Tianjiupai.Card':'wen_equal'(S489Wen1, S490Wen2) and 'Tianjiupai.Card':'wu_equal'(S491Wu1, S492Wu2)) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S489Wen1, maps:get(number, S491Wu1)) of {'ok', S493Big} -> {'ok', {'quadruple', 'Tianjiupai.Inning':'first_exposed'(S493Big)}}; 'error' -> 'error' end; false -> 'error' end; _ -> 'error' end.
'expose'(S495XExposed, S496XNew) -> begin {S497X, S498XOrCloseds} = S495XExposed, {S497X, 'SesterlStdlib.List':'append'(S498XOrCloseds, [S496XNew | []])} end.
'update_table'(S500SubmittedCards, S501Table) -> case S501Table of 'starting' -> 'Tianjiupai.Inning':'make_starting_table'(S500SubmittedCards); {'wuzun', S502ExposedOk} -> case S500SubmittedCards of [_ | [_ | []]] -> {'ok', {'wuzun', 'Tianjiupai.Inning':'expose'(S502ExposedOk, 'closed')}}; _ -> 'error' end; {'wenzun', S503Exposed} -> case S500SubmittedCards of [{'wen', 2} | [{'wen', 2} | []]] -> {'ok', {'wenzun', 'Tianjiupai.Inning':'expose'(S503Exposed, {'open', 'major'})}}; [_ | [_ | []]] -> {'ok', {'wenzun', 'Tianjiupai.Inning':'expose'(S503Exposed, 'closed')}}; _ -> 'error' end; {'single_wen', S504ExposedWen} -> case S500SubmittedCards of [{'wen', S505Wen} | []] -> begin {_, S506Wen0} = 'Tianjiupai.Inning':'wen_max'(S504ExposedWen), begin S507NewOne = case 'Tianjiupai.Card':'wen_greater'(S505Wen, S506Wen0) of true -> {'open', S505Wen}; false -> 'closed' end, {'ok', {'single_wen', 'Tianjiupai.Inning':'expose'(S504ExposedWen, S507NewOne)}} end end; [_ | []] -> {'ok', {'single_wen', 'Tianjiupai.Inning':'expose'(S504ExposedWen, 'closed')}}; _ -> 'error' end; {'single_wu', S508ExposedWu} -> case S500SubmittedCards of [{'wu', S509Wu} | []] -> begin {_, S510Wu0} = 'Tianjiupai.Inning':'wu_max'(S508ExposedWu), begin S511NewOne = case 'Tianjiupai.Card':'wu_greater'(S509Wu, S510Wu0) of true -> {'open', S509Wu}; false -> 'closed' end, {'ok', {'single_wu', 'Tianjiupai.Inning':'expose'(S508ExposedWu, S511NewOne)}} end end; [_ | []] -> {'ok', {'single_wu', 'Tianjiupai.Inning':'expose'(S508ExposedWu, 'closed')}}; _ -> 'error' end; {'double_wen', S512ExposedWen} -> case S500SubmittedCards of [{'wen', S513Wen1} | [{'wen', S514Wen2} | []]] -> case 'Tianjiupai.Card':'wen_equal'(S513Wen1, S514Wen2) of true -> begin {_, S515Wen0} = 'Tianjiupai.Inning':'wen_max'(S512ExposedWen), begin S516NewOne = case 'Tianjiupai.Card':'wen_greater'(S513Wen1, S515Wen0) of true -> {'open', S513Wen1}; false -> 'closed' end, {'ok', {'double_wen', 'Tianjiupai.Inning':'expose'(S512ExposedWen, S516NewOne)}} end end; false -> {'ok', {'double_wen', 'Tianjiupai.Inning':'expose'(S512ExposedWen, 'closed')}} end; [_ | [_ | []]] -> {'ok', {'double_wen', 'Tianjiupai.Inning':'expose'(S512ExposedWen, 'closed')}}; _ -> 'error' end; {'double_wu', S517ExposedWunum} -> case S500SubmittedCards of [{'wu', S518Wu1} | [{'wu', S519Wu2} | []]] -> case 'Tianjiupai.Card':'wu_equal'(S518Wu1, S519Wu2) of true -> begin S520Wunum1 = maps:get(number, S518Wu1), begin {_, S521Wunum0} = 'Tianjiupai.Inning':'wu_number_max'(S517ExposedWunum), begin S522NewOne = case 'Tianjiupai.Card':'wu_number_greater'(S520Wunum1, S521Wunum0) of true -> {'open', S520Wunum1}; false -> 'closed' end, {'ok', {'double_wu', 'Tianjiupai.Inning':'expose'(S517ExposedWunum, S522NewOne)}} end end end; false -> {'ok', {'double_wu', 'Tianjiupai.Inning':'expose'(S517ExposedWunum, 'closed')}} end; [_ | [_ | []]] -> {'ok', {'double_wu', 'Tianjiupai.Inning':'expose'(S517ExposedWunum, 'closed')}}; _ -> 'error' end; {'double_both', S523ExposedBigd} -> case 'Tianjiupai.Card':'sort'(S500SubmittedCards) of [{'wen', S524Wen} | [{'wu', S525Wu} | []]] -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S524Wen, maps:get(number, S525Wu)) of {'ok', S526Big} -> begin {_, S527Bigd0} = 'Tianjiupai.Inning':'big_with_design_max'(S523ExposedBigd), begin S528NewOne = case 'Tianjiupai.Card':'big_greater'(S526Big, maps:get(main, S527Bigd0)) of true -> {'open', #{design => maps:get(design, S525Wu), main => S526Big}}; false -> 'closed' end, {'ok', {'double_both', 'Tianjiupai.Inning':'expose'(S523ExposedBigd, S528NewOne)}} end end; 'error' -> {'ok', {'double_both', 'Tianjiupai.Inning':'expose'(S523ExposedBigd, 'closed')}} end; [_ | [_ | []]] -> {'ok', {'double_both', 'Tianjiupai.Inning':'expose'(S523ExposedBigd, 'closed')}}; _ -> 'error' end; {'triple_wen', S529ExposedBigd} -> case 'Tianjiupai.Card':'sort'(S500SubmittedCards) of [{'wen', S530Wen1} | [{'wen', S531Wen2} | [{'wu', S532Wu} | []]]] -> case 'Tianjiupai.Card':'wen_equal'(S530Wen1, S531Wen2) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S530Wen1, maps:get(number, S532Wu)) of {'ok', S533Big} -> begin {_, S534Bigd0} = 'Tianjiupai.Inning':'big_with_design_max'(S529ExposedBigd), begin S535NewOne = case 'Tianjiupai.Card':'big_greater'(S533Big, maps:get(main, S534Bigd0)) of true -> {'open', #{design => maps:get(design, S532Wu), main => S533Big}}; false -> 'closed' end, {'ok', {'triple_wen', 'Tianjiupai.Inning':'expose'(S529ExposedBigd, S535NewOne)}} end end; 'error' -> {'ok', {'triple_wen', 'Tianjiupai.Inning':'expose'(S529ExposedBigd, 'closed')}} end; false -> {'ok', {'triple_wen', 'Tianjiupai.Inning':'expose'(S529ExposedBigd, 'closed')}} end; [_ | [_ | [_ | []]]] -> {'ok', {'triple_wen', 'Tianjiupai.Inning':'expose'(S529ExposedBigd, 'closed')}}; _ -> 'error' end; {'triple_wu', S536ExposedBig} -> case 'Tianjiupai.Card':'sort'(S500SubmittedCards) of [{'wen', S537Wen} | [{'wu', S538Wu1} | [{'wu', S539Wu2} | []]]] -> case 'Tianjiupai.Card':'wu_equal'(S538Wu1, S539Wu2) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S537Wen, maps:get(number, S538Wu1)) of {'ok', S540Big} -> begin {_, S541Big0} = 'Tianjiupai.Inning':'big_max'(S536ExposedBig), begin S542NewOne = case 'Tianjiupai.Card':'big_greater'(S540Big, S541Big0) of true -> {'open', S540Big}; false -> 'closed' end, {'ok', {'triple_wu', 'Tianjiupai.Inning':'expose'(S536ExposedBig, S542NewOne)}} end end; 'error' -> {'ok', {'triple_wu', 'Tianjiupai.Inning':'expose'(S536ExposedBig, 'closed')}} end; false -> {'ok', {'triple_wu', 'Tianjiupai.Inning':'expose'(S536ExposedBig, 'closed')}} end; [_ | [_ | [_ | []]]] -> {'ok', {'triple_wu', 'Tianjiupai.Inning':'expose'(S536ExposedBig, 'closed')}}; _ -> 'error' end; {'quadruple', S543ExposedBig} -> case 'Tianjiupai.Card':'sort'(S500SubmittedCards) of [{'wen', S544Wen1} | [{'wen', S545Wen2} | [{'wu', S546Wu1} | [{'wu', S547Wu2} | []]]]] -> case ('Tianjiupai.Card':'wen_equal'(S544Wen1, S545Wen2) and 'Tianjiupai.Card':'wu_equal'(S546Wu1, S547Wu2)) of true -> case 'Tianjiupai.Card':'wen_and_wu_to_big'(S544Wen1, maps:get(number, S546Wu1)) of {'ok', S548Big} -> begin {_, S549Big0} = 'Tianjiupai.Inning':'big_max'(S543ExposedBig), begin S550NewOne = case 'Tianjiupai.Card':'big_greater'(S548Big, S549Big0) of true -> {'open', S548Big}; false -> 'closed' end, {'ok', {'quadruple', 'Tianjiupai.Inning':'expose'(S543ExposedBig, S550NewOne)}} end end; 'error' -> {'ok', {'quadruple', 'Tianjiupai.Inning':'expose'(S543ExposedBig, 'closed')}} end; false -> {'ok', {'quadruple', 'Tianjiupai.Inning':'expose'(S543ExposedBig, 'closed')}} end; [_ | [_ | [_ | [_ | []]]]] -> {'ok', {'quadruple', 'Tianjiupai.Inning':'expose'(S543ExposedBig, 'closed')}}; _ -> 'error' end end.
'get_winner'(S552Table) -> case S552Table of {'wuzun', {_, ['closed' | ['closed' | ['closed' | []]]]}} -> {0, [{'wu', #{design => true, number => 3}} | [{'wu', #{design => true, number => 6}} | []]]}; {'wenzun', {'minor', S553MajorOrCloseds}} -> begin S555Ns = 'SesterlStdlib.List':'map'(fun(S554X) -> case S554X of {'open', 'major'} -> 2; 'closed' -> 1 end end, S553MajorOrCloseds), begin {S558TrickIndex, S559OneOrTwo} = 'Tianjiupai.Inning':'max_with_index'(fun(S556N1, S557N2) -> (S556N1 > S557N2) end, [1 | S555Ns]), case S559OneOrTwo of 1 -> {0, [{'wen', 1} | [{'wen', 1} | []]]}; 2 -> {S558TrickIndex, [{'wen', 2} | [{'wen', 2} | []]]} end end end; {'single_wen', S560WenExposed} -> begin {S561TrickIndex, S562Wen} = 'Tianjiupai.Inning':'wen_max'(S560WenExposed), {S561TrickIndex, [{'wen', S562Wen} | []]} end; {'single_wu', S563WuExposed} -> begin {S564TrickIndex, S565Wu} = 'Tianjiupai.Inning':'wu_max'(S563WuExposed), {S564TrickIndex, [{'wu', S565Wu} | []]} end; {'double_wen', S566WenExposed} -> begin {S567TrickIndex, S568Wen} = 'Tianjiupai.Inning':'wen_max'(S566WenExposed), {S567TrickIndex, [{'wen', S568Wen} | [{'wen', S568Wen} | []]]} end; {'double_wu', S569WunumExposed} -> begin {S570TrickIndex, S571Wunum} = 'Tianjiupai.Inning':'wu_number_max'(S569WunumExposed), {S570TrickIndex, [{'wu', #{design => false, number => S571Wunum}} | [{'wu', #{design => true, number => S571Wunum}} | []]]} end; {'double_both', S572BigdExposed} -> begin {S573TrickIndex, S574Bigd} = 'Tianjiupai.Inning':'big_with_design_max'(S572BigdExposed), begin {S575Wen, S576Wunum} = 'Tianjiupai.Card':'big_to_wen_and_wu'(maps:get(main, S574Bigd)), {S573TrickIndex, [{'wen', S575Wen} | [{'wu', #{design => maps:get(design, S574Bigd), number => S576Wunum}} | []]]} end end; {'triple_wen', S577BigdExposed} -> begin {S578TrickIndex, S579Bigd} = 'Tianjiupai.Inning':'big_with_design_max'(S577BigdExposed), begin {S580Wen, S581Wunum} = 'Tianjiupai.Card':'big_to_wen_and_wu'(maps:get(main, S579Bigd)), {S578TrickIndex, [{'wen', S580Wen} | [{'wen', S580Wen} | [{'wu', #{design => maps:get(design, S579Bigd), number => S581Wunum}} | []]]]} end end; {'triple_wu', S582BigExposed} -> begin {S583TrickIndex, S584Big} = 'Tianjiupai.Inning':'big_max'(S582BigExposed), begin {S585Wen, S586Wunum} = 'Tianjiupai.Card':'big_to_wen_and_wu'(S584Big), {S583TrickIndex, [{'wen', S585Wen} | [{'wu', #{design => false, number => S586Wunum}} | [{'wu', #{design => true, number => S586Wunum}} | []]]]} end end; {'quadruple', S587BigExposed} -> begin {S588TrickIndex, S589Big} = 'Tianjiupai.Inning':'big_max'(S587BigExposed), begin {S590Wen, S591Wunum} = 'Tianjiupai.Card':'big_to_wen_and_wu'(S589Big), {S588TrickIndex, [{'wen', S590Wen} | [{'wen', S590Wen} | [{'wu', #{design => false, number => S591Wunum}} | [{'wu', #{design => true, number => S591Wunum}} | []]]]]} end end end.
'check_last_submission_is_open'(S593Table) -> begin S597F = fun(S594Exposed) -> begin {S595X, S596XOrCloseds} = S594Exposed, case 'SesterlStdlib.List':'reverse'(S596XOrCloseds) of [] -> true; [{'open', _} | _] -> true; ['closed' | _] -> false end end end, case S593Table of {'wuzun', S598Exposed} -> S597F(S598Exposed); {'wenzun', S599Exposed} -> S597F(S599Exposed); {'single_wen', S600Exposed} -> S597F(S600Exposed); {'single_wu', S601Exposed} -> S597F(S601Exposed); {'double_wen', S602Exposed} -> S597F(S602Exposed); {'double_wu', S603Exposed} -> S597F(S603Exposed); {'double_both', S604Exposed} -> S597F(S604Exposed); {'triple_wen', S605Exposed} -> S597F(S605Exposed); {'triple_wu', S606Exposed} -> S597F(S606Exposed); {'quadruple', S607Exposed} -> S597F(S607Exposed) end end.
'submit'(S609SubmitterSeat, S610SubmittedCards, S611Inning) -> begin S612StartSeat = maps:get(starts_at, S611Inning), begin S613Table0 = maps:get(table, S611Inning), begin S614Players0 = maps:get(players, S611Inning), begin S615N0 = 'Tianjiupai.Inning':'table_length'(S613Table0), begin S616NumGained0 = 'Tianjiupai.Inning':'count_gained'(S614Players0), begin S617NumSubmittedCards = 'SesterlStdlib.List':'length'(S610SubmittedCards), case ((S615N0 < 4) and ((S616NumGained0 < 8) and ((0 < S617NumSubmittedCards) and (S617NumSubmittedCards =< 4)))) of true -> case 'Tianjiupai.Quad':'seat_equal'(S609SubmitterSeat, 'Tianjiupai.Quad':'advance_seat'(S612StartSeat, S615N0)) of true -> begin S618Submitter0 = 'Tianjiupai.Quad':'access'(S609SubmitterSeat, S614Players0), begin S619SubmitterHand0 = maps:get(hand, S618Submitter0), begin S620SubmitterGained0 = maps:get(gained, S618Submitter0), case 'Tianjiupai.Inning':'separate_submitted_cards'(S619SubmitterHand0, S610SubmittedCards) of {'ok', S621SubmitterHand1} -> begin S622Players1 = 'Tianjiupai.Quad':'update'(S609SubmitterSeat, maps:put(hand, S621SubmitterHand1, S618Submitter0), S614Players0), begin S623Res = case ((S616NumGained0 == 7) and (S617NumSubmittedCards == 1)) of true -> case S620SubmitterGained0 of [] -> 'Tianjiupai.Inning':'append_closed_to_table'(S613Table0); [_ | _] -> 'Tianjiupai.Inning':'update_table'(S610SubmittedCards, S613Table0) end; false -> 'Tianjiupai.Inning':'update_table'(S610SubmittedCards, S613Table0) end, begin {'ok', S624Table1} = S623Res, begin S625IsFront = 'Tianjiupai.Inning':'check_last_submission_is_open'(S624Table1), begin S626NumGained1 = (S616NumGained0 + S617NumSubmittedCards), case (S615N0 == 3) of true -> begin {S627WinnerTrickIndex, S628Cards} = 'Tianjiupai.Inning':'get_winner'(S624Table1), begin S629WinnerSeat = 'Tianjiupai.Quad':'advance_seat'(S612StartSeat, S627WinnerTrickIndex), begin S630Winner = 'Tianjiupai.Quad':'access'(S629WinnerSeat, S622Players1), begin S631Players2 = 'Tianjiupai.Quad':'update'(S629WinnerSeat, maps:put(gained, 'SesterlStdlib.List':'append'(maps:get(gained, S630Winner), S628Cards), S630Winner), S622Players1), case (S626NumGained1 == 8) of true -> begin S633GainedQuad = 'Tianjiupai.Quad':'map'(fun(S632P) -> maps:get(gained, S632P) end, S631Players2), {'ok', {{'wins_inning', S629WinnerSeat, S624Table1, S633GainedQuad}, S625IsFront}} end; false -> begin S634Inning1 = #{players => S631Players2, starts_at => S629WinnerSeat, table => 'starting'}, {'ok', {{'wins_trick', S629WinnerSeat, S624Table1, S634Inning1}, S625IsFront}} end end end end end end; false -> begin S635Inning = #{players => S622Players1, starts_at => S612StartSeat, table => S624Table1}, {'ok', {{'continues', S635Inning}, S625IsFront}} end end end end end end end; 'error' -> 'error' end end end end; false -> 'error' end; false -> 'error' end end end end end end end.
