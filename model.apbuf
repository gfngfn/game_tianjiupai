@language_version "0.0.2"
@output "elm": {
  dir     = "./src_client/_generated",
  module  = "Models",
  imports = [],
}

user_id := string

user_name := string

user := {
  user_id   : user_id,
  user_name : user_name,
}

room_id := string

room_name := string

room := {
  room_id   : room_id,
  room_name : room_name,
}

flag_user := {
  id         : user_id,
  name       : user_name,
  belongs_to : option(room_id),
}

create_user_request := {
  user_name : user_name,
}

create_user_response := {
  user_id : user_id,
}

create_room_request := {
  user_id   : user_id,
  room_name : room_name,
}

create_room_response := {
  room_id : room_id,
}

get_all_rooms_response := {
  rooms : list(room_summary),
}

get_room_response :=
  personal_state

room_request :=
  | RoomRequestToEnterRoom   : enter_room_request
  | RoomRequestToSubmitCards : submit_cards_request

enter_room_request := {
  user_id : user_id,
}

enter_room_response :=
  personal_state

submit_cards_request := {
  user_id : user_id,
  cards   : list(card),
}

submit_cards_response := {
  new_state  : observable_game_state,
  trick_last : option(table),
}

room_summary := {
  room       : room,
  members    : list(user),
  is_playing : bool,
}

comment := {
  from : user,
  text : string,
}

log :=
  | LogComment : comment
  | LogEntered : user
  | LogExited  : user
  | LogGameStart

notification :=
  | NotifyComment    : comment
  | NotifyEntered    : user
  | NotifyExited     : user
  | NotifyGameStart  : observable_game_state
  | NotifyNextStep
  | NotifySubmission : submission

submission := {
    seat       : seat,
    submitted  : list(option(card)),
    new_state  : observable_game_state,
    trick_last : option(table),
}

command :=
  | CommandComment    : string
  | CommandAck        : snapshot_id
  | CommandHeartbeat
  | CommandNextInning : snapshot_id

personal_state := {
  room : room,
  logs : list(log),
  game : personal_room_state,
}

personal_room_state :=
  | WaitingStart : list(user)
  | PlayingGame  : observable_game_state

per_seat($a) := {
  east  : $a,
  south : $a,
  west  : $a,
  north : $a,
}

card_wen := int

card_wu := int

card_big := int

card :=
  | Wen : card_wen
  | Wu  : card_wu

closed_or($a) :=
  | Open : $a
  | Closed

exposed($a) := {
  first      : $a,
  subsequent : list(closed_or($a)),
}

unit :=
  | Unit

table :=
  | Starting
  | TrickWuzun      : exposed(unit)
  | TrickWenzun     : exposed(bool)
  | TrickSingleWen  : exposed(card_wen)
  | TrickSingleWu   : exposed(card_wu)
  | TrickDoubleWen  : exposed(card_wen)
  | TrickDoubleWu   : exposed(card_wu)
  | TrickDoubleBoth : exposed(card_big)
  | TrickTripleWen  : exposed(card_big)
  | TrickTripleWu   : exposed(card_big)
  | TrickQuadruple  : exposed(card_big)

seat := int

snapshot_id := string

game_player := {
  user  : user,
  score : int,
}

game_meta := {
  inning_index     : int,
  num_consecutives : int,
  parent_seat      : seat,
  players          : per_seat(game_player),
}

observable_inning_state := {
  starts_at : seat,
  your_hand : list(card),
  gains     : per_seat(list(card)),
  table     : table,
}

observable_inning :=
  | ObservableDuringInning : observable_inning_state
  | ObservableInningEnd    : per_seat(list(card))

observable_game_state := {
  meta              : game_meta,
  observable_inning : observable_inning,
  synchronizing     : bool,
  snapshot_id       : snapshot_id,
}
