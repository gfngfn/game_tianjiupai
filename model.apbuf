@language_version "0.0.3"
@output "elm": {
  dir     = "./src_client/_generated",
  module  = "Models",
  imports = [],
}
@output "sesterl": {
  dir     = "./src/_generated",
  module  = "Models",
  imports = [],
}

user_id := string

user_name := string

user := {
  user_id   : user_id,
  user_name : user_name,
}

room_id := string

room_name := string

room := {
  room_id   : room_id,
  room_name : room_name,
}

flag_user := {
  id         : user_id,
  name       : user_name,
  belongs_to : option(room_id),
}

flag_user_option := option(flag_user)

create_user_request := {
  user_name : user_name,
}

create_user_response := {
  user_id : user_id,
}

create_room_request := {
  user_id   : user_id,
  room_name : room_name,
}

create_room_response := {
  room_id : room_id,
}

get_all_rooms_response := {
  rooms : list(room_summary),
}

get_room_response :=
  personal_state

room_request :=
  | RoomRequestToEnterRoom   : enter_room_request
  | RoomRequestToExitRoom    : enter_room_request
  | RoomRequestToSubmitCards : submit_cards_request

enter_room_request := {
  user_id : user_id,
}

enter_room_response :=
  personal_state

exit_room_request := {
  user_id : user_id,
}

exit_room_response := {
}

submit_cards_request := {
  user_id : user_id,
  cards   : list(card),
}

submit_cards_response := {
  new_state  : observable_game_state,
  trick_last : option(last),
}

room_summary := {
  room       : room,
  members    : list(user),
  is_playing : bool,
}

comment := {
  from : user,
  text : string,
}

game_index := {
  inning_index     : int,
  num_consecutives : int,
}

connection := {
  user         : user,
  is_connected : bool,
}

log :=
  | LogComment    : comment
  | LogEntered    : user
  | LogExited     : user
  | LogGameStart  : game_index
  | LogDiffs      : per_seat(int)
  | LogConnection : connection

notification :=
  | NotifyComment    : comment
  | NotifyEntered    : user
  | NotifyExited     : user
  | NotifyGameStart  : observable_game_state
  | NotifyNextStep
  | NotifySubmission : submission
  | NotifyConnection : connection

last := {
  table : table,
  hand  : list(card),
  diffs : option(per_seat(int)),
}

observable_last := {
  table : table,
  diffs : option(per_seat(int)),
}

submission := {
    seat       : seat,
    submitted  : list(option(card)),
    new_state  : observable_game_state,
    trick_last : option(observable_last),
}

command :=
  | CommandComment    : string
  | CommandAck        : snapshot_id
  | CommandHeartbeat
  | CommandNextInning : snapshot_id

personal_state := {
  room : room,
  logs : list(log),
  game : observable_room_state,
}

observable_room_state :=
  | WaitingStart : list(user)
  | PlayingGame  : observable_game_state

per_seat($a) := {
  east  : $a,
  south : $a,
  west  : $a,
  north : $a,
}

card_wen := int

card_wu := {
    design : design,
    number : card_wu_number,
}

design := bool

card_wu_number := int

card_big :=
  | BigA
  | BigB
  | BigC
  | BigD

card :=
  | Wen : card_wen
  | Wu  : card_wu

closed_or($a) :=
  | Open : $a
  | Closed

exposed($a) := {
  first      : $a,
  subsequent : list(closed_or($a)),
}

wuzun_element :=
  | WuzunUnit

wenzun_element :=
  | WenzunMajor
  | WenzunMinor

table :=
  | Starting
  | Wuzun      : exposed(wuzun_element)
  | Wenzun     : exposed(wenzun_element)
  | SingleWen  : exposed(card_wen)
  | SingleWu   : exposed(card_wu)
  | DoubleWen  : exposed(card_wen)
  | DoubleWu   : exposed(card_wu_number)
  | DoubleBoth : exposed(big_with_design)
  | TripleWen  : exposed(big_with_design)
  | TripleWu   : exposed(card_big)
  | Quadruple  : exposed(card_big)

big_with_design := {
  main   : card_big,
  design : design,
}

seat :=
  | SeatA
  | SeatB
  | SeatC
  | SeatD

snapshot_id := string

game_player := {
  user         : user,
  is_connected : bool,
}

game_meta := {
  inning_index     : int,
  num_consecutives : int,
  parent_seat      : seat,
  scores           : per_seat(int),
  players          : per_seat(option(game_player)),
}

observable_inning_state := {
  starts_at : seat,
  your_hand : list(card),
  gains     : per_seat(list(card)),
  table     : table,
}

observable_inning :=
  | ObservableDuringInning : observable_inning_state
  | ObservableInningEnd    : per_seat(list(card))

observable_game_state := {
  meta              : game_meta,
  observable_inning : observable_inning,
  synchronizing     : bool,
  snapshot_id       : snapshot_id,
}
