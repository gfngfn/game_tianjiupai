import Models
import Quad
import Card
import Inning

module InningTests = #[test] struct
  open Stdlib
  open Models

  #[test]
  val all_cards_test() =
    Testing.it("The number of all cards is 32.", fun() ->
      assert Testing.equal(
        -expect 32,
        -got List.length(Inning.all_cards())
      )
    end)

  #[test]
  val shuffle_test() =
    Testing.it("Every generated hand consists of eight cards.", fun() ->
      let quad = Inning.shuffle() in
      assert Testing.equal(
        -expect Quad.make({8, 8, 8, 8}),
        -got Quad.map(List.length, quad))
    end)

  val wu_number(b, wunum) =
    { design = b, number = wunum }

  val wu(b, wunum) =
    Models.Wu(wu_number(b, wunum))

  val wen(wennum) =
    Models.Wen(wennum)

  val bigd(b, big) : big_with_design =
    { design = b, main = big }

  #[test]
  val make_starting_table_test() =
    let first(x) = { first = x, subsequent = [] } in
    let ok(x) = Some(x) in
    let error() = None in
    Testing.list(
      List.map(
        fun(test_case) ->
          let {submitted_cards, expected} = test_case in
          Testing.it("Makes a starting table", fun() ->
            assert Testing.equal(
              -expect expected,
              -got Inning.make_starting_table(submitted_cards)
            )
          end)
        end,
        List.append(
          List.map(
            fun(test_case) ->
              let {submitted_cards, expected_table} = test_case in
              {submitted_cards, ok(expected_table)}
            end,
            [
              {[wen(11)],
                 SingleWen(first(11))},

              {[wu(true, 8)],
                 SingleWu(first(wu_number(true, 8)))},

              {[wen(4), wen(4)],
                 DoubleWen(first(4))},

              {[wu(false, 7), wu(true, 7)],
                 DoubleWu(first(7))},

              {[wen(1), wen(1)],
                 Wenzun(first(Models.WenzunMinor))},

              {[wu(true, 3), wu(true, 6)],
                 Wuzun(first(Models.WuzunUnit))},

              {[wen(11), wu(true, 9)],
                 DoubleBoth(first(bigd(true, Models.BigD)))},
              {[wen(10), wu(false, 8)],
                 DoubleBoth(first(bigd(false, Models.BigC)))},
              {[wen(9), wu(false, 7)],
                 DoubleBoth(first(bigd(false, Models.BigB)))},
              {[wen(8), wu(true, 5)],
                 DoubleBoth(first(bigd(true, Models.BigA)))},

              {[wu(false, 9), wen(11)],
                 DoubleBoth(first(bigd(false, Models.BigD)))},
              {[wu(true, 8), wen(10)],
                 DoubleBoth(first(bigd(true, Models.BigC)))},
              {[wu(true, 7), wen(9)],
                 DoubleBoth(first(bigd(true, Models.BigB)))},
              {[wu(false, 5), wen(8)],
                 DoubleBoth(first(bigd(false, Models.BigA)))},

              {[wen(11), wu(true, 9), wen(11)],
                 TripleWen(first(bigd(true, Models.BigD)))},
              {[wu(false, 8), wen(10), wen(10)],
                 TripleWen(first(bigd(false, Models.BigC)))},
              {[wen(9), wen(9), wu(true, 7)],
                 TripleWen(first(bigd(true, Models.BigB)))},
              {[wen(8), wu(true, 5), wen(8)],
                 TripleWen(first(bigd(true, Models.BigA)))},
            ]),
          [
            {[],
               error()},
            {[wen(4), wen(5)],
               error()},
            {[wen(11), wu(true, 8)],
               error()}
          ])))
end
