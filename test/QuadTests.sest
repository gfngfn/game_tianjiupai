import Models
import Quad

module QuadTests = #[test] struct
  open Stdlib

  #[test]
  val advance_seat_test() =
    Testing.list(
      List.map(
        fun(test_case) ->
          let {seat, n, expected} = test_case in
          Testing.it("advance_seat", fun() ->
            assert Testing.equal(
              -expect expected,
              -got Quad.advance_seat(seat, n))
          end)
        end,
        [
          {Models.SeatD, 4, Models.SeatD},
          {Models.SeatC, 3, Models.SeatB},
          {Models.SeatC, 0 - 3, Models.SeatD},
        ]))

  val map_test() =
    Testing.it("map", fun() ->
      let f(x) = x + 1 in
      assert Testing.equal(
        -expect Quad.make({5, 5, 3, 4}),
        -got Quad.map(f, Quad.make({4, 4, 2, 3})))
    end)

  type elem =
    | X | Y | Z | W | A

  val update_test() =
    Testing.list(
      List.map(
        fun(test_case) ->
          let {seat, v, input, expected} = test_case in
          Testing.it("update", fun() ->
            assert Testing.equal(
              -expect Quad.make(expected),
              -got Quad.update(seat, v, Quad.make(input)))
          end)
        end,
        [
          {Models.SeatA, A, {X, Y, Z, W}, {A, Y, Z, W}},
          {Models.SeatB, A, {X, Y, Z, W}, {X, A, Z, W}},
          {Models.SeatC, A, {X, Y, Z, W}, {X, Y, A, W}},
          {Models.SeatD, A, {X, Y, Z, W}, {X, Y, Z, A}},
        ]))

end
